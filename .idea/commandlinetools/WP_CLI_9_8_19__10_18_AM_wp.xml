<?xml version="1.0" encoding="UTF-8"?>
<framework xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="schemas/frameworkDescriptionVersion1.1.4.xsd" frameworkId="org.wp-cli" name="WP-CLI_9/8/19, 10:18 AM_wp" invoke="C:\xampp\php\php.exe C:\Users\PHPUnit\wp-cli.phar" alias="wp" enabled="true" version="2">
  <command>
    <name>cache add</name>
    <help><![CDATA[<strong>cache add</strong> &lt;key&gt; &lt;value&gt; [&lt;group&gt;] [&lt;expiration&gt;]<br/><br/>Adds a value to the object cache.<br/>Errors if a value already exists for the key, which means the value can't<br>be added.<br><br>## OPTIONS<br><br>&lt;key&gt;<br>: Cache key.<br><br>&lt;value&gt;<br>: Value to add to the key.<br><br>[&lt;group&gt;]<br>: Method for grouping data within the cache which allows the same key to be used across groups.<br>---<br>default: default<br>---<br><br>[&lt;expiration&gt;]<br>: Define how long to keep the value, in seconds. `0` means as long as possible.<br>---<br>default: 0<br>---<br><br>## EXAMPLES<br><br> # Add cache.<br> $ wp cache add my_key my_group my_value 300<br> Success: Added object 'my_key' in group 'my_value'.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key value group[=null] expiration[=null]</params>
  </command>
  <command>
    <name>cache decr</name>
    <help><![CDATA[<strong>cache decr</strong> &lt;key&gt; [&lt;offset&gt;] [&lt;group&gt;]<br/><br/>Decrements a value in the object cache.<br/>Errors if the value can't be decremented.<br><br>## OPTIONS<br><br>&lt;key&gt;<br>: Cache key.<br><br>[&lt;offset&gt;]<br>: The amount by which to decrement the item's value.<br>---<br>default: 1<br>---<br><br>[&lt;group&gt;]<br>: Method for grouping data within the cache which allows the same key to be used across groups.<br>---<br>default: default<br>---<br><br>## EXAMPLES<br><br> # Decrease cache value.<br> $ wp cache decr my_key 2 my_group<br> 48<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key offset[=null] group[=null]</params>
  </command>
  <command>
    <name>cache delete</name>
    <help><![CDATA[<strong>cache delete</strong> &lt;key&gt; [&lt;group&gt;]<br/><br/>Removes a value from the object cache.<br/>Errors if the value can't be deleted.<br><br>## OPTIONS<br><br>&lt;key&gt;<br>: Cache key.<br><br>[&lt;group&gt;]<br>: Method for grouping data within the cache which allows the same key to be used across groups.<br>---<br>default: default<br>---<br><br>## EXAMPLES<br><br> # Delete cache.<br> $ wp cache delete my_key my_group<br> Success: Object deleted.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key group[=null]</params>
  </command>
  <command>
    <name>cache flush</name>
    <help><![CDATA[<strong>cache flush</strong> <br/><br/>Flushes the object cache.<br/>For WordPress multisite instances using a persistent object cache,<br>flushing the object cache will typically flush the cache for all sites.<br>Beware of the performance impact when flushing the object cache in<br>production.<br><br>Errors if the object cache can't be flushed.<br><br>## EXAMPLES<br><br> # Flush cache.<br> $ wp cache flush<br> Success: The cache was flushed.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cache get</name>
    <help><![CDATA[<strong>cache get</strong> &lt;key&gt; [&lt;group&gt;]<br/><br/>Gets a value from the object cache.<br/>Errors if the value doesn't exist.<br><br>## OPTIONS<br><br>&lt;key&gt;<br>: Cache key.<br><br>[&lt;group&gt;]<br>: Method for grouping data within the cache which allows the same key to be used across groups.<br>---<br>default: default<br>---<br><br>## EXAMPLES<br><br> # Get cache.<br> $ wp cache get my_key my_group<br> my_value<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key group[=null]</params>
  </command>
  <command>
    <name>cache incr</name>
    <help><![CDATA[<strong>cache incr</strong> &lt;key&gt; [&lt;offset&gt;] [&lt;group&gt;]<br/><br/>Increments a value in the object cache.<br/>Errors if the value can't be incremented.<br><br>## OPTIONS<br><br>&lt;key&gt;<br>: Cache key.<br><br>[&lt;offset&gt;]<br>: The amount by which to increment the item's value.<br>---<br>default: 1<br>---<br><br>[&lt;group&gt;]<br>: Method for grouping data within the cache which allows the same key to be used across groups.<br>---<br>default: default<br>---<br><br>## EXAMPLES<br><br> # Increase cache value.<br> $ wp cache incr my_key 2 my_group<br> 50<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key offset[=null] group[=null]</params>
  </command>
  <command>
    <name>cache replace</name>
    <help><![CDATA[<strong>cache replace</strong> &lt;key&gt; &lt;value&gt; [&lt;group&gt;] [&lt;expiration&gt;]<br/><br/>Replaces a value in the object cache, if the value already exists.<br/>Errors if the value can't be replaced.<br><br>## OPTIONS<br><br>&lt;key&gt;<br>: Cache key.<br><br>&lt;value&gt;<br>: Value to replace.<br><br>[&lt;group&gt;]<br>: Method for grouping data within the cache which allows the same key to be used across groups.<br>---<br>default: default<br>---<br><br>[&lt;expiration&gt;]<br>: Define how long to keep the value, in seconds. `0` means as long as possible.<br>---<br>default: 0<br>---<br><br>## EXAMPLES<br><br> # Replace cache.<br> $ wp cache replace my_key new_value my_group<br> Success: Replaced object 'my_key' in group 'my_group'.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key value group[=null] expiration[=null]</params>
  </command>
  <command>
    <name>cache set</name>
    <help><![CDATA[<strong>cache set</strong> &lt;key&gt; &lt;value&gt; [&lt;group&gt;] [&lt;expiration&gt;]<br/><br/>Sets a value to the object cache, regardless of whether it already exists.<br/>Errors if the value can't be set.<br><br>## OPTIONS<br><br>&lt;key&gt;<br>: Cache key.<br><br>&lt;value&gt;<br>: Value to set on the key.<br><br>[&lt;group&gt;]<br>: Method for grouping data within the cache which allows the same key to be used across groups.<br>---<br>default: default<br>---<br><br>[&lt;expiration&gt;]<br>: Define how long to keep the value, in seconds. `0` means as long as possible.<br>---<br>default: 0<br>---<br><br>## EXAMPLES<br><br> # Set cache.<br> $ wp cache set my_key my_value my_group 300<br> Success: Set object 'my_key' in group 'my_group'.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key value group[=null] expiration[=null]</params>
  </command>
  <command>
    <name>cache type</name>
    <help><![CDATA[<strong>cache type</strong> <br/><br/>Attempts to determine which object cache is being used.<br/>Note that the guesses made by this function are based on the<br>WP_Object_Cache classes that define the 3rd party object cache extension.<br>Changes to those classes could render problems with this function's<br>ability to determine which object cache is being used.<br><br>## EXAMPLES<br><br> # Check cache type.<br> $ wp cache type<br> Default<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cap add</name>
    <help><![CDATA[<strong>cap add</strong> &lt;role&gt; &lt;cap&gt;... [--grant]<br/><br/>Adds capabilities to a given role.<br/>## OPTIONS<br><br>&lt;role&gt;<br>: Key for the role.<br><br>&lt;cap&gt;...<br>: One or more capabilities to add.<br><br>[--grant]<br>: Adds the capability as an explicit boolean value, instead of implicitly defaulting to `true`.<br>---<br>default: true<br>options:<br> - true<br> - false<br>---<br><br>## EXAMPLES<br><br> # Add 'spectate' capability to 'author' role.<br> $ wp cap add author spectate<br> Success: Added 1 capability to 'author' role.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>role &lt;cap&gt;...</params>
  </command>
  <command>
    <name>cap list</name>
    <help><![CDATA[<strong>cap list</strong> &lt;role&gt; [--format=&lt;format&gt;] [--show-grant]<br/><br/>Lists capabilities for a given role.<br/>## OPTIONS<br><br>&lt;role&gt;<br>: Key for the role.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: list<br>options:<br> - list<br> - table<br> - csv<br> - json<br> - count<br> - yaml<br>---<br><br>[--show-grant]<br>: Display all capabilities defined for a role including grant.<br>---<br>default: false<br>---<br><br>## EXAMPLES<br><br> # Display alphabetical list of Contributor capabilities.<br> $ wp cap list 'contributor' | sort<br> delete_posts<br> edit_posts<br> level_0<br> level_1<br> read<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>role</params>
  </command>
  <command>
    <name>cap remove</name>
    <help><![CDATA[<strong>cap remove</strong> &lt;role&gt; &lt;cap&gt;...<br/><br/>Removes capabilities from a given role.<br/>## OPTIONS<br><br>&lt;role&gt;<br>: Key for the role.<br><br>&lt;cap&gt;...<br>: One or more capabilities to remove.<br><br>## EXAMPLES<br><br> # Remove 'spectate' capability from 'author' role.<br> $ wp cap remove author spectate<br> Success: Removed 1 capability from 'author' role.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>role cap ...</params>
  </command>
  <command>
    <name>cli alias add</name>
    <help><![CDATA[<strong>cli alias add</strong> &lt;key&gt; [--set-user=&lt;user&gt;] [--set-url=&lt;url&gt;] [--set-path=&lt;path&gt;] [--set-ssh=&lt;ssh&gt;] [--set-http=&lt;http&gt;] [--grouping=&lt;grouping&gt;] [--config=&lt;config&gt;]<br/><br/>Creates an alias.<br/>## OPTIONS<br><br>&lt;key&gt;<br>: Key for the alias.<br><br>[--set-user=&lt;user&gt;]<br>: Set user for alias.<br><br>[--set-url=&lt;url&gt;]<br>: Set url for alias.<br><br>[--set-path=&lt;path&gt;]<br>: Set path for alias.<br><br>[--set-ssh=&lt;ssh&gt;]<br>: Set ssh for alias.<br><br>[--set-http=&lt;http&gt;]<br>: Set http for alias.<br><br>[--grouping=&lt;grouping&gt;]<br>: For grouping multiple aliases.<br><br>[--config=&lt;config&gt;]<br>: Config file to be considered for operations.<br>---<br>default: global<br>options:<br> - global<br> - project<br>---<br><br>## EXAMPLES<br><br> # Add alias to global config.<br> $ wp cli alias add @prod --set-ssh=login@host --set-path=/path/to/wordpress/install/ --set-user=wpcli<br> Success: Added '@prod' alias.<br><br> # Add alias to project config.<br> $ wp cli alias add @prod --set-ssh=login@host --set-path=/path/to/wordpress/install/ --set-user=wpcli --config=project<br> Success: Added '@prod' alias.<br><br> # Add group of aliases.<br> $ wp cli alias add @multiservers --grouping=servera,serverb<br> Success: Added '@multiservers' alias.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key</params>
  </command>
  <command>
    <name>cli alias delete</name>
    <help><![CDATA[<strong>cli alias delete</strong> &lt;key&gt; [--config=&lt;config&gt;]<br/><br/>Deletes an alias.<br/>## OPTIONS<br><br>&lt;key&gt;<br>: Key for the alias.<br><br>[--config=&lt;config&gt;]<br>: Config file to be considered for operations.<br>---<br>options:<br> - global<br> - project<br>---<br><br>## EXAMPLES<br><br> # Delete alias.<br> $ wp cli alias delete @prod<br> Success: Deleted '@prod' alias.<br><br> # Delete project alias.<br> $ wp cli alias delete @prod --config=project<br> Success: Deleted '@prod' alias.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key</params>
  </command>
  <command>
    <name>cli alias get</name>
    <help><![CDATA[<strong>cli alias get</strong> &lt;key&gt;<br/><br/>Gets the value for an alias.<br/>## OPTIONS<br><br>&lt;key&gt;<br>: Key for the alias.<br><br>## EXAMPLES<br><br> # Get alias.<br> $ wp cli alias get @prod<br> ssh: dev@somedeve.env:12345/home/dev/<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key</params>
  </command>
  <command>
    <name>cli alias list</name>
    <help><![CDATA[<strong>cli alias list</strong> [--format=&lt;format&gt;]<br/><br/>List available WP-CLI aliases.<br/>## OPTIONS<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: yaml<br>options:<br> - yaml<br> - json<br> - var_export<br>---<br><br>## EXAMPLES<br><br> # List all available aliases.<br> $ wp cli alias list<br> ---<br> @all: Run command against every registered alias.<br> @prod:<br> ssh: runcommand@runcommand.io~/webapps/production<br> @dev:<br> ssh: vagrant@192.168.50.10/srv/www/runcommand.dev<br> @both:<br> - @prod<br> - @dev<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cli alias update</name>
    <help><![CDATA[<strong>cli alias update</strong> &lt;key&gt; [--set-user=&lt;user&gt;] [--set-url=&lt;url&gt;] [--set-path=&lt;path&gt;] [--set-ssh=&lt;ssh&gt;] [--set-http=&lt;http&gt;] [--grouping=&lt;grouping&gt;] [--config=&lt;config&gt;]<br/><br/>Updates an alias.<br/>## OPTIONS<br><br>&lt;key&gt;<br>: Key for the alias.<br><br>[--set-user=&lt;user&gt;]<br>: Set user for alias.<br><br>[--set-url=&lt;url&gt;]<br>: Set url for alias.<br><br>[--set-path=&lt;path&gt;]<br>: Set path for alias.<br><br>[--set-ssh=&lt;ssh&gt;]<br>: Set ssh for alias.<br><br>[--set-http=&lt;http&gt;]<br>: Set http for alias.<br><br>[--grouping=&lt;grouping&gt;]<br>: For grouping multiple aliases.<br><br>[--config=&lt;config&gt;]<br>: Config file to be considered for operations.<br>---<br>options:<br> - global<br> - project<br>---<br><br>## EXAMPLES<br><br> # Update alias.<br> $ wp cli alias update @prod --set-user=newuser --set-path=/new/path/to/wordpress/install/<br> Success: Updated 'prod' alias.<br><br> # Update project alias.<br> $ wp cli alias update @prod --set-user=newuser --set-path=/new/path/to/wordpress/install/ --config=project<br> Success: Updated 'prod' alias.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key</params>
  </command>
  <command>
    <name>cli cache clear</name>
    <help><![CDATA[<strong>cli cache clear</strong> <br/><br/>Clear the internal cache.<br/>## EXAMPLES<br><br> $ wp cli cache clear<br> Success: Cache cleared.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cli cache prune</name>
    <help><![CDATA[<strong>cli cache prune</strong> <br/><br/>Prune the internal cache.<br/>Removes all cached files except for the newest version of each one.<br><br>## EXAMPLES<br><br> $ wp cli cache prune<br> Success: Cache pruned.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cli check-update</name>
    <help><![CDATA[<strong>cli check-update</strong> [--patch] [--minor] [--major] [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Check to see if there is a newer version of WP-CLI available.<br/>Queries the Github releases API. Returns available versions if there are<br>updates available, or success message if using the latest release.<br><br>## OPTIONS<br><br>[--patch]<br>: Only list patch updates.<br><br>[--minor]<br>: Only list minor updates.<br><br>[--major]<br>: Only list major updates.<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field for each update.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields. Defaults to version,update_type,package_url.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - count<br> - yaml<br>---<br><br>## EXAMPLES<br><br> # Check for update.<br> $ wp cli check-update<br> Success: WP-CLI is at the latest version.<br><br> # Check for update and new version is available.<br> $ wp cli check-update<br> +---------+-------------+-------------------------------------------------------------------------------+<br> | version | update_type | package_url |<br> +---------+-------------+-------------------------------------------------------------------------------+<br> | 0.24.1 | patch | https://github.com/wp-cli/wp-cli/releases/download/v0.24.1/wp-cli-0.24.1.phar |<br> +---------+-------------+-------------------------------------------------------------------------------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cli cmd-dump</name>
    <help><![CDATA[<strong>cli cmd-dump</strong> <br/><br/>Dump the list of installed commands, as JSON.<br/>## EXAMPLES<br><br> # Dump the list of installed commands.<br> $ wp cli cmd-dump<br> {"name":"wp","description":"Manage WordPress through the command-line.","longdesc":"\n\n## GLOBAL PARAMETERS\n\n --path=&lt;path&gt;\n Path to the WordPress files.\n\n --ssh=&lt;ssh&gt;\n Perform operation against a remote server over SSH (or a container using scheme of "docker" or "docker-compose").\n\n --url=&lt;url&gt;\n Pretend request came from given URL. In multisite, this argument is how the target site is specified. \n\n --user=&lt;id|login|email&gt;\n<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cli completions</name>
    <help><![CDATA[<strong>cli completions</strong> --line=&lt;line&gt; --point=&lt;point&gt;<br/><br/>Generate tab completion strings.<br/>## OPTIONS<br><br>--line=&lt;line&gt;<br>: The current command line to be executed.<br><br>--point=&lt;point&gt;<br>: The index to the current cursor position relative to the beginning of the command.<br><br>## EXAMPLES<br><br> # Generate tab completion strings.<br> $ wp cli completions --line='wp eva' --point=100<br> eval<br> eval-file<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cli has-command</name>
    <help><![CDATA[<strong>cli has-command</strong> &lt;command_name&gt;...<br/><br/>Detects if a command exists<br/>This commands checks if a command is registered with WP-CLI.<br>If the command is found then it returns with exit status 0.<br>If the command doesn't exist, then it will exit with status 1.<br><br>## OPTIONS<br>&lt;command_name&gt;...<br>: The command<br><br>## EXAMPLES<br><br> # The "site delete" command is registered.<br> $ wp cli has-command "site delete"<br> $ echo $?<br> 0<br><br> # The "foo bar" command is not registered.<br> $ wp cli has-command "foo bar"<br> $ echo $?<br> 1<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>command_name ...</params>
  </command>
  <command>
    <name>cli info</name>
    <help><![CDATA[<strong>cli info</strong> [--format=&lt;format&gt;]<br/><br/>Print various details about the WP-CLI environment.<br/>Helpful for diagnostic purposes, this command shares:<br><br>* OS information.<br>* Shell information.<br>* PHP binary used.<br>* PHP binary version.<br>* php.ini configuration file used (which is typically different than web).<br>* WP-CLI root dir: where WP-CLI is installed (if non-Phar install).<br>* WP-CLI global config: where the global config YAML file is located.<br>* WP-CLI project config: where the project config YAML file is located.<br>* WP-CLI version: currently installed version.<br><br>See [config docs](https://wp-cli.org/config/) for more details on global<br>and project config YAML files.<br><br>## OPTIONS<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: list<br>options:<br> - list<br> - json<br>---<br><br>## EXAMPLES<br><br> # Display various data about the CLI environment.<br> $ wp cli info<br> OS: Linux 4.10.0-42-generic #46~16.04.1-Ubuntu SMP Mon Dec 4 15:57:59 UTC 2017 x86_64<br> Shell: /usr/bin/zsh<br> PHP binary: /usr/bin/php<br> PHP version: 7.1.12-1+ubuntu16.04.1+deb.sury.org+1<br> php.ini used: /etc/php/7.1/cli/php.ini<br> WP-CLI root dir: phar://wp-cli.phar<br> WP-CLI packages dir: /home/person/.wp-cli/packages/<br> WP-CLI global config:<br> WP-CLI project config:<br> WP-CLI version: 1.5.0<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cli param-dump</name>
    <help><![CDATA[<strong>cli param-dump</strong> [--with-values] [--format=&lt;format&gt;]<br/><br/>Dump the list of global parameters, as JSON or in var_export format.<br/>## OPTIONS<br><br>[--with-values]<br>: Display current values also.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: json<br>options:<br> - var_export<br> - json<br>---<br><br>## EXAMPLES<br><br> # Dump the list of global parameters.<br> $ wp cli param-dump --format=var_export<br> array (<br> 'path' =&gt;<br> array (<br> 'runtime' =&gt; '=&lt;path&gt;',<br> 'file' =&gt; '&lt;path&gt;',<br> 'synopsis' =&gt; '',<br> 'default' =&gt; NULL,<br> 'multiple' =&gt; false,<br> 'desc' =&gt; 'Path to the WordPress files.',<br> ),<br> 'url' =&gt;<br> array (<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cli update</name>
    <help><![CDATA[<strong>cli update</strong> [--patch] [--minor] [--major] [--stable] [--nightly] [--yes]<br/><br/>Update WP-CLI to the latest release.<br/>Default behavior is to check the releases API for the newest stable<br>version, and prompt if one is available.<br><br>Use `--stable` to install or reinstall the latest stable version.<br><br>Use `--nightly` to install the latest built version of the master branch.<br>While not recommended for production, nightly contains the latest and<br>greatest, and should be stable enough for development and staging<br>environments.<br><br>Only works for the Phar installation mechanism.<br><br>## OPTIONS<br><br>[--patch]<br>: Only perform patch updates.<br><br>[--minor]<br>: Only perform minor updates.<br><br>[--major]<br>: Only perform major updates.<br><br>[--stable]<br>: Update to the latest stable release. Skips update check.<br><br>[--nightly]<br>: Update to the latest built version of the master branch. Potentially unstable.<br><br>[--yes]<br>: Do not prompt for confirmation.<br><br>## EXAMPLES<br><br> # Update CLI.<br> $ wp cli update<br> You have version 0.24.0. Would you like to update to 0.24.1? [y/n] y<br> Downloading from https://github.com/wp-cli/wp-cli/releases/download/v0.24.1/wp-cli-0.24.1.phar...<br> New version works. Proceeding to replace.<br> Success: Updated WP-CLI to 0.24.1.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cli version</name>
    <help><![CDATA[<strong>cli version</strong> <br/><br/>Print WP-CLI version.<br/>## EXAMPLES<br><br> # Display CLI version.<br> $ wp cli version<br> WP-CLI 0.24.1<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>comment approve</name>
    <help><![CDATA[<strong>comment approve</strong> &lt;id&gt;...<br/><br/>Approves a comment.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: The IDs of the comments to approve.<br><br>## EXAMPLES<br><br> # Approve comment.<br> $ wp comment approve 1337<br> Success: Approved comment 1337.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>comment count</name>
    <help><![CDATA[<strong>comment count</strong> [&lt;post-id&gt;]<br/><br/>Counts comments, on whole blog or on a given post.<br/>## OPTIONS<br><br>[&lt;post-id&gt;]<br>: The ID of the post to count comments in.<br><br>## EXAMPLES<br><br> # Count comments on whole blog.<br> $ wp comment count<br> approved: 33<br> spam: 3<br> trash: 1<br> post-trashed: 0<br> all: 34<br> moderated: 1<br> total_comments: 37<br><br> # Count comments in a post.<br> $ wp comment count 42<br> approved: 19<br> spam: 0<br> trash: 0<br> post-trashed: 0<br> all: 19<br> moderated: 0<br> total_comments: 19<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>post-id[=null]</params>
  </command>
  <command>
    <name>comment create</name>
    <help><![CDATA[<strong>comment create</strong> [--&lt;field&gt;=&lt;value&gt;] [--porcelain]<br/><br/>Creates a new comment.<br/>## OPTIONS<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Associative args for the new comment. See wp_insert_comment().<br><br>[--porcelain]<br>: Output just the new comment id.<br><br>## EXAMPLES<br><br> # Create comment.<br> $ wp comment create --comment_post_ID=15 --comment_content="hello blog" --comment_author="wp-cli"<br> Success: Created comment 932.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>comment delete</name>
    <help><![CDATA[<strong>comment delete</strong> &lt;id&gt;... [--force]<br/><br/>Deletes a comment.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: One or more IDs of comments to delete.<br><br>[--force]<br>: Skip the trash bin.<br><br>## EXAMPLES<br><br> # Delete comment.<br> $ wp comment delete 1337 --force<br> Success: Deleted comment 1337.<br><br> # Delete multiple comments.<br> $ wp comment delete 1337 2341 --force<br> Success: Deleted comment 1337.<br> Success: Deleted comment 2341.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;id&gt;...</params>
  </command>
  <command>
    <name>comment exists</name>
    <help><![CDATA[<strong>comment exists</strong> &lt;id&gt;<br/><br/>Verifies whether a comment exists.<br/>Displays a success message if the comment does exist.<br><br>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the comment to check.<br><br>## EXAMPLES<br><br> # Check whether comment exists.<br> $ wp comment exists 1337<br> Success: Comment with ID 1337 exists.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id</params>
  </command>
  <command>
    <name>comment generate</name>
    <help><![CDATA[<strong>comment generate</strong> [--count=&lt;number&gt;] [--post_id=&lt;post-id&gt;] [--format=&lt;format&gt;]<br/><br/>Generates some number of new dummy comments.<br/>Creates a specified number of new comments with dummy data.<br><br>## OPTIONS<br><br>[--count=&lt;number&gt;]<br>: How many comments to generate?<br>---<br>default: 100<br>---<br><br>[--post_id=&lt;post-id&gt;]<br>: Assign comments to a specific post.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: progress<br>options:<br> - progress<br> - ids<br>---<br><br>## EXAMPLES<br><br> # Generate comments for the given post.<br> $ wp comment generate --format=ids --count=3 --post_id=123<br> 138 139 140<br><br> # Add meta to every generated comment.<br> $ wp comment generate --format=ids --count=3 | xargs -d ' ' -I % wp comment meta add % foo bar<br> Success: Added custom field.<br> Success: Added custom field.<br> Success: Added custom field.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>comment get</name>
    <help><![CDATA[<strong>comment get</strong> &lt;id&gt; [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Gets the data of a single comment.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The comment to get.<br><br>[--field=&lt;field&gt;]<br>: Instead of returning the whole comment, returns the value of a single field.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific fields. Defaults to all fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br>---<br><br>## EXAMPLES<br><br> # Get comment.<br> $ wp comment get 21 --field=content<br> Thanks for all the comments, everyone!<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id</params>
  </command>
  <command>
    <name>comment list</name>
    <help><![CDATA[<strong>comment list</strong> [--&lt;field&gt;=&lt;value&gt;] [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Gets a list of comments.<br/>Display comments based on all arguments supported by<br>[WP_Comment_Query()](https://developer.wordpress.org/reference/classes/WP_Comment_Query/__construct/).<br><br>## OPTIONS<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: One or more args to pass to WP_Comment_Query.<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field for each comment.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - ids<br> - csv<br> - json<br> - count<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each comment:<br><br>* comment_ID<br>* comment_post_ID<br>* comment_date<br>* comment_approved<br>* comment_author<br>* comment_author_email<br><br>These fields are optionally available:<br><br>* comment_author_url<br>* comment_author_IP<br>* comment_date_gmt<br>* comment_content<br>* comment_karma<br>* comment_agent<br>* comment_type<br>* comment_parent<br>* user_id<br>* url<br><br>## EXAMPLES<br><br> # List comment IDs.<br> $ wp comment list --field=ID<br> 22<br> 23<br> 24<br><br> # List comments of a post.<br> $ wp comment list --post_id=1 --fields=ID,comment_date,comment_author<br> +------------+---------------------+----------------+<br> | comment_ID | comment_date | comment_author |<br> +------------+---------------------+----------------+<br> | 1 | 2015-06-20 09:00:10 | Mr WordPress |<br> +------------+---------------------+----------------+<br><br> # List approved comments.<br> $ wp comment list --number=3 --status=approve --fields=ID,comment_date,comment_author<br> +------------+---------------------+----------------+<br> | comment_ID | comment_date | comment_author |<br> +------------+---------------------+----------------+<br> | 1 | 2015-06-20 09:00:10 | Mr WordPress |<br> | 30 | 2013-03-14 12:35:07 | John Doe |<br> | 29 | 2013-03-14 11:56:08 | Jane Doe |<br> +------------+---------------------+----------------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>comment meta add</name>
    <help><![CDATA[<strong>comment meta add</strong> &lt;id&gt; &lt;key&gt; [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Add a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to create.<br><br>[&lt;value&gt;]<br>: The value of the meta field. If omitted, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key value[=null]</params>
  </command>
  <command>
    <name>comment meta delete</name>
    <help><![CDATA[<strong>comment meta delete</strong> &lt;id&gt; [&lt;key&gt;] [&lt;value&gt;] [--all]<br/><br/>Delete a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>[&lt;key&gt;]<br>: The name of the meta field to delete.<br><br>[&lt;value&gt;]<br>: The value to delete. If omitted, all rows with key will deleted.<br><br>[--all]<br>: Delete all meta for the object.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key[=null] value[=null]</params>
  </command>
  <command>
    <name>comment meta get</name>
    <help><![CDATA[<strong>comment meta get</strong> &lt;id&gt; &lt;key&gt; [--format=&lt;format&gt;]<br/><br/>Get meta field value.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to get.<br><br>[--format=&lt;format&gt;]<br>: Get value in a particular format.<br>---<br>default: var_export<br>options:<br> - var_export<br> - json<br> - yaml<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key</params>
  </command>
  <command>
    <name>comment meta list</name>
    <help><![CDATA[<strong>comment meta list</strong> &lt;id&gt; [--keys=&lt;keys&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;] [--orderby=&lt;fields&gt;] [--order=&lt;order&gt;] [--unserialize]<br/><br/>List all metadata associated with an object.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: ID for the object.<br><br>[--keys=&lt;keys&gt;]<br>: Limit output to metadata of specific keys.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific row fields. Defaults to id,meta_key,meta_value.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br> - count<br>---<br><br>[--orderby=&lt;fields&gt;]<br>: Set orderby which field.<br>---<br>default: id<br>options:<br> - id<br> - meta_key<br> - meta_value<br>---<br><br>[--order=&lt;order&gt;]<br>: Set ascending or descending order.<br>---<br>default: asc<br>options:<br> - asc<br> - desc<br>---<br><br>[--unserialize]<br>: Unserialize meta_value output.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id</params>
  </command>
  <command>
    <name>comment meta patch</name>
    <help><![CDATA[<strong>comment meta patch</strong> &lt;action&gt; &lt;id&gt; &lt;key&gt; &lt;key-path&gt;... [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Update a nested value for a meta field.<br/>## OPTIONS<br><br>&lt;action&gt;<br>: Patch action to perform.<br>---<br>options:<br> - insert<br> - update<br> - delete<br>---<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to update.<br><br>&lt;key-path&gt;...<br>: The name(s) of the keys within the value to locate the value to patch.<br><br>[&lt;value&gt;]<br>: The new value. If omitted, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>action id key &lt;key-path&gt;... value[=null]</params>
  </command>
  <command>
    <name>comment meta pluck</name>
    <help><![CDATA[<strong>comment meta pluck</strong> &lt;id&gt; &lt;key&gt; &lt;key-path&gt;... [--format=&lt;format&gt;]<br/><br/>Get a nested value from a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to get.<br><br>&lt;key-path&gt;...<br>: The name(s) of the keys within the value to locate the value to pluck.<br><br>[--format=&lt;format&gt;]<br>: The output format of the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br> - yaml<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key &lt;key-path&gt;...</params>
  </command>
  <command>
    <name>comment meta update</name>
    <help><![CDATA[<strong>comment meta update</strong> &lt;id&gt; &lt;key&gt; [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Update a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to update.<br><br>[&lt;value&gt;]<br>: The new value. If omitted, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key value[=null]</params>
  </command>
  <command>
    <name>comment recount</name>
    <help><![CDATA[<strong>comment recount</strong> &lt;id&gt;...<br/><br/>Recalculates the comment_count value for one or more posts.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: IDs for one or more posts to update.<br><br>## EXAMPLES<br><br> # Recount comment for the post.<br> $ wp comment recount 123<br> Updated post 123 comment count to 67.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>comment spam</name>
    <help><![CDATA[<strong>comment spam</strong> &lt;id&gt;...<br/><br/>Marks a comment as spam.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: The IDs of the comments to mark as spam.<br><br>## EXAMPLES<br><br> # Spam comment.<br> $ wp comment spam 1337<br> Success: Marked as spam comment 1337.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>comment status</name>
    <help><![CDATA[<strong>comment status</strong> &lt;id&gt;<br/><br/>Gets the status of a comment.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the comment to check.<br><br>## EXAMPLES<br><br> # Get status of comment.<br> $ wp comment status 1337<br> approved<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id</params>
  </command>
  <command>
    <name>comment trash</name>
    <help><![CDATA[<strong>comment trash</strong> &lt;id&gt;...<br/><br/>Trashes a comment.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: The IDs of the comments to trash.<br><br>## EXAMPLES<br><br> # Trash comment.<br> $ wp comment trash 1337<br> Success: Trashed comment 1337.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>comment unapprove</name>
    <help><![CDATA[<strong>comment unapprove</strong> &lt;id&gt;...<br/><br/>Unapproves a comment.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: The IDs of the comments to unapprove.<br><br>## EXAMPLES<br><br> # Unapprove comment.<br> $ wp comment unapprove 1337<br> Success: Unapproved comment 1337.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>comment unspam</name>
    <help><![CDATA[<strong>comment unspam</strong> &lt;id&gt;...<br/><br/>Unmarks a comment as spam.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: The IDs of the comments to unmark as spam.<br><br>## EXAMPLES<br><br> # Unspam comment.<br> $ wp comment unspam 1337<br> Success: Unspammed comment 1337.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>comment untrash</name>
    <help><![CDATA[<strong>comment untrash</strong> &lt;id&gt;...<br/><br/>Untrashes a comment.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: The IDs of the comments to untrash.<br><br>## EXAMPLES<br><br> # Untrash comment.<br> $ wp comment untrash 1337<br> Success: Untrashed comment 1337.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>comment update</name>
    <help><![CDATA[<strong>comment update</strong> &lt;id&gt;... --&lt;field&gt;=&lt;value&gt;<br/><br/>Updates one or more comments.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: One or more IDs of comments to update.<br><br>--&lt;field&gt;=&lt;value&gt;<br>: One or more fields to update. See wp_update_comment().<br><br>## EXAMPLES<br><br> # Update comment.<br> $ wp comment update 123 --comment_author='That Guy'<br> Success: Updated comment 123.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;id&gt;...</params>
  </command>
  <command>
    <name>config create</name>
    <help><![CDATA[<strong>config create</strong> --dbname=&lt;dbname&gt; --dbuser=&lt;dbuser&gt; [--dbpass=&lt;dbpass&gt;] [--dbhost=&lt;dbhost&gt;] [--dbprefix=&lt;dbprefix&gt;] [--dbcharset=&lt;dbcharset&gt;] [--dbcollate=&lt;dbcollate&gt;] [--locale=&lt;locale&gt;] [--extra-php] [--skip-salts] [--skip-check] [--force]<br/><br/>Generates a wp-config.php file.<br/>Creates a new wp-config.php with database constants, and verifies that<br>the database constants are correct.<br><br>## OPTIONS<br><br>--dbname=&lt;dbname&gt;<br>: Set the database name.<br><br>--dbuser=&lt;dbuser&gt;<br>: Set the database user.<br><br>[--dbpass=&lt;dbpass&gt;]<br>: Set the database user password.<br><br>[--dbhost=&lt;dbhost&gt;]<br>: Set the database host.<br>---<br>default: localhost<br>---<br><br>[--dbprefix=&lt;dbprefix&gt;]<br>: Set the database table prefix.<br>---<br>default: wp_<br>---<br><br>[--dbcharset=&lt;dbcharset&gt;]<br>: Set the database charset.<br>---<br>default: utf8<br>---<br><br>[--dbcollate=&lt;dbcollate&gt;]<br>: Set the database collation.<br>---<br>default:<br>---<br><br>[--locale=&lt;locale&gt;]<br>: Set the WPLANG constant. Defaults to $wp_local_package variable.<br><br>[--extra-php]<br>: If set, the command copies additional PHP code into wp-config.php from STDIN.<br><br>[--skip-salts]<br>: If set, keys and salts won't be generated, but should instead be passed via `--extra-php`.<br><br>[--skip-check]<br>: If set, the database connection is not checked.<br><br>[--force]<br>: Overwrites existing files, if present.<br><br>## EXAMPLES<br><br> # Standard wp-config.php file<br> $ wp config create --dbname=testing --dbuser=wp --dbpass=securepswd --locale=ro_RO<br> Success: Generated 'wp-config.php' file.<br><br> # Enable WP_DEBUG and WP_DEBUG_LOG<br> $ wp config create --dbname=testing --dbuser=wp --dbpass=securepswd --extra-php &lt;&lt;PHP<br> define( 'WP_DEBUG', true );<br> define( 'WP_DEBUG_LOG', true );<br> PHP<br> Success: Generated 'wp-config.php' file.<br><br> # Avoid disclosing password to bash history by reading from password.txt<br> # Using --prompt=dbpass will prompt for the 'dbpass' argument<br> $ wp config create --dbname=testing --dbuser=wp --prompt=dbpass &lt; password.txt<br> Success: Generated 'wp-config.php' file.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>config delete</name>
    <help><![CDATA[<strong>config delete</strong> &lt;name&gt; [--type=&lt;type&gt;]<br/><br/>Deletes a specific constant or variable from the wp-config.php file.<br/>## OPTIONS<br><br>&lt;name&gt;<br>: Name of the wp-config.php constant or variable.<br><br>[--type=&lt;type&gt;]<br>: Type of the config value to delete. Defaults to 'all'.<br>---<br>default: all<br>options:<br> - constant<br> - variable<br> - all<br>---<br><br>## EXAMPLES<br><br> # Delete the COOKIE_DOMAIN constant from the wp-config.php file.<br> $ wp config delete COOKIE_DOMAIN<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>name</params>
  </command>
  <command>
    <name>config edit</name>
    <help><![CDATA[<strong>config edit</strong> <br/><br/>Launches system editor to edit the wp-config.php file.<br/>## EXAMPLES<br><br> # Launch system editor to edit wp-config.php file<br> $ wp config edit<br><br> # Edit wp-config.php file in a specific editor<br> $ EDITOR=vim wp config edit<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>config get</name>
    <help><![CDATA[<strong>config get</strong> &lt;name&gt; [--type=&lt;type&gt;] [--format=&lt;format&gt;]<br/><br/>Gets the value of a specific constant or variable defined in wp-config.php file.<br/>## OPTIONS<br><br>&lt;name&gt;<br>: Name of the wp-config.php constant or variable.<br><br>[--type=&lt;type&gt;]<br>: Type of config value to retrieve. Defaults to 'all'.<br>---<br>default: all<br>options:<br> - constant<br> - variable<br> - all<br>---<br><br>[--format=&lt;format&gt;]<br>: Get value in a particular format.<br>---<br>default: var_export<br>options:<br> - var_export<br> - json<br> - yaml<br>---<br><br>## EXAMPLES<br><br> # Get the table_prefix as defined in wp-config.php file.<br> $ wp config get table_prefix<br> wp_<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>name</params>
  </command>
  <command>
    <name>config has</name>
    <help><![CDATA[<strong>config has</strong> &lt;name&gt; [--type=&lt;type&gt;]<br/><br/>Checks whether a specific constant or variable exists in the wp-config.php file.<br/>## OPTIONS<br><br>&lt;name&gt;<br>: Name of the wp-config.php constant or variable.<br><br>[--type=&lt;type&gt;]<br>: Type of the config value to set. Defaults to 'all'.<br>---<br>default: all<br>options:<br> - constant<br> - variable<br> - all<br>---<br><br>## EXAMPLES<br><br> # Check whether the DB_PASSWORD constant exists in the wp-config.php file.<br> $ wp config has DB_PASSWORD<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>name</params>
  </command>
  <command>
    <name>config list</name>
    <help><![CDATA[<strong>config list</strong> [&lt;filter&gt;...] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;] [--strict]<br/><br/>Lists variables, constants, and file includes defined in wp-config.php file.<br/>## OPTIONS<br><br>[&lt;filter&gt;...]<br>: Name or partial name to filter the list by.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific fields. Defaults to all fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br>---<br><br>[--strict]<br>: Enforce strict matching when a filter is provided.<br><br>## EXAMPLES<br><br> # List constants and variables defined in wp-config.php file.<br> $ wp config list<br> +------------------+------------------------------------------------------------------+----------+<br> | key | value | type |<br> +------------------+------------------------------------------------------------------+----------+<br> | table_prefix | wp_ | variable |<br> | DB_NAME | wp_cli_test | constant |<br> | DB_USER | root | constant |<br> | DB_PASSWORD | root | constant |<br> | AUTH_KEY | r6+@shP1yO&$)1gdu.hl[/j;7Zrvmt~o;#WxSsa0mlQOi24j2cR,7i+QM/#7S:o^ | constant |<br> | SECURE_AUTH_KEY | iO-z!_m--YH$Tx2tf/&V,YW*13Z_HiRLqi)d?$o-tMdY+82pK$`T.NYW~iTLW;xp | constant |<br> +------------------+------------------------------------------------------------------+----------+<br><br> # List only database user and password from wp-config.php file.<br> $ wp config list DB_USER DB_PASSWORD --strict<br> +------------------+-------+----------+<br> | key | value | type |<br> +------------------+-------+----------+<br> | DB_USER | root | constant |<br> | DB_PASSWORD | root | constant |<br> +------------------+-------+----------+<br><br> # List all salts from wp-config.php file.<br> $ wp config list _SALT<br> +------------------+------------------------------------------------------------------+----------+<br> | key | value | type |<br> +------------------+------------------------------------------------------------------+----------+<br> | AUTH_SALT | n:]Xditk+_7&gt;Qi=&gt;BmtZHiH-6/Ecrvl(V5ceeGP:{&gt;?;BT^=[B3-0&gt;,~F5z$(+Q$ | constant |<br> | SECURE_AUTH_SALT | ?Z/p|XhDw3w}?c.z%|+BAr|(Iv*H%%U+Du&kKR y?cJOYyRVRBeB[2zF-`(&gt;+LCC | constant |<br> | LOGGED_IN_SALT | +$@(1{b~Z~s}Cs&gt;8Y]6[m6~TnoCDpE&gt;O%e75u}&6kUH!&gt;q:7uM4lxbB6[1pa_X,q | constant |<br> | NONCE_SALT | _x+F li|QL?0OSQns1_JZ{|Ix3Jleox-71km/gifnyz8kmo=w-;@AE8W,(fP&lt;N}2 | constant |<br> +------------------+------------------------------------------------------------------+----------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;filter&gt;...[=null]</params>
  </command>
  <command>
    <name>config path</name>
    <help><![CDATA[<strong>config path</strong> <br/><br/>Gets the path to wp-config.php file.<br/>## EXAMPLES<br><br> # Get wp-config.php file path<br> $ wp config path<br> /home/person/htdocs/project/wp-config.php<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>config set</name>
    <help><![CDATA[<strong>config set</strong> &lt;name&gt; &lt;value&gt; [--add] [--raw] [--anchor=&lt;anchor&gt;] [--placement=&lt;placement&gt;] [--separator=&lt;separator&gt;] [--type=&lt;type&gt;]<br/><br/>Sets the value of a specific constant or variable defined in wp-config.php file.<br/>## OPTIONS<br><br>&lt;name&gt;<br>: Name of the wp-config.php constant or variable.<br><br>&lt;value&gt;<br>: Value to set the wp-config.php constant or variable to.<br><br>[--add]<br>: Add the value if it doesn't exist yet.<br>This is the default behavior, override with --no-add.<br><br>[--raw]<br>: Place the value into the wp-config.php file as is, instead of as a quoted string.<br><br>[--anchor=&lt;anchor&gt;]<br>: Anchor string where additions of new values are anchored around.<br>Defaults to "/* That's all, stop editing!".<br><br>[--placement=&lt;placement&gt;]<br>: Where to place the new values in relation to the anchor string.<br>---<br>default: 'before'<br>options:<br> - before<br> - after<br>---<br><br>[--separator=&lt;separator&gt;]<br>: Separator string to put between an added value and its anchor string.<br>The following escape sequences will be recognized and properly interpreted: '\n' =&gt; newline, '\r' =&gt; carriage return, '\t' =&gt; tab.<br>Defaults to a single EOL ("\n" on *nix and "\r\n" on Windows).<br><br>[--type=&lt;type&gt;]<br>: Type of the config value to set. Defaults to 'all'.<br>---<br>default: all<br>options:<br> - constant<br> - variable<br> - all<br>---<br><br>## EXAMPLES<br><br> # Set the WP_DEBUG constant to true.<br> $ wp config set WP_DEBUG true --raw<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>name value</params>
  </command>
  <command>
    <name>config shuffle-salts</name>
    <help><![CDATA[<strong>config shuffle-salts</strong> <br/><br/>Refreshes the salts defined in the wp-config.php file.<br/>## OPTIONS<br><br>## EXAMPLES<br><br> # Get new salts for your wp-config.php file<br> $ wp config shuffle-salts<br> Success: Shuffled the salt keys.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>core check-update</name>
    <help><![CDATA[<strong>core check-update</strong> [--minor] [--major] [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Checks for WordPress updates via Version Check API.<br/>Lists the most recent versions when there are updates available,<br>or success message when up to date.<br><br>## OPTIONS<br><br>[--minor]<br>: Compare only the first two parts of the version number.<br><br>[--major]<br>: Compare only the first part of the version number.<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field for each update.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields. Defaults to version,update_type,package_url.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - count<br> - json<br> - yaml<br>---<br><br>## EXAMPLES<br><br> $ wp core check-update<br> +---------+-------------+-------------------------------------------------------------+<br> | version | update_type | package_url |<br> +---------+-------------+-------------------------------------------------------------+<br> | 4.5.2 | major | https://downloads.wordpress.org/release/wordpress-4.5.2.zip |<br> +---------+-------------+-------------------------------------------------------------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>core download</name>
    <help><![CDATA[<strong>core download</strong> [--path=&lt;path&gt;] [--locale=&lt;locale&gt;] [--version=&lt;version&gt;] [--skip-content] [--force]<br/><br/>Downloads core WordPress files.<br/>Downloads and extracts WordPress core files to the specified path. Uses<br>current directory when no path is specified. Downloaded build is verified<br>to have the correct md5 and then cached to the local filesytem.<br>Subsequent uses of command will use the local cache if it still exists.<br><br>## OPTIONS<br><br>[--path=&lt;path&gt;]<br>: Specify the path in which to install WordPress. Defaults to current<br>directory.<br><br>[--locale=&lt;locale&gt;]<br>: Select which language you want to download.<br><br>[--version=&lt;version&gt;]<br>: Select which version you want to download. Accepts a version number, 'latest' or 'nightly'<br><br>[--skip-content]<br>: Download WP without the default themes and plugins.<br><br>[--force]<br>: Overwrites existing files, if present.<br><br>## EXAMPLES<br><br> $ wp core download --locale=nl_NL<br> Downloading WordPress 4.5.2 (nl_NL)...<br> md5 hash verified: c5366d05b521831dd0b29dfc386e56a5<br> Success: WordPress downloaded.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>core install</name>
    <help><![CDATA[<strong>core install</strong> --url=&lt;url&gt; --title=&lt;site-title&gt; --admin_user=&lt;username&gt; [--admin_password=&lt;password&gt;] --admin_email=&lt;email&gt; [--skip-email]<br/><br/>Runs the standard WordPress installation process.<br/>Creates the WordPress tables in the database using the URL, title, and<br>default admin user details provided. Performs the famous 5 minute install<br>in seconds or less.<br><br>Note: if you've installed WordPress in a subdirectory, then you'll need<br>to `wp option update siteurl` after `wp core install`. For instance, if<br>WordPress is installed in the `/wp` directory and your domain is example.com,<br>then you'll need to run `wp option update siteurl http://example.com/wp` for<br>your WordPress installation to function properly.<br><br>Note: When using custom user tables (e.g. `CUSTOM_USER_TABLE`), the admin<br>email and password are ignored if the user_login already exists. If the<br>user_login doesn't exist, a new user will be created.<br><br>## OPTIONS<br><br>--url=&lt;url&gt;<br>: The address of the new site.<br><br>--title=&lt;site-title&gt;<br>: The title of the new site.<br><br>--admin_user=&lt;username&gt;<br>: The name of the admin user.<br><br>[--admin_password=&lt;password&gt;]<br>: The password for the admin user. Defaults to randomly generated string.<br><br>--admin_email=&lt;email&gt;<br>: The email address for the admin user.<br><br>[--skip-email]<br>: Don't send an email notification to the new admin user.<br><br>## EXAMPLES<br><br> # Install WordPress in 5 seconds<br> $ wp core install --url=example.com --title=Example --admin_user=supervisor --admin_password=strongpassword --admin_email=info@example.com<br> Success: WordPress installed successfully.<br><br> # Install WordPress without disclosing admin_password to bash history<br> $ wp core install --url=example.com --title=Example --admin_user=supervisor --admin_email=info@example.com --prompt=admin_password &lt; admin_password.txt<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>core is-installed</name>
    <help><![CDATA[<strong>core is-installed</strong> [--network]<br/><br/>Checks if WordPress is installed.<br/>Determines whether WordPress is installed by checking if the standard<br>database tables are installed. Doesn't produce output; uses exit codes<br>to communicate whether WordPress is installed.<br><br>[--network]<br>: Check if this is a multisite installation.<br><br>## EXAMPLES<br><br> # Check whether WordPress is installed; exit status 0 if installed, otherwise 1<br> $ wp core is-installed<br> $ echo $?<br> 1<br><br> # Bash script for checking whether WordPress is installed or not<br> if ! $(wp core is-installed); then<br> wp core install<br> fi<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>core multisite-convert</name>
    <help><![CDATA[<strong>core multisite-convert</strong> [--title=&lt;network-title&gt;] [--base=&lt;url-path&gt;] [--subdomains]<br/><br/>Transforms an existing single-site installation into a multisite installation.<br/>Creates the multisite database tables, and adds the multisite constants<br>to wp-config.php.<br><br>For those using WordPress with Apache, remember to update the `.htaccess`<br>file with the appropriate multisite rewrite rules.<br><br>[Review the multisite documentation](https://codex.wordpress.org/Create_A_Network)<br>for more details about how multisite works.<br><br>## OPTIONS<br><br>[--title=&lt;network-title&gt;]<br>: The title of the new network.<br><br>[--base=&lt;url-path&gt;]<br>: Base path after the domain name that each site url will start with.<br>---<br>default: /<br>---<br><br>[--subdomains]<br>: If passed, the network will use subdomains, instead of subdirectories. Doesn't work with 'localhost'.<br><br>## EXAMPLES<br><br> $ wp core multisite-convert<br> Set up multisite database tables.<br> Added multisite constants to wp-config.php.<br> Success: Network installed. Don't forget to set up rewrite rules.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>core multisite-install</name>
    <help><![CDATA[<strong>core multisite-install</strong> [--url=&lt;url&gt;] [--base=&lt;url-path&gt;] [--subdomains] --title=&lt;site-title&gt; --admin_user=&lt;username&gt; [--admin_password=&lt;password&gt;] --admin_email=&lt;email&gt; [--skip-email] [--skip-config]<br/><br/>Installs WordPress multisite from scratch.<br/>Creates the WordPress tables in the database using the URL, title, and<br>default admin user details provided. Then, creates the multisite tables<br>in the database and adds multisite constants to the wp-config.php.<br><br>For those using WordPress with Apache, remember to update the `.htaccess`<br>file with the appropriate multisite rewrite rules.<br><br>## OPTIONS<br><br>[--url=&lt;url&gt;]<br>: The address of the new site.<br><br>[--base=&lt;url-path&gt;]<br>: Base path after the domain name that each site url in the network will start with.<br>---<br>default: /<br>---<br><br>[--subdomains]<br>: If passed, the network will use subdomains, instead of subdirectories. Doesn't work with 'localhost'.<br><br>--title=&lt;site-title&gt;<br>: The title of the new site.<br><br>--admin_user=&lt;username&gt;<br>: The name of the admin user.<br>---<br>default: admin<br>---<br><br>[--admin_password=&lt;password&gt;]<br>: The password for the admin user. Defaults to randomly generated string.<br><br>--admin_email=&lt;email&gt;<br>: The email address for the admin user.<br><br>[--skip-email]<br>: Don't send an email notification to the new admin user.<br><br>[--skip-config]<br>: Don't add multisite constants to wp-config.php.<br><br>## EXAMPLES<br><br> $ wp core multisite-install --title="Welcome to the WordPress" \<br> &gt; --admin_user="admin" --admin_password="password" \<br> &gt; --admin_email="user@example.com"<br> Single site database tables already present.<br> Set up multisite database tables.<br> Added multisite constants to wp-config.php.<br> Success: Network installed. Don't forget to set up rewrite rules.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>core update</name>
    <help><![CDATA[<strong>core update</strong> [&lt;zip&gt;] [--minor] [--version=&lt;version&gt;] [--force] [--locale=&lt;locale&gt;]<br/><br/>Updates WordPress to a newer version.<br/>Defaults to updating WordPress to the latest version.<br><br>If you see "Error: Another update is currently in progress.", you may<br>need to run `wp option delete core_updater.lock` after verifying another<br>update isn't actually running.<br><br>## OPTIONS<br><br>[&lt;zip&gt;]<br>: Path to zip file to use, instead of downloading from wordpress.org.<br><br>[--minor]<br>: Only perform updates for minor releases (e.g. update from WP 4.3 to 4.3.3 instead of 4.4.2).<br><br>[--version=&lt;version&gt;]<br>: Update to a specific version, instead of to the latest version. Alternatively accepts 'nightly'.<br><br>[--force]<br>: Update even when installed WP version is greater than the requested version.<br><br>[--locale=&lt;locale&gt;]<br>: Select which language you want to download.<br><br>## EXAMPLES<br><br> # Update WordPress<br> $ wp core update<br> Updating to version 4.5.2 (en_US)...<br> Downloading update from https://downloads.wordpress.org/release/wordpress-4.5.2-no-content.zip...<br> Unpacking the update...<br> Cleaning up files...<br> No files found that need cleaning up<br> Success: WordPress updated successfully.<br><br> # Update WordPress to latest version of 3.8 release<br> $ wp core update --version=3.8 ../latest.zip<br> Updating to version 3.8 ()...<br> Unpacking the update...<br> Cleaning up files...<br> File removed: wp-admin/js/tags-box.js<br> ...<br> File removed: wp-admin/js/updates.min.<br> 377 files cleaned up<br> Success: WordPress updated successfully.<br><br> # Update WordPress to 3.1 forcefully<br> $ wp core update --version=3.1 --force<br> Updating to version 3.1 (en_US)...<br> Downloading update from https://wordpress.org/wordpress-3.1.zip...<br> Unpacking the update...<br> Warning: Checksums not available for WordPress 3.1/en_US. Please cleanup files manually.<br> Success: WordPress updated successfully.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>zip[=null]</params>
  </command>
  <command>
    <name>core update-db</name>
    <help><![CDATA[<strong>core update-db</strong> [--network] [--dry-run]<br/><br/>Runs the WordPress database update procedure.<br/>[--network]<br>: Update databases for all sites on a network<br><br>[--dry-run]<br>: Compare database versions without performing the update.<br><br>## EXAMPLES<br><br> # Update the WordPress database<br> $ wp core update-db<br> Success: WordPress database upgraded successfully from db version 36686 to 35700.<br><br> # Update databases for all sites on a network<br> $ wp core update-db --network<br> WordPress database upgraded successfully from db version 35700 to 29630 on example.com/<br> Success: WordPress database upgraded on 123/123 sites<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>core verify-checksums</name>
    <help><![CDATA[<strong>core verify-checksums</strong> [--version=&lt;version&gt;] [--locale=&lt;locale&gt;]<br/><br/>Verifies WordPress files against WordPress.org's checksums.<br/>Downloads md5 checksums for the current version from WordPress.org, and<br>compares those checksums against the currently installed files.<br><br>For security, avoids loading WordPress when verifying checksums.<br><br>If you experience issues verifying from this command, ensure you are<br>passing the relevant `--locale` and `--version` arguments according to<br>the values from the `Dashboard-&gt;Updates` menu in the admin area of the<br>site.<br><br>## OPTIONS<br><br>[--version=&lt;version&gt;]<br>: Verify checksums against a specific version of WordPress.<br><br>[--locale=&lt;locale&gt;]<br>: Verify checksums against a specific locale of WordPress.<br><br>## EXAMPLES<br><br> # Verify checksums<br> $ wp core verify-checksums<br> Success: WordPress installation verifies against checksums.<br><br> # Verify checksums for given WordPress version<br> $ wp core verify-checksums --version=4.0<br> Success: WordPress installation verifies against checksums.<br><br> # Verify checksums for given locale<br> $ wp core verify-checksums --locale=en_US<br> Success: WordPress installation verifies against checksums.<br><br> # Verify checksums for given locale<br> $ wp core verify-checksums --locale=ja<br> Warning: File doesn't verify against checksum: wp-includes/version.php<br> Warning: File doesn't verify against checksum: readme.html<br> Warning: File doesn't verify against checksum: wp-config-sample.php<br> Error: WordPress installation doesn't verify against checksums.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>core version</name>
    <help><![CDATA[<strong>core version</strong> [--extra]<br/><br/>Displays the WordPress version.<br/>## OPTIONS<br><br>[--extra]<br>: Show extended version information.<br><br>## EXAMPLES<br><br> # Display the WordPress version<br> $ wp core version<br> 4.5.2<br><br> # Display WordPress version along with other information<br> $ wp core version --extra<br> WordPress version: 4.5.2<br> Database revision: 36686<br> TinyMCE version: 4.310 (4310-20160418)<br> Package language: en_US<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cron event delete</name>
    <help><![CDATA[<strong>cron event delete</strong> &lt;hook&gt;<br/><br/>Deletes the next scheduled cron event for the given hook.<br/>## OPTIONS<br><br>&lt;hook&gt;<br>: The hook name.<br><br>## EXAMPLES<br><br> # Delete the next scheduled cron event<br> $ wp cron event delete cron_test<br> Success: Deleted 2 instances of the cron event 'cron_test'.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>hook</params>
  </command>
  <command>
    <name>cron event list</name>
    <help><![CDATA[<strong>cron event list</strong> [--fields=&lt;fields&gt;] [--&lt;field&gt;=&lt;value&gt;] [--field=&lt;field&gt;] [--format=&lt;format&gt;]<br/><br/>Lists scheduled cron events.<br/>## OPTIONS<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields.<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Filter by one or more fields.<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field for each event.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - ids<br> - json<br> - count<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each cron event:<br>* hook<br>* next_run_gmt<br>* next_run_relative<br>* recurrence<br><br>These fields are optionally available:<br>* time<br>* sig<br>* args<br>* schedule<br>* interval<br>* next_run<br><br>## EXAMPLES<br><br> # List scheduled cron events<br> $ wp cron event list<br> +-------------------+---------------------+---------------------+------------+<br> | hook | next_run_gmt | next_run_relative | recurrence |<br> +-------------------+---------------------+---------------------+------------+<br> | wp_version_check | 2016-05-31 22:15:13 | 11 hours 57 minutes | 12 hours |<br> | wp_update_plugins | 2016-05-31 22:15:13 | 11 hours 57 minutes | 12 hours |<br> | wp_update_themes | 2016-05-31 22:15:14 | 11 hours 57 minutes | 12 hours |<br> +-------------------+---------------------+---------------------+------------+<br><br> # List scheduled cron events in JSON<br> $ wp cron event list --fields=hook,next_run --format=json<br> [{"hook":"wp_version_check","next_run":"2016-05-31 10:15:13"},{"hook":"wp_update_plugins","next_run":"2016-05-31 10:15:13"},{"hook":"wp_update_themes","next_run":"2016-05-31 10:15:14"}]<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cron event run</name>
    <help><![CDATA[<strong>cron event run</strong> [&lt;hook&gt;...] [--due-now] [--all]<br/><br/>Runs the next scheduled cron event for the given hook.<br/>## OPTIONS<br><br>[&lt;hook&gt;...]<br>: One or more hooks to run.<br><br>[--due-now]<br>: Run all hooks due right now.<br><br>[--all]<br>: Run all hooks.<br><br>## EXAMPLES<br><br> # Run all cron events due right now<br> $ wp cron event run --due-now<br> Success: Executed a total of 2 cron events.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;hook&gt;...[=null]</params>
  </command>
  <command>
    <name>cron event schedule</name>
    <help><![CDATA[<strong>cron event schedule</strong> &lt;hook&gt; [&lt;next-run&gt;] [&lt;recurrence&gt;] [--&lt;field&gt;=&lt;value&gt;]<br/><br/>Schedules a new cron event.<br/>## OPTIONS<br><br>&lt;hook&gt;<br>: The hook name.<br><br>[&lt;next-run&gt;]<br>: A Unix timestamp or an English textual datetime description compatible with `strtotime()`. Defaults to now.<br><br>[&lt;recurrence&gt;]<br>: How often the event should recur. See `wp cron schedule list` for available schedule names. Defaults to no recurrence.<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Associative args for the event.<br><br>## EXAMPLES<br><br> # Schedule a new cron event<br> $ wp cron event schedule cron_test<br> Success: Scheduled event with hook 'cron_test' for 2016-05-31 10:19:16 GMT.<br><br> # Schedule new cron event with hourly recurrence<br> $ wp cron event schedule cron_test now hourly<br> Success: Scheduled event with hook 'cron_test' for 2016-05-31 10:20:32 GMT.<br><br> # Schedule new cron event and pass associative arguments<br> $ wp cron event schedule cron_test '+1 hour' --foo=1 --bar=2<br> Success: Scheduled event with hook 'cron_test' for 2016-05-31 11:21:35 GMT.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>hook next-run[=null] recurrence[=null]</params>
  </command>
  <command>
    <name>cron schedule list</name>
    <help><![CDATA[<strong>cron schedule list</strong> [--fields=&lt;fields&gt;] [--field=&lt;field&gt;] [--format=&lt;format&gt;]<br/><br/>List available cron schedules.<br/>## OPTIONS<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields.<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field for each schedule.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - ids<br> - json<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each cron schedule:<br><br>* name<br>* display<br>* interval<br><br>There are no additional fields.<br><br>## EXAMPLES<br><br> # List available cron schedules<br> $ wp cron schedule list<br> +------------+-------------+----------+<br> | name | display | interval |<br> +------------+-------------+----------+<br> | hourly | Once Hourly | 3600 |<br> | twicedaily | Twice Daily | 43200 |<br> | daily | Once Daily | 86400 |<br> +------------+-------------+----------+<br><br> # List id of available cron schedule<br> $ wp cron schedule list --fields=name --format=ids<br> hourly twicedaily daily<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>cron test</name>
    <help><![CDATA[<strong>cron test</strong> <br/><br/>Tests the WP Cron spawning system and reports back its status.<br/>This command tests the spawning system by performing the following steps:<br><br>* Checks to see if the `DISABLE_WP_CRON` constant is set; errors if true<br>because WP-Cron is disabled.<br>* Checks to see if the `ALTERNATE_WP_CRON` constant is set; warns if true.<br>* Attempts to spawn WP-Cron over HTTP; warns if non 200 response code is<br>returned.<br><br>## EXAMPLES<br><br> # Cron test runs successfully.<br> $ wp cron test<br> Success: WP-Cron spawning is working as expected.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>db check</name>
    <help><![CDATA[<strong>db check</strong> [--dbuser=&lt;value&gt;] [--dbpass=&lt;value&gt;] [--&lt;field&gt;=&lt;value&gt;]<br/><br/>Checks the current status of the database.<br/>Runs `mysqlcheck` utility with `--check` using `DB_HOST`,<br>`DB_NAME`, `DB_USER` and `DB_PASSWORD` database credentials<br>specified in wp-config.php.<br><br>[See docs](http://dev.mysql.com/doc/refman/5.7/en/check-table.html)<br>for more details on the `CHECK TABLE` statement.<br><br>## OPTIONS<br><br>[--dbuser=&lt;value&gt;]<br>: Username to pass to mysqlcheck. Defaults to DB_USER.<br><br>[--dbpass=&lt;value&gt;]<br>: Password to pass to mysqlcheck. Defaults to DB_PASSWORD.<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Extra arguments to pass to mysqlcheck. [Refer to mysqlcheck docs](https://dev.mysql.com/doc/en/mysqlcheck.html).<br><br>## EXAMPLES<br><br> $ wp db check<br> Success: Database checked.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>db clean</name>
    <help><![CDATA[<strong>db clean</strong> [--dbuser=&lt;value&gt;] [--dbpass=&lt;value&gt;] [--yes]<br/><br/>Removes all tables with `$table_prefix` from the database.<br/>Runs `DROP_TABLE` for each table that has a `$table_prefix` as specified<br>in wp-config.php.<br><br>## OPTIONS<br><br>[--dbuser=&lt;value&gt;]<br>: Username to pass to mysql. Defaults to DB_USER.<br><br>[--dbpass=&lt;value&gt;]<br>: Password to pass to mysql. Defaults to DB_PASSWORD.<br><br>[--yes]<br>: Answer yes to the confirmation message.<br><br>## EXAMPLES<br><br> # Delete all tables that match the current site prefix.<br> $ wp db clean --yes<br> Success: Tables dropped.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>db cli</name>
    <help><![CDATA[<strong>db cli</strong> [--database=&lt;database&gt;] [--default-character-set=&lt;character-set&gt;] [--dbuser=&lt;value&gt;] [--dbpass=&lt;value&gt;] [--&lt;field&gt;=&lt;value&gt;]<br/><br/>Opens a MySQL console using credentials from wp-config.php<br/>## OPTIONS<br><br>[--database=&lt;database&gt;]<br>: Use a specific database. Defaults to DB_NAME.<br><br>[--default-character-set=&lt;character-set&gt;]<br>: Use a specific character set. Defaults to DB_CHARSET when defined.<br><br>[--dbuser=&lt;value&gt;]<br>: Username to pass to mysql. Defaults to DB_USER.<br><br>[--dbpass=&lt;value&gt;]<br>: Password to pass to mysql. Defaults to DB_PASSWORD.<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Extra arguments to pass to mysql. [Refer to mysql docs](https://dev.mysql.com/doc/en/mysql-command-options.html).<br><br>## EXAMPLES<br><br> # Open MySQL console<br> $ wp db cli<br> mysql&gt;<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>db columns</name>
    <help><![CDATA[<strong>db columns</strong> [&lt;table&gt;] [--format]<br/><br/>Displays information about a given table.<br/>## OPTIONS<br><br>[&lt;table&gt;]<br>: Name of the database table.<br><br>[--format]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br>---<br><br>## EXAMPLES<br><br> $ wp db columns wp_posts<br> +-----------------------+---------------------+------+-----+---------------------+----------------+<br> | Field | Type | Null | Key | Default | Extra |<br> +-----------------------+---------------------+------+-----+---------------------+----------------+<br> | ID | bigint(20) unsigned | NO | PRI | | auto_increment |<br> | post_author | bigint(20) unsigned | NO | MUL | 0 | |<br> | post_date | datetime | NO | | 0000-00-00 00:00:00 | |<br> | post_date_gmt | datetime | NO | | 0000-00-00 00:00:00 | |<br> | post_content | longtext | NO | | | |<br> | post_title | text | NO | | | |<br> | post_excerpt | text | NO | | | |<br> | post_status | varchar(20) | NO | | publish | |<br> | comment_status | varchar(20) | NO | | open | |<br> | ping_status | varchar(20) | NO | | open | |<br> | post_password | varchar(255) | NO | | | |<br> | post_name | varchar(200) | NO | MUL | | |<br> | to_ping | text | NO | | | |<br> | pinged | text | NO | | | |<br> | post_modified | datetime | NO | | 0000-00-00 00:00:00 | |<br> | post_modified_gmt | datetime | NO | | 0000-00-00 00:00:00 | |<br> | post_content_filtered | longtext | NO | | | |<br> | post_parent | bigint(20) unsigned | NO | MUL | 0 | |<br> | guid | varchar(255) | NO | | | |<br> | menu_order | int(11) | NO | | 0 | |<br> | post_type | varchar(20) | NO | MUL | post | |<br> | post_mime_type | varchar(100) | NO | | | |<br> | comment_count | bigint(20) | NO | | 0 | |<br> +-----------------------+---------------------+------+-----+---------------------+----------------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>table[=null]</params>
  </command>
  <command>
    <name>db create</name>
    <help><![CDATA[<strong>db create</strong> [--dbuser=&lt;value&gt;] [--dbpass=&lt;value&gt;]<br/><br/>Creates a new database.<br/>Runs `CREATE_DATABASE` SQL statement using `DB_HOST`, `DB_NAME`,<br>`DB_USER` and `DB_PASSWORD` database credentials specified in<br>wp-config.php.<br><br>## OPTIONS<br><br>[--dbuser=&lt;value&gt;]<br>: Username to pass to mysql. Defaults to DB_USER.<br><br>[--dbpass=&lt;value&gt;]<br>: Password to pass to mysql. Defaults to DB_PASSWORD.<br><br>## EXAMPLES<br><br> $ wp db create<br> Success: Database created.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>db drop</name>
    <help><![CDATA[<strong>db drop</strong> [--dbuser=&lt;value&gt;] [--dbpass=&lt;value&gt;] [--yes]<br/><br/>Deletes the existing database.<br/>Runs `DROP_DATABASE` SQL statement using `DB_HOST`, `DB_NAME`,<br>`DB_USER` and `DB_PASSWORD` database credentials specified in<br>wp-config.php.<br><br>## OPTIONS<br><br>[--dbuser=&lt;value&gt;]<br>: Username to pass to mysql. Defaults to DB_USER.<br><br>[--dbpass=&lt;value&gt;]<br>: Password to pass to mysql. Defaults to DB_PASSWORD.<br><br>[--yes]<br>: Answer yes to the confirmation message.<br><br>## EXAMPLES<br><br> $ wp db drop --yes<br> Success: Database dropped.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>db export</name>
    <help><![CDATA[<strong>db export</strong> [&lt;file&gt;] [--dbuser=&lt;value&gt;] [--dbpass=&lt;value&gt;] [--&lt;field&gt;=&lt;value&gt;] [--tables=&lt;tables&gt;] [--exclude_tables=&lt;tables&gt;] [--porcelain]<br/><br/>Exports the database to a file or to STDOUT.<br/>Runs `mysqldump` utility using `DB_HOST`, `DB_NAME`, `DB_USER` and<br>`DB_PASSWORD` database credentials specified in wp-config.php.<br><br>## OPTIONS<br><br>[&lt;file&gt;]<br>: The name of the SQL file to export. If '-', then outputs to STDOUT. If<br>omitted, it will be '{dbname}-{Y-m-d}-{random-hash}.sql'.<br><br>[--dbuser=&lt;value&gt;]<br>: Username to pass to mysqldump. Defaults to DB_USER.<br><br>[--dbpass=&lt;value&gt;]<br>: Password to pass to mysqldump. Defaults to DB_PASSWORD.<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Extra arguments to pass to mysqldump. [Refer to mysqldump docs](https://dev.mysql.com/doc/en/mysqldump.html#mysqldump-option-summary).<br><br>[--tables=&lt;tables&gt;]<br>: The comma separated list of specific tables to export. Excluding this parameter will export all tables in the database.<br><br>[--exclude_tables=&lt;tables&gt;]<br>: The comma separated list of specific tables that should be skipped from exporting. Excluding this parameter will export all tables in the database.<br><br>[--porcelain]<br>: Output filename for the exported database.<br><br>## EXAMPLES<br><br> # Export database with drop query included<br> $ wp db export --add-drop-table<br> Success: Exported to 'wordpress_dbase-db72bb5.sql'.<br><br> # Export certain tables<br> $ wp db export --tables=wp_options,wp_users<br> Success: Exported to 'wordpress_dbase-db72bb5.sql'.<br><br> # Export all tables matching a wildcard<br> $ wp db export --tables=$(wp db tables 'wp_user*' --format=csv)<br> Success: Exported to 'wordpress_dbase-db72bb5.sql'.<br><br> # Export all tables matching prefix<br> $ wp db export --tables=$(wp db tables --all-tables-with-prefix --format=csv)<br> Success: Exported to 'wordpress_dbase-db72bb5.sql'.<br><br> # Export certain posts without create table statements<br> $ wp db export --no-create-info=true --tables=wp_posts --where="ID in (100,101,102)"<br> Success: Exported to 'wordpress_dbase-db72bb5.sql'.<br><br> # Export relating meta for certain posts without create table statements<br> $ wp db export --no-create-info=true --tables=wp_postmeta --where="post_id in (100,101,102)"<br> Success: Exported to 'wordpress_dbase-db72bb5.sql'.<br><br> # Skip certain tables from the exported database<br> $ wp db export --exclude_tables=wp_options,wp_users<br> Success: Exported to 'wordpress_dbase-db72bb5.sql'.<br><br> # Skip all tables matching a wildcard from the exported database<br> $ wp db export --exclude_tables=$(wp db tables 'wp_user*' --format=csv)<br> Success: Exported to 'wordpress_dbase-db72bb5.sql'.<br><br> # Skip all tables matching prefix from the exported database<br> $ wp db export --exclude_tables=$(wp db tables --all-tables-with-prefix --format=csv)<br> Success: Exported to 'wordpress_dbase-db72bb5.sql'.<br><br> # Export database to STDOUT.<br> $ wp db export -<br> -- MySQL dump 10.13 Distrib 5.7.19, for osx10.12 (x86_64)<br> --<br> -- Host: localhost Database: wpdev<br> -- ------------------------------------------------------<br> -- Server version 5.7.19<br> ...<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>file[=null]</params>
  </command>
  <command>
    <name>db import</name>
    <help><![CDATA[<strong>db import</strong> [&lt;file&gt;] [--dbuser=&lt;value&gt;] [--dbpass=&lt;value&gt;] [--&lt;field&gt;=&lt;value&gt;] [--skip-optimization]<br/><br/>Imports a database from a file or from STDIN.<br/>Runs SQL queries using `DB_HOST`, `DB_NAME`, `DB_USER` and<br>`DB_PASSWORD` database credentials specified in wp-config.php. This<br>does not create database by itself and only performs whatever tasks are<br>defined in the SQL.<br><br>## OPTIONS<br><br>[&lt;file&gt;]<br>: The name of the SQL file to import. If '-', then reads from STDIN. If omitted, it will look for '{dbname}.sql'.<br><br>[--dbuser=&lt;value&gt;]<br>: Username to pass to mysql. Defaults to DB_USER.<br><br>[--dbpass=&lt;value&gt;]<br>: Password to pass to mysql. Defaults to DB_PASSWORD.<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Extra arguments to pass to mysql. [Refer to mysql binary docs](https://dev.mysql.com/doc/refman/8.0/en/mysql-command-options.html).<br><br>[--skip-optimization]<br>: When using an SQL file, do not include speed optimization such as disabling auto-commit and key checks.<br><br>## EXAMPLES<br><br> # Import MySQL from a file.<br> $ wp db import wordpress_dbase.sql<br> Success: Imported from 'wordpress_dbase.sql'.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>file[=null]</params>
  </command>
  <command>
    <name>db optimize</name>
    <help><![CDATA[<strong>db optimize</strong> [--dbuser=&lt;value&gt;] [--dbpass=&lt;value&gt;] [--&lt;field&gt;=&lt;value&gt;]<br/><br/>Optimizes the database.<br/>Runs `mysqlcheck` utility with `--optimize=true` using `DB_HOST`,<br>`DB_NAME`, `DB_USER` and `DB_PASSWORD` database credentials<br>specified in wp-config.php.<br><br>[See docs](http://dev.mysql.com/doc/refman/5.7/en/optimize-table.html)<br>for more details on the `OPTIMIZE TABLE` statement.<br><br>## OPTIONS<br><br>[--dbuser=&lt;value&gt;]<br>: Username to pass to mysqlcheck. Defaults to DB_USER.<br><br>[--dbpass=&lt;value&gt;]<br>: Password to pass to mysqlcheck. Defaults to DB_PASSWORD.<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Extra arguments to pass to mysqlcheck. [Refer to mysqlcheck docs](https://dev.mysql.com/doc/en/mysqlcheck.html).<br><br>## EXAMPLES<br><br> $ wp db optimize<br> Success: Database optimized.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>db prefix</name>
    <help><![CDATA[<strong>db prefix</strong> <br/><br/>Displays the database table prefix.<br/>Display the database table prefix, as defined by the database handler's interpretation of the current site.<br><br>## EXAMPLES<br><br> $ wp db prefix<br> wp_<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>db query</name>
    <help><![CDATA[<strong>db query</strong> [&lt;sql&gt;] [--dbuser=&lt;value&gt;] [--dbpass=&lt;value&gt;] [--&lt;field&gt;=&lt;value&gt;]<br/><br/>Executes a SQL query against the database.<br/>Executes an arbitrary SQL query using `DB_HOST`, `DB_NAME`, `DB_USER`<br> and `DB_PASSWORD` database credentials specified in wp-config.php.<br><br>## OPTIONS<br><br>[&lt;sql&gt;]<br>: A SQL query. If not passed, will try to read from STDIN.<br><br>[--dbuser=&lt;value&gt;]<br>: Username to pass to mysql. Defaults to DB_USER.<br><br>[--dbpass=&lt;value&gt;]<br>: Password to pass to mysql. Defaults to DB_PASSWORD.<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Extra arguments to pass to mysql. [Refer to mysql docs](https://dev.mysql.com/doc/en/mysql-command-options.html).<br><br>## EXAMPLES<br><br> # Execute a query stored in a file<br> $ wp db query &lt; debug.sql<br><br> # Check all tables in the database<br> $ wp db query "CHECK TABLE $(wp db tables | paste -s -d, -);"<br> +---------------------------------------+-------+----------+----------+<br> | Table | Op | Msg_type | Msg_text |<br> +---------------------------------------+-------+----------+----------+<br> | wordpress_dbase.wp_users | check | status | OK |<br> | wordpress_dbase.wp_usermeta | check | status | OK |<br> | wordpress_dbase.wp_posts | check | status | OK |<br> | wordpress_dbase.wp_comments | check | status | OK |<br> | wordpress_dbase.wp_links | check | status | OK |<br> | wordpress_dbase.wp_options | check | status | OK |<br> | wordpress_dbase.wp_postmeta | check | status | OK |<br> | wordpress_dbase.wp_terms | check | status | OK |<br> | wordpress_dbase.wp_term_taxonomy | check | status | OK |<br> | wordpress_dbase.wp_term_relationships | check | status | OK |<br> | wordpress_dbase.wp_termmeta | check | status | OK |<br> | wordpress_dbase.wp_commentmeta | check | status | OK |<br> +---------------------------------------+-------+----------+----------+<br><br> # Pass extra arguments through to MySQL<br> $ wp db query 'SELECT * FROM wp_options WHERE option_name="home"' --skip-column-names<br> +---+------+------------------------------+-----+<br> | 2 | home | http://wordpress-develop.dev | yes |<br> +---+------+------------------------------+-----+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>sql[=null]</params>
  </command>
  <command>
    <name>db repair</name>
    <help><![CDATA[<strong>db repair</strong> [--dbuser=&lt;value&gt;] [--dbpass=&lt;value&gt;] [--&lt;field&gt;=&lt;value&gt;]<br/><br/>Repairs the database.<br/>Runs `mysqlcheck` utility with `--repair=true` using `DB_HOST`,<br>`DB_NAME`, `DB_USER` and `DB_PASSWORD` database credentials<br>specified in wp-config.php.<br><br>[See docs](http://dev.mysql.com/doc/refman/5.7/en/repair-table.html) for<br>more details on the `REPAIR TABLE` statement.<br><br>## OPTIONS<br><br>[--dbuser=&lt;value&gt;]<br>: Username to pass to mysqlcheck. Defaults to DB_USER.<br><br>[--dbpass=&lt;value&gt;]<br>: Password to pass to mysqlcheck. Defaults to DB_PASSWORD.<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Extra arguments to pass to mysqlcheck. [Refer to mysqlcheck docs](https://dev.mysql.com/doc/en/mysqlcheck.html).<br><br>## EXAMPLES<br><br> $ wp db repair<br> Success: Database repaired.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>db reset</name>
    <help><![CDATA[<strong>db reset</strong> [--dbuser=&lt;value&gt;] [--dbpass=&lt;value&gt;] [--yes]<br/><br/>Removes all tables from the database.<br/>Runs `DROP_DATABASE` and `CREATE_DATABASE` SQL statements using<br>`DB_HOST`, `DB_NAME`, `DB_USER` and `DB_PASSWORD` database credentials<br>specified in wp-config.php.<br><br>## OPTIONS<br><br>[--dbuser=&lt;value&gt;]<br>: Username to pass to mysql. Defaults to DB_USER.<br><br>[--dbpass=&lt;value&gt;]<br>: Password to pass to mysql. Defaults to DB_PASSWORD.<br><br>[--yes]<br>: Answer yes to the confirmation message.<br><br>## EXAMPLES<br><br> $ wp db reset --yes<br> Success: Database reset.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>db search</name>
    <help><![CDATA[<strong>db search</strong> &lt;search&gt; [&lt;tables&gt;...] [--network] [--all-tables-with-prefix] [--all-tables] [--before_context=&lt;num&gt;] [--after_context=&lt;num&gt;] [--regex] [--regex-flags=&lt;regex-flags&gt;] [--regex-delimiter=&lt;regex-delimiter&gt;] [--table_column_once] [--one_line] [--matches_only] [--stats] [--table_column_color=&lt;color_code&gt;] [--id_color=&lt;color_code&gt;] [--match_color=&lt;color_code&gt;]<br/><br/>Finds a string in the database.<br/>Searches through all or a selection of database tables for a given string, Outputs colorized references to the string.<br><br>Defaults to searching through all tables registered to $wpdb. On multisite, this default is limited to the tables for the current site.<br><br>## OPTIONS<br><br>&lt;search&gt;<br>: String to search for. The search is case-insensitive by default.<br><br>[&lt;tables&gt;...]<br>: One or more tables to search through for the string.<br><br>[--network]<br>: Search through all the tables registered to $wpdb in a multisite install.<br><br>[--all-tables-with-prefix]<br>: Search through all tables that match the registered table prefix, even if not registered on $wpdb. On one hand, sometimes plugins use tables without registering them to $wpdb. On another hand, this could return tables you don't expect. Overrides --network.<br><br>[--all-tables]<br>: Search through ALL tables in the database, regardless of the prefix, and even if not registered on $wpdb. Overrides --network and --all-tables-with-prefix.<br><br>[--before_context=&lt;num&gt;]<br>: Number of characters to display before the match.<br>---<br>default: 40<br>---<br><br>[--after_context=&lt;num&gt;]<br>: Number of characters to display after the match.<br>---<br>default: 40<br>---<br><br>[--regex]<br>: Runs the search as a regular expression (without delimiters). The search becomes case-sensitive (i.e. no PCRE flags are added). Delimiters must be escaped if they occur in the expression.<br><br>[--regex-flags=&lt;regex-flags&gt;]<br>: Pass PCRE modifiers to the regex search (e.g. 'i' for case-insensitivity).<br><br>[--regex-delimiter=&lt;regex-delimiter&gt;]<br>: The delimiter to use for the regex. It must be escaped if it appears in the search string. The default value is the result of `chr(1)`.<br><br>[--table_column_once]<br>: Output the 'table:column' line once before all matching row lines in the table column rather than before each matching row.<br><br>[--one_line]<br>: Place the 'table:column' output on the same line as the row id and match ('table:column:id:match'). Overrides --table_column_once.<br><br>[--matches_only]<br>: Only output the string matches (including context). No 'table:column's or row ids are outputted.<br><br>[--stats]<br>: Output stats on the number of matches found, time taken, tables/columns/rows searched, tables skipped.<br><br>[--table_column_color=&lt;color_code&gt;]<br>: Percent color code to use for the 'table:column' output. For a list of available percent color codes, see below. Default '%G' (bright green).<br><br>[--id_color=&lt;color_code&gt;]<br>: Percent color code to use for the row id output. For a list of available percent color codes, see below. Default '%Y' (bright yellow).<br><br>[--match_color=&lt;color_code&gt;]<br>: Percent color code to use for the match (unless both before and after context are 0, when no color code is used). For a list of available percent color codes, see below. Default '%3%k' (black on a mustard background).<br><br>The percent color codes available are:<br><br>| Code | Color<br>| ---- | -----<br>| %y | Yellow (dark) (mustard)<br>| %g | Green (dark)<br>| %b | Blue (dark)<br>| %r | Red (dark)<br>| %m | Magenta (dark)<br>| %c | Cyan (dark)<br>| %w | White (dark) (light gray)<br>| %k | Black<br>| %Y | Yellow (bright)<br>| %G | Green (bright)<br>| %B | Blue (bright)<br>| %R | Red (bright)<br>| %M | Magenta (bright)<br>| %C | Cyan (bright)<br>| %W | White<br>| %K | Black (bright) (dark gray)<br>| %3 | Yellow background (dark) (mustard)<br>| %2 | Green background (dark)<br>| %4 | Blue background (dark)<br>| %1 | Red background (dark)<br>| %5 | Magenta background (dark)<br>| %6 | Cyan background (dark)<br>| %7 | White background (dark) (light gray)<br>| %0 | Black background<br>| %8 | Reverse<br>| %U | Underline<br>| %F | Blink (unlikely to work)<br><br>They can be concatenated. For instance, the default match color of black on a mustard (dark yellow) background `%3%k` can be made black on a bright yellow background with `%Y%0%8`.<br><br>## EXAMPLES<br><br> # Search through the database for the 'wordpress-develop' string<br> $ wp db search wordpress-develop<br> wp_options:option_value<br> 1:http://wordpress-develop.dev<br> wp_options:option_value<br> 1:http://example.com/foo<br> ...<br><br> # Search through a multisite database on the subsite 'foo' for the 'example.com' string<br> $ wp db search example.com --url=example.com/foo<br> wp_2_comments:comment_author_url<br> 1:http://example.com/<br> wp_2_options:option_value<br> ...<br><br> # Search through the database for the 'https?://' regular expression, printing stats.<br> $ wp db search 'https?://' --regex --stats<br> wp_comments:comment_author_url<br> 1:https://wordpress.org/<br> ...<br> Success: Found 99146 matches in 10.752s (10.559s searching). Searched 12 tables, 53 columns, 1358907 rows. 1 table skipped: wp_term_relationships.<br><br> # SQL search database table 'wp_options' where 'option_name' match 'foo'<br> wp db query 'SELECT * FROM wp_options WHERE option_name like "%foo%"' --skip-column-names<br> +----+--------------+--------------------------------+-----+<br> | 98 | foo_options | a:1:{s:12:"_multiwidget";i:1;} | yes |<br> | 99 | foo_settings | a:0:{} | yes |<br> +----+--------------+--------------------------------+-----+<br><br> # SQL search and delete records from database table 'wp_options' where 'option_name' match 'foo'<br> wp db query "DELETE from wp_options where option_id in ($(wp db query "SELECT GROUP_CONCAT(option_id SEPARATOR ',') from wp_options where option_name like '%foo%';" --silent --skip-column-names))"<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>search &lt;tables&gt;...[=null]</params>
  </command>
  <command>
    <name>db size</name>
    <help><![CDATA[<strong>db size</strong> [--size_format=&lt;format&gt;] [--tables] [--human-readable] [--format=&lt;format&gt;] [--scope=&lt;scope&gt;] [--network] [--all-tables-with-prefix] [--all-tables]<br/><br/>Displays the database name and size.<br/>Display the database name and size for `DB_NAME` specified in wp-config.php.<br>The size defaults to a human-readable number.<br><br>Available size formats include:<br>* b (bytes)<br>* kb (kilobytes)<br>* mb (megabytes)<br>* gb (gigabytes)<br>* tb (terabytes)<br>* B (ISO Byte setting, with no conversion)<br>* KB (ISO Kilobyte setting, with 1 KB = 1,000 B)<br>* KiB (ISO Kibibyte setting, with 1 KiB = 1,024 B)<br>* MB (ISO Megabyte setting, with 1 MB = 1,000 KB)<br>* MiB (ISO Mebibyte setting, with 1 MiB = 1,024 KiB)<br>* GB (ISO Gigabyte setting, with 1 GB = 1,000 MB)<br>* GiB (ISO Gibibyte setting, with 1 GiB = 1,024 MiB)<br>* TB (ISO Terabyte setting, with 1 TB = 1,000 GB)<br>* TiB (ISO Tebibyte setting, with 1 TiB = 1,024 GiB)<br><br>## OPTIONS<br><br>[--size_format=&lt;format&gt;]<br>: Display the database size only, as a bare number.<br>---<br>options:<br> - b<br> - kb<br> - mb<br> - gb<br> - tb<br> - B<br> - KB<br> - KiB<br> - MB<br> - MiB<br> - GB<br> - GiB<br> - TB<br> - TiB<br>---<br><br>[--tables]<br>: Display each table name and size instead of the database size.<br><br>[--human-readable]<br>: Display database sizes in human readable formats.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br>---<br><br>[--scope=&lt;scope&gt;]<br>: Can be all, global, ms_global, blog, or old tables. Defaults to all.<br><br>[--network]<br>: List all the tables in a multisite install.<br><br>[--all-tables-with-prefix]<br>: List all tables that match the table prefix even if not registered on $wpdb. Overrides --network.<br><br>[--all-tables]<br>: List all tables in the database, regardless of the prefix, and even if not registered on $wpdb. Overrides --all-tables-with-prefix.<br><br>## EXAMPLES<br><br> $ wp db size<br> +-------------------+------+<br> | Name | Size |<br> +-------------------+------+<br> | wordpress_default | 6 MB |<br> +-------------------+------+<br><br> $ wp db size --tables<br> +-----------------------+-------+<br> | Name | Size |<br> +-----------------------+-------+<br> | wp_users | 64 KB |<br> | wp_usermeta | 48 KB |<br> | wp_posts | 80 KB |<br> | wp_comments | 96 KB |<br> | wp_links | 32 KB |<br> | wp_options | 32 KB |<br> | wp_postmeta | 48 KB |<br> | wp_terms | 48 KB |<br> | wp_term_taxonomy | 48 KB |<br> | wp_term_relationships | 32 KB |<br> | wp_termmeta | 48 KB |<br> | wp_commentmeta | 48 KB |<br> +-----------------------+-------+<br><br> $ wp db size --size_format=b<br> 5865472<br><br> $ wp db size --size_format=kb<br> 5728<br><br> $ wp db size --size_format=mb<br> 6<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>db tables</name>
    <help><![CDATA[<strong>db tables</strong> [&lt;table&gt;...] [--scope=&lt;scope&gt;] [--network] [--all-tables-with-prefix] [--all-tables] [--format=&lt;format&gt;]<br/><br/>Lists the database tables.<br/>Defaults to all tables registered to the $wpdb database handler.<br><br>## OPTIONS<br><br>[&lt;table&gt;...]<br>: List tables based on wildcard search, e.g. 'wp_*_options' or 'wp_post?'.<br><br>[--scope=&lt;scope&gt;]<br>: Can be all, global, ms_global, blog, or old tables. Defaults to all.<br><br>[--network]<br>: List all the tables in a multisite install.<br><br>[--all-tables-with-prefix]<br>: List all tables that match the table prefix even if not registered on $wpdb. Overrides --network.<br><br>[--all-tables]<br>: List all tables in the database, regardless of the prefix, and even if not registered on $wpdb. Overrides --all-tables-with-prefix.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: list<br>options:<br> - list<br> - csv<br>---<br><br>## EXAMPLES<br><br> # List tables for a single site, without shared tables like 'wp_users'<br> $ wp db tables --scope=blog --url=sub.example.com<br> wp_3_posts<br> wp_3_comments<br> wp_3_options<br> wp_3_postmeta<br> wp_3_terms<br> wp_3_term_taxonomy<br> wp_3_term_relationships<br> wp_3_termmeta<br> wp_3_commentmeta<br><br> # Export only tables for a single site<br> $ wp db export --tables=$(wp db tables --url=sub.example.com --format=csv)<br> Success: Exported to wordpress_dbase.sql<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;table&gt;...[=null]</params>
  </command>
  <command>
    <name>embed cache clear</name>
    <help><![CDATA[<strong>embed cache clear</strong> &lt;post_id&gt;<br/><br/>Deletes all oEmbed caches for a given post.<br/>oEmbed caches for a post are stored in the post's metadata.<br><br>## OPTIONS<br><br>&lt;post_id&gt;<br>: ID of the post to clear the cache for.<br><br>## EXAMPLES<br><br> # Clear cache for a post<br> $ wp embed cache clear 123<br> Success: Cleared oEmbed cache.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>post_id</params>
  </command>
  <command>
    <name>embed cache find</name>
    <help><![CDATA[<strong>embed cache find</strong> &lt;url&gt; [--width=&lt;width&gt;] [--height=&lt;height&gt;] [--discover]<br/><br/>Finds an oEmbed cache post ID for a given URL.<br/>Starting with WordPress 4.9, embeds that aren't associated with a specific post will be cached in<br>a new oembed_cache post type. There can be more than one such entry for a url depending on attributes and context.<br><br>Not to be confused with oEmbed caches for a given post which are stored in the post's metadata.<br><br>## OPTIONS<br><br>&lt;url&gt;<br>: URL to retrieve oEmbed data for.<br><br>[--width=&lt;width&gt;]<br>: Width of the embed in pixels. Part of cache key so must match. Defaults to `content_width` if set else 500px, so is theme and context dependent.<br><br>[--height=&lt;height&gt;]<br>: Height of the embed in pixels. Part of cache key so must match. Defaults to 1.5 * default width (`content_width` or 500px), to a maximum of 1000px.<br><br>[--discover]<br>: Whether to search with the discover attribute set or not. Part of cache key so must match. If not given, will search with attribute: unset, '1', '0', returning first.<br><br>## EXAMPLES<br><br> # Find cache post ID for a given URL.<br> $ wp embed cache find https://www.youtube.com/watch?v=dQw4w9WgXcQ --width=500<br> 123<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>url</params>
  </command>
  <command>
    <name>embed cache trigger</name>
    <help><![CDATA[<strong>embed cache trigger</strong> &lt;post_id&gt;<br/><br/>Triggers the caching of all oEmbed results for a given post.<br/>oEmbed caches for a post are stored in the post's metadata.<br><br>## OPTIONS<br><br>&lt;post_id&gt;<br>: ID of the post to do the caching for.<br><br>## EXAMPLES<br><br> # Triggers cache for a post<br> $ wp embed cache trigger 456<br> Success: Caching triggered!<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>post_id</params>
  </command>
  <command>
    <name>embed fetch</name>
    <help><![CDATA[<strong>embed fetch</strong> &lt;url&gt; [--width=&lt;width&gt;] [--height=&lt;height&gt;] [--post-id=&lt;id&gt;] [--discover] [--skip-cache] [--skip-sanitization] [--do-shortcode] [--limit-response-size=&lt;size&gt;] [--raw] [--raw-format=&lt;json|xml&gt;]<br/><br/>Attempts to convert a URL into embed HTML.<br/>In non-raw mode, starts by checking the URL against the regex of the registered embed handlers.<br>If none of the regex matches and it's enabled, then the URL will be given to the WP_oEmbed class.<br><br>In raw mode, checks the providers directly and returns the data.<br><br>## OPTIONS<br><br>&lt;url&gt;<br>: URL to retrieve oEmbed data for.<br><br>[--width=&lt;width&gt;]<br>: Width of the embed in pixels.<br><br>[--height=&lt;height&gt;]<br>: Height of the embed in pixels.<br><br>[--post-id=&lt;id&gt;]<br>: Cache oEmbed response for a given post.<br><br>[--discover]<br>: Enable oEmbed discovery. Defaults to true.<br><br>[--skip-cache]<br>: Ignore already cached oEmbed responses. Has no effect if using the 'raw' option, which doesn't use the cache.<br><br>[--skip-sanitization]<br>: Remove the filter that WordPress from 4.4 onwards uses to sanitize oEmbed responses. Has no effect if using the 'raw' option, which by-passes sanitization.<br><br>[--do-shortcode]<br>: If the URL is handled by a registered embed handler and returns a shortcode, do shortcode and return result. Has no effect if using the 'raw' option, which by-passes handlers.<br><br>[--limit-response-size=&lt;size&gt;]<br>: Limit the size of the resulting HTML when using discovery. Default 150 KB (the standard WordPress limit). Not compatible with 'no-discover'.<br><br>[--raw]<br>: Return the raw oEmbed response instead of the resulting HTML. Ignores the cache and does not sanitize responses or use registered embed handlers.<br><br>[--raw-format=&lt;json|xml&gt;]<br>: Render raw oEmbed data in a particular format. Defaults to json. Can only be specified in conjunction with the 'raw' option.<br>---<br>options:<br> - json<br> - xml<br>---<br><br>## EXAMPLES<br><br> # Get embed HTML for a given URL.<br> $ wp embed fetch https://www.youtube.com/watch?v=dQw4w9WgXcQ<br> &lt;iframe width="525" height="295" src="https://www.youtube.com/embed/dQw4w9WgXcQ?feature=oembed" ...<br><br> # Get raw oEmbed data for a given URL.<br> $ wp embed fetch https://www.youtube.com/watch?v=dQw4w9WgXcQ --raw<br> {"author_url":"https:\/\/www.youtube.com\/user\/RickAstleyVEVO","width":525,"version":"1.0", ...<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>url</params>
  </command>
  <command>
    <name>embed handler list</name>
    <help><![CDATA[<strong>embed handler list</strong> [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Lists all available embed handlers.<br/>## OPTIONS<br><br>[--field=&lt;field&gt;]<br>: Display the value of a single field<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each handler:<br><br>* id<br>* regex<br><br>These fields are optionally available:<br><br>* callback<br>* priority<br><br>## EXAMPLES<br><br> # List id,regex,priority fields of available handlers.<br> $ wp embed handler list --fields=priority,id<br> +----------+-------------------+<br> | priority | id |<br> +----------+-------------------+<br> | 10 | youtube_embed_url |<br> | 9999 | audio |<br> | 9999 | video |<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>embed provider list</name>
    <help><![CDATA[<strong>embed provider list</strong> [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;] [--force-regex]<br/><br/>Lists all available oEmbed providers.<br/>## OPTIONS<br><br>[--field=&lt;field&gt;]<br>: Display the value of a single field<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br>---<br><br>[--force-regex]<br>: Turn the asterisk-type provider URLs into regexes.<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each provider:<br><br>* format<br>* endpoint<br><br>This field is optionally available:<br><br>* regex<br><br>## EXAMPLES<br><br> # List format,endpoint fields of available providers.<br> $ wp embed provider list --fields=format,endpoint<br> +------------------------------+-----------------------------------------+<br> | format | endpoint |<br> +------------------------------+-----------------------------------------+<br> | #https?://youtu\.be/.*#i | https://www.youtube.com/oembed |<br> | #https?://flic\.kr/.*#i | https://www.flickr.com/services/oembed/ |<br> | #https?://wordpress\.tv/.*#i | https://wordpress.tv/oembed/ |<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>embed provider match</name>
    <help><![CDATA[<strong>embed provider match</strong> &lt;url&gt; [--discover] [--limit-response-size=&lt;size&gt;] [--link-type=&lt;json|xml&gt;]<br/><br/>Gets the matching provider for a given URL.<br/>## OPTIONS<br><br>&lt;url&gt;<br>: URL to retrieve provider for.<br><br>[--discover]<br>: Whether to use oEmbed discovery or not. Defaults to true.<br><br>[--limit-response-size=&lt;size&gt;]<br>: Limit the size of the resulting HTML when using discovery. Default 150 KB (the standard WordPress limit). Not compatible with 'no-discover'.<br><br>[--link-type=&lt;json|xml&gt;]<br>: Whether to accept only a certain link type when using discovery. Defaults to any (json or xml), preferring json. Not compatible with 'no-discover'.<br>---<br>options:<br> - json<br> - xml<br>---<br><br>## EXAMPLES<br><br> # Get the matching provider for the URL.<br> $ wp embed provider match https://www.youtube.com/watch?v=dQw4w9WgXcQ<br> https://www.youtube.com/oembed<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>url</params>
  </command>
  <command>
    <name>eval</name>
    <help><![CDATA[<strong>eval</strong> &lt;php-code&gt; [--skip-wordpress]<br/><br/>Executes arbitrary PHP code.<br/>Note: because code is executed within a method, global variables need<br>to be explicitly globalized.<br><br>## OPTIONS<br><br>&lt;php-code&gt;<br>: The code to execute, as a string.<br><br>[--skip-wordpress]<br>: Execute code without loading WordPress.<br><br>## EXAMPLES<br><br> # Display WordPress content directory.<br> $ wp eval 'echo WP_CONTENT_DIR;'<br> /var/www/wordpress/wp-content<br><br> # Generate a random number.<br> $ wp eval 'echo rand();' --skip-wordpress<br> 479620423<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>php-code</params>
  </command>
  <command>
    <name>eval-file</name>
    <help><![CDATA[<strong>eval-file</strong> &lt;file&gt; [&lt;arg&gt;...] [--skip-wordpress]<br/><br/>Loads and executes a PHP file.<br/>Note: because code is executed within a method, global variables need<br>to be explicitly globalized.<br><br>## OPTIONS<br><br>&lt;file&gt;<br>: The path to the PHP file to execute. Use '-' to run code from STDIN.<br><br>[&lt;arg&gt;...]<br>: One or more arguments to pass to the file. They are placed in the $args variable.<br><br>[--skip-wordpress]<br>: Load and execute file without loading WordPress.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>file &lt;arg&gt;...[=null]</params>
  </command>
  <command>
    <name>export</name>
    <help><![CDATA[<strong>export</strong> [--dir=&lt;dirname&gt;] [--stdout] [--skip_comments] [--max_file_size=&lt;MB&gt;] [--start_date=&lt;date&gt;] [--end_date=&lt;date&gt;] [--post_type=&lt;post-type&gt;] [--post_type__not_in=&lt;post-type&gt;] [--post__in=&lt;pid&gt;] [--with_attachments] [--start_id=&lt;pid&gt;] [--max_num_posts=&lt;num&gt;] [--author=&lt;author&gt;] [--category=&lt;name&gt;] [--post_status=&lt;status&gt;] [--filename_format=&lt;format&gt;]<br/><br/>Exports WordPress content to a WXR file.<br/>Generates one or more WXR files containing authors, terms, posts,<br>comments, and attachments. WXR files do not include site configuration<br>(options) or the attachment files themselves.<br><br>## OPTIONS<br><br>[--dir=&lt;dirname&gt;]<br>: Full path to directory where WXR export files should be stored. Defaults<br>to current working directory.<br><br>[--stdout]<br>: Output the whole XML using standard output (incompatible with --dir=)<br><br>[--skip_comments]<br>: Don't include comments in the WXR export file.<br><br>[--max_file_size=&lt;MB&gt;]<br>: A single export file should have this many megabytes. -1 for unlimited.<br>---<br>default: 15<br>---<br><br>## FILTERS<br><br>[--start_date=&lt;date&gt;]<br>: Export only posts published after this date, in format YYYY-MM-DD.<br><br>[--end_date=&lt;date&gt;]<br>: Export only posts published before this date, in format YYYY-MM-DD.<br><br>[--post_type=&lt;post-type&gt;]<br>: Export only posts with this post_type. Separate multiple post types with a<br>comma.<br>---<br>default: any<br>---<br><br>[--post_type__not_in=&lt;post-type&gt;]<br>: Export all post types except those identified. Separate multiple post types<br>with a comma. Defaults to none.<br><br>[--post__in=&lt;pid&gt;]<br>: Export all posts specified as a comma- or space-separated list of IDs.<br>Post's attachments won't be exported unless --with_attachments is specified.<br><br>[--with_attachments]<br>: Force including attachments in case --post__in has been specified.<br><br>[--start_id=&lt;pid&gt;]<br>: Export only posts with IDs greater than or equal to this post ID.<br><br>[--max_num_posts=&lt;num&gt;]<br>: Export no more than &lt;num&gt; posts (excluding attachments).<br><br>[--author=&lt;author&gt;]<br>: Export only posts by this author. Can be either user login or user ID.<br><br>[--category=&lt;name&gt;]<br>: Export only posts in this category.<br><br>[--post_status=&lt;status&gt;]<br>: Export only posts with this status.<br><br>[--filename_format=&lt;format&gt;]<br>: Use a custom format for export filenames. Defaults to '{site}.wordpress.{date}.{n}.xml'.<br><br>## EXAMPLES<br><br> # Export posts published by the user between given start and end date<br> $ wp export --dir=/tmp/ --user=admin --post_type=post --start_date=2011-01-01 --end_date=2011-12-31<br> Starting export process...<br> Writing to file /tmp/staging.wordpress.2016-05-24.000.xml<br> Success: All done with export.<br><br> # Export posts by IDs<br> $ wp export --dir=/tmp/ --post__in=123,124,125<br> Starting export process...<br> Writing to file /tmp/staging.wordpress.2016-05-24.000.xml<br> Success: All done with export.<br><br> # Export a random subset of content<br> $ wp export --post__in="$(wp post list --post_type=post --orderby=rand --posts_per_page=8 --format=ids)"<br> Starting export process...<br> Writing to file /var/www/example.com/public_html/staging.wordpress.2016-05-24.000.xml<br> Success: All done with export.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>help</name>
    <help><![CDATA[<strong>help</strong> [&lt;command&gt;...]<br/><br/>Get help on WP-CLI, or on a specific command.<br/>## OPTIONS<br><br>[&lt;command&gt;...]<br>: Get help on a specific command.<br><br>## EXAMPLES<br><br> # get help for `core` command<br> wp help core<br><br> # get help for `core download` subcommand<br> wp help core download<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;command&gt;...[=null]</params>
  </command>
  <command>
    <name>i18n make-json</name>
    <help><![CDATA[<strong>i18n make-json</strong> &lt;source&gt; [&lt;destination&gt;] [--purge] [--pretty-print]<br/><br/>Extract JavaScript strings from PO files and add them to individual JSON files.<br/>For JavaScript internationalization purposes, WordPress requires translations to be split up into<br>one Jed-formatted JSON file per JavaScript source file.<br><br>See https://make.wordpress.org/core/2018/11/09/new-javascript-i18n-support-in-wordpress/ to learn more<br>about WordPress JavaScript internationalization.<br><br>## OPTIONS<br><br>&lt;source&gt;<br>: Path to an existing PO file or a directory containing multiple PO files.<br><br>[&lt;destination&gt;]<br>: Path to the destination directory for the resulting JSON files. Defaults to the source directory.<br><br>[--purge]<br>: Whether to purge the strings that were extracted from the original source file. Defaults to true, use `--no-purge` to skip the removal.<br><br>[--pretty-print]<br>: Pretty-print resulting JSON files.<br><br>## EXAMPLES<br><br> # Create JSON files for all PO files in the languages directory<br> $ wp i18n make-json languages<br><br> # Create JSON files for my-plugin-de_DE.po and leave the PO file untouched.<br> $ wp i18n make-json my-plugin-de_DE.po /tmp --no-purge<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>source destination[=null]</params>
  </command>
  <command>
    <name>i18n make-pot</name>
    <help><![CDATA[<strong>i18n make-pot</strong> &lt;source&gt; [&lt;destination&gt;] [--slug=&lt;slug&gt;] [--domain=&lt;domain&gt;] [--ignore-domain] [--merge[=&lt;paths&gt;]] [--subtract=&lt;paths&gt;] [--include=&lt;paths&gt;] [--exclude=&lt;paths&gt;] [--headers=&lt;headers&gt;] [--skip-js] [--skip-audit] [--file-comment=&lt;file-comment&gt;] [--package-name=&lt;name&gt;]<br/><br/>Create a POT file for a WordPress project.<br/>Scans PHP and JavaScript files for translatable strings, as well as theme stylesheets and plugin files<br>if the source directory is detected as either a plugin or theme.<br><br>## OPTIONS<br><br>&lt;source&gt;<br>: Directory to scan for string extraction.<br><br>[&lt;destination&gt;]<br>: Name of the resulting POT file.<br><br>[--slug=&lt;slug&gt;]<br>: Plugin or theme slug. Defaults to the source directory's basename.<br><br>[--domain=&lt;domain&gt;]<br>: Text domain to look for in the source code, unless the `--ignore-domain` option is used.<br>By default, the "Text Domain" header of the plugin or theme is used.<br>If none is provided, it falls back to the project slug.<br><br>[--ignore-domain]<br>: Ignore the text domain completely and extract strings with any text domain.<br><br>[--merge[=&lt;paths&gt;]]<br>: Comma-separated list of POT files whose contents should be merged with the extracted strings.<br>If left empty, defaults to the destination POT file. POT file headers will be ignored.<br><br>[--subtract=&lt;paths&gt;]<br>: Comma-separated list of POT files whose contents should act as some sort of blacklist for string extraction.<br>Any string which is found on that blacklist will not be extracted.<br>This can be useful when you want to create multiple POT files from the same source directory with slightly<br>different content and no duplicate strings between them.<br><br>[--include=&lt;paths&gt;]<br>: Comma-separated list of files and paths that should be used for string extraction.<br>If provided, only these files and folders will be taken into account for string extraction.<br>For example, `--include="src,my-file.php` will ignore anything besides `my-file.php` and files in the `src`<br>directory. Simple glob patterns can be used, i.e. `--include=foo-*.php` includes any PHP file with the `foo-`<br>prefix. Leading and trailing slashes are ignored, i.e. `/my/directory/` is the same as `my/directory`.<br><br>[--exclude=&lt;paths&gt;]<br>: Comma-separated list of files and paths that should be skipped for string extraction.<br>For example, `--exclude=".github,myfile.php` would ignore any strings found within `myfile.php` or the `.github`<br>folder. Simple glob patterns can be used, i.e. `--exclude=foo-*.php` excludes any PHP file with the `foo-`<br>prefix. Leading and trailing slashes are ignored, i.e. `/my/directory/` is the same as `my/directory`. The<br>following files and folders are always excluded: node_modules, .git, .svn, .CVS, .hg, vendor, *.min.js.<br><br>[--headers=&lt;headers&gt;]<br>: Array in JSON format of custom headers which will be added to the POT file. Defaults to empty array.<br><br>[--skip-js]<br>: Skips JavaScript string extraction. Useful when this is done in another build step, e.g. through Babel.<br><br>[--skip-audit]<br>: Skips string audit where it tries to find possible mistakes in translatable strings. Useful when running in an<br>automated environment.<br><br>[--file-comment=&lt;file-comment&gt;]<br>: String that should be added as a comment to the top of the resulting POT file.<br>By default, a copyright comment is added for WordPress plugins and themes in the following manner:<br><br> ```<br> Copyright (C) 2018 Example Plugin Author<br> This file is distributed under the same license as the Example Plugin package.<br> ```<br><br> If a plugin or theme specifies a license in their main plugin file or stylesheet, the comment looks like<br> this:<br><br> ```<br> Copyright (C) 2018 Example Plugin Author<br> This file is distributed under the GPLv2.<br> ```<br><br>[--package-name=&lt;name&gt;]<br>: Name to use for package name in the resulting POT file's `Project-Id-Version` header.<br>Overrides plugin or theme name, if applicable.<br><br>## EXAMPLES<br><br> # Create a POT file for the WordPress plugin/theme in the current directory<br> $ wp i18n make-pot . languages/my-plugin.pot<br><br> # Create a POT file for the continents and cities list in WordPress core.<br> $ wp i18n make-pot . continents-and-cities.pot --include="wp-admin/includes/continents-cities.php"<br> --ignore-domain<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>source destination[=null]</params>
  </command>
  <command>
    <name>import</name>
    <help><![CDATA[<strong>import</strong> &lt;file&gt;... --authors=&lt;authors&gt; [--skip=&lt;data-type&gt;]<br/><br/>Imports content from a given WXR file.<br/>Provides a command line interface to the WordPress Importer plugin, for<br>performing data migrations.<br><br>## OPTIONS<br><br>&lt;file&gt;...<br>: Path to one or more valid WXR files for importing. Directories are also accepted.<br><br>--authors=&lt;authors&gt;<br>: How the author mapping should be handled. Options are 'create', 'mapping.csv', or 'skip'. The first will create any non-existent users from the WXR file. The second will read author mapping associations from a CSV, or create a CSV for editing if the file path doesn't exist. The CSV requires two columns, and a header row like "old_user_login,new_user_login". The last option will skip any author mapping.<br><br>[--skip=&lt;data-type&gt;]<br>: Skip importing specific data. Supported options are: 'attachment' and 'image_resize' (skip time-consuming thumbnail generation).<br><br>## EXAMPLES<br><br> # Import content from a WXR file<br> $ wp import example.wordpress.2016-06-21.xml --authors=create<br> Starting the import process...<br> Processing post #1 ("Hello world!") (post_type: post)<br> -- 1 of 1<br> -- Tue, 21 Jun 2016 05:31:12 +0000<br> -- Imported post as post_id #1<br> Success: Finished importing from 'example.wordpress.2016-06-21.xml' file.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;file&gt;...</params>
  </command>
  <command>
    <name>language core activate</name>
    <help><![CDATA[<strong>language core activate</strong> &lt;language&gt;<br/><br/>Activates a given language.<br/>## OPTIONS<br><br>&lt;language&gt;<br>: Language code to activate.<br><br>## EXAMPLES<br><br> $ wp language core activate ja<br> Success: Language activated.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>language</params>
  </command>
  <command>
    <name>language core install</name>
    <help><![CDATA[<strong>language core install</strong> &lt;language&gt;... [--activate]<br/><br/>Installs a given language.<br/>Downloads the language pack from WordPress.org.<br><br>## OPTIONS<br><br>&lt;language&gt;...<br>: Language code to install.<br><br>[--activate]<br>: If set, the language will be activated immediately after install.<br><br>## EXAMPLES<br><br> # Install the Japanese language.<br> $ wp language core install ja<br> Downloading translation from https://downloads.wordpress.org/translation/core/4.9.8/ja.zip...<br> Unpacking the update...<br> Installing the latest version...<br> Translation updated successfully.<br> Language 'ja' installed.<br> Success: Installed 1 of 1 languages.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;language&gt;...</params>
  </command>
  <command>
    <name>language core is-installed</name>
    <help><![CDATA[<strong>language core is-installed</strong> &lt;language&gt;<br/><br/>Checks if a given language is installed.<br/>Returns exit code 0 when installed, 1 when uninstalled.<br><br>## OPTIONS<br><br>&lt;language&gt;<br>: The language code to check.<br><br>## EXAMPLES<br><br> # Check whether the German language is installed; exit status 0 if installed, otherwise 1.<br> $ wp language core is-installed de_DE<br> $ echo $?<br> 1<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>language</params>
  </command>
  <command>
    <name>language core list</name>
    <help><![CDATA[<strong>language core list</strong> [--field=&lt;field&gt;] [--&lt;field&gt;=&lt;value&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Lists all available languages.<br/>## OPTIONS<br><br>[--field=&lt;field&gt;]<br>: Display the value of a single field<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Filter results by key=value pairs.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each translation:<br><br>* language<br>* english_name<br>* native_name<br>* status<br>* update<br>* updated<br><br>## EXAMPLES<br><br> # List language,english_name,status fields of available languages.<br> $ wp language core list --fields=language,english_name,status<br> +----------------+-------------------------+-------------+<br> | language | english_name | status |<br> +----------------+-------------------------+-------------+<br> | ar | Arabic | uninstalled |<br> | ary | Moroccan Arabic | uninstalled |<br> | az | Azerbaijani | uninstalled |<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>language core uninstall</name>
    <help><![CDATA[<strong>language core uninstall</strong> &lt;language&gt;...<br/><br/>Uninstalls a given language.<br/>## OPTIONS<br><br>&lt;language&gt;...<br>: Language code to uninstall.<br><br>## EXAMPLES<br><br> $ wp language core uninstall ja<br> Success: Language uninstalled.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>language ...</params>
  </command>
  <command>
    <name>language core update</name>
    <help><![CDATA[<strong>language core update</strong> [--dry-run]<br/><br/>Updates installed languages for core.<br/>## OPTIONS<br><br>[--dry-run]<br>: Preview which translations would be updated.<br><br>## EXAMPLES<br><br> $ wp language core update<br> Updating 'Japanese' translation for WordPress 4.9.2...<br> Downloading translation from https://downloads.wordpress.org/translation/core/4.9.2/ja.zip...<br> Translation updated successfully.<br> Success: Updated 1/1 translation.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>language plugin install</name>
    <help><![CDATA[<strong>language plugin install</strong> [&lt;plugin&gt;] [--all] &lt;language&gt;... [--format=&lt;format&gt;]<br/><br/>Installs a given language for a plugin.<br/>Downloads the language pack from WordPress.org.<br><br>## OPTIONS<br><br>[&lt;plugin&gt;]<br>: Plugin to install language for.<br><br>[--all]<br>: If set, languages for all plugins will be installed.<br><br>&lt;language&gt;...<br>: Language code to install.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format. Used when installing languages for all plugins.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - summary<br>---<br><br>## EXAMPLES<br><br> # Install the Japanese language for Akismet.<br> $ wp language plugin install akismet ja<br> Downloading translation from https://downloads.wordpress.org/translation/plugin/akismet/4.0.3/ja.zip...<br> Unpacking the update...<br> Installing the latest version...<br> Translation updated successfully.<br> Language 'ja' installed.<br> Success: Installed 1 of 1 languages.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;language&gt;... plugin[=null]</params>
  </command>
  <command>
    <name>language plugin is-installed</name>
    <help><![CDATA[<strong>language plugin is-installed</strong> &lt;plugin&gt; &lt;language&gt;...<br/><br/>Checks if a given language is installed.<br/>Returns exit code 0 when installed, 1 when uninstalled.<br><br>## OPTIONS<br><br>&lt;plugin&gt;<br>: Plugin to check for.<br><br>&lt;language&gt;...<br>: The language code to check.<br><br>## EXAMPLES<br><br> # Check whether the German language is installed for Akismet; exit status 0 if installed, otherwise 1.<br> $ wp language plugin is-installed akismet de_DE<br> $ echo $?<br> 1<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>plugin language ...</params>
  </command>
  <command>
    <name>language plugin list</name>
    <help><![CDATA[<strong>language plugin list</strong> [&lt;plugin&gt;...] [--all] [--field=&lt;field&gt;] [--&lt;field&gt;=&lt;value&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Lists all available languages for one or more plugins.<br/>## OPTIONS<br><br>[&lt;plugin&gt;...]<br>: One or more plugins to list languages for.<br><br>[--all]<br>: If set, available languages for all plugins will be listed.<br><br>[--field=&lt;field&gt;]<br>: Display the value of a single field.<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Filter results by key=value pairs.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each translation:<br><br>* plugin<br>* language<br>* english_name<br>* native_name<br>* status<br>* update<br>* updated<br><br>## EXAMPLES<br><br> # List language,english_name,status fields of available languages.<br> $ wp language plugin list --fields=language,english_name,status<br> +----------------+-------------------------+-------------+<br> | language | english_name | status |<br> +----------------+-------------------------+-------------+<br> | ar | Arabic | uninstalled |<br> | ary | Moroccan Arabic | uninstalled |<br> | az | Azerbaijani | uninstalled |<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;plugin&gt;...[=null]</params>
  </command>
  <command>
    <name>language plugin uninstall</name>
    <help><![CDATA[<strong>language plugin uninstall</strong> &lt;plugin&gt; &lt;language&gt;...<br/><br/>Uninstalls a given language for a plugin.<br/>## OPTIONS<br><br>&lt;plugin&gt;<br>: Plugin to uninstall language for.<br><br>&lt;language&gt;...<br>: Language code to uninstall.<br><br>## EXAMPLES<br><br> $ wp language plugin uninstall hello-dolly ja<br> Success: Language uninstalled.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>plugin language ...</params>
  </command>
  <command>
    <name>language plugin update</name>
    <help><![CDATA[<strong>language plugin update</strong> [&lt;plugin&gt;...] [--all] [--dry-run]<br/><br/>Updates installed languages for one or more plugins.<br/>## OPTIONS<br><br>[&lt;plugin&gt;...]<br>: One or more plugins to update languages for.<br><br>[--all]<br>: If set, languages for all plugins will be updated.<br><br>[--dry-run]<br>: Preview which translations would be updated.<br><br>## EXAMPLES<br><br> $ wp language plugin update --all<br> Updating 'Japanese' translation for Akismet 3.1.11...<br> Downloading translation from https://downloads.wordpress.org/translation/plugin/akismet/3.1.11/ja.zip...<br> Translation updated successfully.<br> Success: Updated 1/1 translation.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;plugin&gt;...[=null]</params>
  </command>
  <command>
    <name>language theme install</name>
    <help><![CDATA[<strong>language theme install</strong> [&lt;theme&gt;] [--all] &lt;language&gt;... [--format=&lt;format&gt;]<br/><br/>Installs a given language for a theme.<br/>Downloads the language pack from WordPress.org.<br><br>## OPTIONS<br><br>[&lt;theme&gt;]<br>: Theme to install language for.<br><br>[--all]<br>: If set, languages for all themes will be installed.<br><br>&lt;language&gt;...<br>: Language code to install.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format. Used when installing languages for all themes.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - summary<br>---<br><br>## EXAMPLES<br><br> # Install the Japanese language for Twenty Seventeen.<br> $ wp language theme install twentyseventeen ja<br> Downloading translation from https://downloads.wordpress.org/translation/theme/twentyseventeen/1.3/ja.zip...<br> Unpacking the update...<br> Installing the latest version...<br> Translation updated successfully.<br> Language 'ja' installed.<br> Success: Installed 1 of 1 languages.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;language&gt;... theme[=null]</params>
  </command>
  <command>
    <name>language theme is-installed</name>
    <help><![CDATA[<strong>language theme is-installed</strong> &lt;theme&gt; &lt;language&gt;...<br/><br/>Checks if a given language is installed.<br/>Returns exit code 0 when installed, 1 when uninstalled.<br><br>## OPTIONS<br><br>&lt;theme&gt;<br>: Theme to check for.<br><br>&lt;language&gt;...<br>: The language code to check.<br><br>## EXAMPLES<br><br> # Check whether the German language is installed for Twenty Seventeen; exit status 0 if installed, otherwise 1.<br> $ wp language theme is-installed twentyseventeen de_DE<br> $ echo $?<br> 1<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>theme language ...</params>
  </command>
  <command>
    <name>language theme list</name>
    <help><![CDATA[<strong>language theme list</strong> [&lt;theme&gt;...] [--all] [--field=&lt;field&gt;] [--&lt;field&gt;=&lt;value&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Lists all available languages for one or more themes.<br/>## OPTIONS<br><br>[&lt;theme&gt;...]<br>: One or more themes to list languages for.<br><br>[--all]<br>: If set, available languages for all themes will be listed.<br><br>[--field=&lt;field&gt;]<br>: Display the value of a single field.<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Filter results by key=value pairs.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each translation:<br><br>* theme<br>* language<br>* english_name<br>* native_name<br>* status<br>* update<br>* updated<br><br>## EXAMPLES<br><br> # List language,english_name,status fields of available languages.<br> $ wp language theme list --fields=language,english_name,status<br> +----------------+-------------------------+-------------+<br> | language | english_name | status |<br> +----------------+-------------------------+-------------+<br> | ar | Arabic | uninstalled |<br> | ary | Moroccan Arabic | uninstalled |<br> | az | Azerbaijani | uninstalled |<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;theme&gt;...[=null]</params>
  </command>
  <command>
    <name>language theme uninstall</name>
    <help><![CDATA[<strong>language theme uninstall</strong> &lt;theme&gt; &lt;language&gt;...<br/><br/>Uninstalls a given language for a theme.<br/>## OPTIONS<br><br>&lt;theme&gt;<br>: Theme to uninstall language for.<br><br>&lt;language&gt;...<br>: Language code to uninstall.<br><br>## EXAMPLES<br><br> $ wp language theme uninstall twentyten ja<br> Success: Language uninstalled.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>theme language ...</params>
  </command>
  <command>
    <name>language theme update</name>
    <help><![CDATA[<strong>language theme update</strong> [&lt;theme&gt;...] [--all] [--dry-run]<br/><br/>Updates installed languages for one or more themes.<br/>## OPTIONS<br><br>[&lt;theme&gt;...]<br>: One or more themes to update languages for.<br><br>[--all]<br>: If set, languages for all themes will be updated.<br><br>[--dry-run]<br>: Preview which translations would be updated.<br><br>## EXAMPLES<br><br> $ wp language theme update --all<br> Updating 'Japanese' translation for Twenty Fifteen 1.5...<br> Downloading translation from https://downloads.wordpress.org/translation/theme/twentyfifteen/1.5/ja.zip...<br> Translation updated successfully.<br> Success: Updated 1/1 translation.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;theme&gt;...[=null]</params>
  </command>
  <command>
    <name>maintenance-mode activate</name>
    <help><![CDATA[<strong>maintenance-mode activate</strong> [--force]<br/><br/>Activates maintenance mode.<br/>[--force]<br>: Force maintenance mode activation operation.<br><br>## EXAMPLES<br><br> $ wp maintenance-mode activate<br> Enabling Maintenance mode...<br> Success: Activated Maintenance mode.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>maintenance-mode deactivate</name>
    <help><![CDATA[<strong>maintenance-mode deactivate</strong> <br/><br/>Deactivates maintenance mode.<br/>## EXAMPLES<br><br> $ wp maintenance-mode deactivate<br> Disabling Maintenance mode...<br> Success: Deactivated Maintenance mode.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>maintenance-mode is-active</name>
    <help><![CDATA[<strong>maintenance-mode is-active</strong> <br/><br/>Detects maintenance mode status.<br/>## EXAMPLES<br><br> $ wp maintenance-mode is-active<br> $ echo $?<br> 1<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>maintenance-mode status</name>
    <help><![CDATA[<strong>maintenance-mode status</strong> <br/><br/>Displays maintenance mode status.<br/>## EXAMPLES<br><br> $ wp maintenance-mode status<br> Maintenance mode is active.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>media fix-orientation</name>
    <help><![CDATA[<strong>media fix-orientation</strong> [&lt;attachment-id&gt;...] [--dry-run]<br/><br/>Fix image orientation for one or more attachments.<br/>## OPTIONS<br><br>[&lt;attachment-id&gt;...]<br>: One or more IDs of the attachments to regenerate.<br><br>[--dry-run]<br>: Check images needing orientation without performing the operation.<br><br>## EXAMPLES<br><br> # Fix orientation for all images.<br> $ wp media fix-orientation<br> 1/3 Fixing orientation for "Landscape_4" (ID 62).<br> 2/3 Fixing orientation for "Landscape_3" (ID 61).<br> 3/3 Fixing orientation for "Landscape_2" (ID 60).<br> Success: Fixed 3 of 3 images.<br><br> # Fix orientation dry run.<br> $ wp media fix-orientation 63 -dry run<br> 1/1 "Portrait_6" (ID 63) will be affected.<br> Success: 1 of 1 image will be affected.<br><br> # Fix orientation for specific images.<br> $ wp media fix-orientation 63<br> 1/1 Fixing orientation for "Portrait_6" (ID 63).<br> Success: Fixed 1 of 1 images.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;attachment-id&gt;...[=null]</params>
  </command>
  <command>
    <name>media image-size</name>
    <help><![CDATA[<strong>media image-size</strong> [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Lists image sizes registered with WordPress.<br/>## OPTIONS<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific fields. Defaults to all fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a specific format<br>---<br>default: table<br>options:<br> - table<br> - json<br> - csv<br> - yaml<br> - count<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each image size:<br>* name<br>* width<br>* height<br>* crop<br>* ratio<br><br>## EXAMPLES<br><br> # List all registered image sizes<br> $ wp media image-size<br> +---------------------------+-------+--------+-------+-------+<br> | name | width | height | crop | ratio |<br> +---------------------------+-------+--------+-------+-------+<br> | full | | | N/A | N/A |<br> | twentyfourteen-full-width | 1038 | 576 | hard | 173:96|<br> | large | 1024 | 1024 | soft | N/A |<br> | medium_large | 768 | 0 | soft | N/A |<br> | medium | 300 | 300 | soft | N/A |<br> | thumbnail | 150 | 150 | hard | 1:1 |<br> +---------------------------+-------+--------+-------+-------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>media import</name>
    <help><![CDATA[<strong>media import</strong> &lt;file&gt;... [--post_id=&lt;post_id&gt;] [--title=&lt;title&gt;] [--caption=&lt;caption&gt;] [--alt=&lt;alt_text&gt;] [--desc=&lt;description&gt;] [--skip-copy] [--preserve-filetime] [--featured_image] [--porcelain]<br/><br/>Creates attachments from local files or URLs.<br/>## OPTIONS<br><br>&lt;file&gt;...<br>: Path to file or files to be imported. Supports the glob(3) capabilities of the current shell.<br> If file is recognized as a URL (for example, with a scheme of http or ftp), the file will be<br> downloaded to a temp file before being sideloaded.<br><br>[--post_id=&lt;post_id&gt;]<br>: ID of the post to attach the imported files to.<br><br>[--title=&lt;title&gt;]<br>: Attachment title (post title field).<br><br>[--caption=&lt;caption&gt;]<br>: Caption for attachent (post excerpt field).<br><br>[--alt=&lt;alt_text&gt;]<br>: Alt text for image (saved as post meta).<br><br>[--desc=&lt;description&gt;]<br>: "Description" field (post content) of attachment post.<br><br>[--skip-copy]<br>: If set, media files (local only) are imported to the library but not moved on disk.<br>File names will not be run through wp_unique_filename() with this set.<br><br>[--preserve-filetime]<br>: Use the file modified time as the post published & modified dates.<br>Remote files will always use the current time.<br><br>[--featured_image]<br>: If set, set the imported image as the Featured Image of the post its attached to.<br><br>[--porcelain]<br>: Output just the new attachment ID.<br><br>## EXAMPLES<br><br> # Import all jpgs in the current user's "Pictures" directory, not attached to any post.<br> $ wp media import ~/Pictures/**\/*.jpg<br> Imported file '/home/person/Pictures/landscape-photo.jpg' as attachment ID 1751.<br> Imported file '/home/person/Pictures/fashion-icon.jpg' as attachment ID 1752.<br> Success: Imported 2 of 2 items.<br><br> # Import a local image and set it to be the post thumbnail for a post.<br> $ wp media import ~/Downloads/image.png --post_id=123 --title="A downloaded picture" --featured_image<br> Imported file '/home/person/Downloads/image.png' as attachment ID 1753 and attached to post 123 as featured image.<br> Success: Imported 1 of 1 images.<br><br> # Import a local image, but set it as the featured image for all posts.<br> # 1. Import the image and get its attachment ID.<br> # 2. Assign the attachment ID as the featured image for all posts.<br> $ ATTACHMENT_ID="$(wp media import ~/Downloads/image.png --porcelain)"<br> $ wp post list --post_type=post --format=ids | xargs -d ' ' -I % wp post meta add % _thumbnail_id $ATTACHMENT_ID<br> Success: Added custom field.<br> Success: Added custom field.<br><br> # Import an image from the web.<br> $ wp media import http://s.wordpress.org/style/images/wp-header-logo.png --title='The WordPress logo' --alt="Semantic personal publishing"<br> Imported file 'http://s.wordpress.org/style/images/wp-header-logo.png' as attachment ID 1755.<br> Success: Imported 1 of 1 images.<br><br> # Get the URL for an attachment after import.<br> $ wp media import http://s.wordpress.org/style/images/wp-header-logo.png --porcelain | xargs -I {} wp post list --post__in={} --field=url --post_type=attachment<br> http://wordpress-develop.dev/wp-header-logo/<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;file&gt;...</params>
  </command>
  <command>
    <name>media regenerate</name>
    <help><![CDATA[<strong>media regenerate</strong> [&lt;attachment-id&gt;...] [--image_size=&lt;image_size&gt;] [--skip-delete] [--only-missing] [--yes]<br/><br/>Regenerates thumbnails for one or more attachments.<br/>## OPTIONS<br><br>[&lt;attachment-id&gt;...]<br>: One or more IDs of the attachments to regenerate.<br><br>[--image_size=&lt;image_size&gt;]<br>: Name of the image size to regenerate. Only thumbnails of this image size will be regenerated, thumbnails of other image sizes will not.<br><br>[--skip-delete]<br>: Skip deletion of the original thumbnails. If your thumbnails are linked from sources outside your control, it's likely best to leave them around. Defaults to false.<br><br>[--only-missing]<br>: Only generate thumbnails for images missing image sizes.<br><br>[--yes]<br>: Answer yes to the confirmation message. Confirmation only shows when no IDs passed as arguments.<br><br>## EXAMPLES<br><br> # Regenerate thumbnails for given attachment IDs.<br> $ wp media regenerate 123 124 125<br> Found 3 images to regenerate.<br> 1/3 Regenerated thumbnails for "Vertical Image" (ID 123).<br> 2/3 Regenerated thumbnails for "Horizontal Image" (ID 124).<br> 3/3 Regenerated thumbnails for "Beautiful Picture" (ID 125).<br> Success: Regenerated 3 of 3 images.<br><br> # Regenerate all thumbnails, without confirmation.<br> $ wp media regenerate --yes<br> Found 3 images to regenerate.<br> 1/3 Regenerated thumbnails for "Sydney Harbor Bridge" (ID 760).<br> 2/3 Regenerated thumbnails for "Boardwalk" (ID 757).<br> 3/3 Regenerated thumbnails for "Sunburst Over River" (ID 756).<br> Success: Regenerated 3 of 3 images.<br><br> # Re-generate all thumbnails that have IDs between 1000 and 2000.<br> $ seq 1000 2000 | xargs wp media regenerate<br> Found 4 images to regenerate.<br> 1/4 Regenerated thumbnails for "Vertical Featured Image" (ID 1027).<br> 2/4 Regenerated thumbnails for "Horizontal Featured Image" (ID 1022).<br> 3/4 Regenerated thumbnails for "Unicorn Wallpaper" (ID 1045).<br> 4/4 Regenerated thumbnails for "I Am Worth Loving Wallpaper" (ID 1023).<br> Success: Regenerated 4 of 4 images.<br><br> # Re-generate only the thumbnails of "large" image size for all images.<br> $ wp media regenerate --image_size=large<br> Do you really want to regenerate the "large" image size for all images? [y/n] y<br> Found 3 images to regenerate.<br> 1/3 Regenerated "large" thumbnail for "Sydney Harbor Bridge" (ID 760).<br> 2/3 No "large" thumbnail regeneration needed for "Boardwalk" (ID 757).<br> 3/3 Regenerated "large" thumbnail for "Sunburst Over River" (ID 756).<br> Success: Regenerated 3 of 3 images.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;attachment-id&gt;...[=null]</params>
  </command>
  <command>
    <name>menu create</name>
    <help><![CDATA[<strong>menu create</strong> &lt;menu-name&gt; [--porcelain]<br/><br/>Creates a new menu.<br/>## OPTIONS<br><br>&lt;menu-name&gt;<br>: A descriptive name for the menu.<br><br>[--porcelain]<br>: Output just the new menu id.<br><br>## EXAMPLES<br><br> $ wp menu create "My Menu"<br> Success: Created menu 200.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>menu-name</params>
  </command>
  <command>
    <name>menu delete</name>
    <help><![CDATA[<strong>menu delete</strong> &lt;menu&gt;...<br/><br/>Deletes one or more menus.<br/>## OPTIONS<br><br>&lt;menu&gt;...<br>: The name, slug, or term ID for the menu(s).<br><br>## EXAMPLES<br><br> $ wp menu delete "My Menu"<br> Success: 1 menu deleted.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>menu ...</params>
  </command>
  <command>
    <name>menu item add-custom</name>
    <help><![CDATA[<strong>menu item add-custom</strong> &lt;menu&gt; &lt;title&gt; &lt;link&gt; [--description=&lt;description&gt;] [--attr-title=&lt;attr-title&gt;] [--target=&lt;target&gt;] [--classes=&lt;classes&gt;] [--position=&lt;position&gt;] [--parent-id=&lt;parent-id&gt;] [--porcelain]<br/><br/>Adds a custom menu item.<br/>## OPTIONS<br><br>&lt;menu&gt;<br>: The name, slug, or term ID for the menu.<br><br>&lt;title&gt;<br>: Title for the link.<br><br>&lt;link&gt;<br>: Target URL for the link.<br><br>[--description=&lt;description&gt;]<br>: Set a custom description for the menu item.<br><br>[--attr-title=&lt;attr-title&gt;]<br>: Set a custom title attribute for the menu item.<br><br>[--target=&lt;target&gt;]<br>: Set a custom link target for the menu item.<br><br>[--classes=&lt;classes&gt;]<br>: Set a custom link classes for the menu item.<br><br>[--position=&lt;position&gt;]<br>: Specify the position of this menu item.<br><br>[--parent-id=&lt;parent-id&gt;]<br>: Make this menu item a child of another menu item.<br><br>[--porcelain]<br>: Output just the new menu item id.<br><br>## EXAMPLES<br><br> $ wp menu item add-custom sidebar-menu Apple http://apple.com<br> Success: Menu item added.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>menu title link</params>
  </command>
  <command>
    <name>menu item add-post</name>
    <help><![CDATA[<strong>menu item add-post</strong> &lt;menu&gt; &lt;post-id&gt; [--title=&lt;title&gt;] [--link=&lt;link&gt;] [--description=&lt;description&gt;] [--attr-title=&lt;attr-title&gt;] [--target=&lt;target&gt;] [--classes=&lt;classes&gt;] [--position=&lt;position&gt;] [--parent-id=&lt;parent-id&gt;] [--porcelain]<br/><br/>Adds a post as a menu item.<br/>## OPTIONS<br><br>&lt;menu&gt;<br>: The name, slug, or term ID for the menu.<br><br>&lt;post-id&gt;<br>: Post ID to add to the menu.<br><br>[--title=&lt;title&gt;]<br>: Set a custom title for the menu item.<br><br>[--link=&lt;link&gt;]<br>: Set a custom url for the menu item.<br><br>[--description=&lt;description&gt;]<br>: Set a custom description for the menu item.<br><br>[--attr-title=&lt;attr-title&gt;]<br>: Set a custom title attribute for the menu item.<br><br>[--target=&lt;target&gt;]<br>: Set a custom link target for the menu item.<br><br>[--classes=&lt;classes&gt;]<br>: Set a custom link classes for the menu item.<br><br>[--position=&lt;position&gt;]<br>: Specify the position of this menu item.<br><br>[--parent-id=&lt;parent-id&gt;]<br>: Make this menu item a child of another menu item.<br><br>[--porcelain]<br>: Output just the new menu item id.<br><br>## EXAMPLES<br><br> $ wp menu item add-post sidebar-menu 33 --title="Custom Test Post"<br> Success: Menu item added.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>menu post-id</params>
  </command>
  <command>
    <name>menu item add-term</name>
    <help><![CDATA[<strong>menu item add-term</strong> &lt;menu&gt; &lt;taxonomy&gt; &lt;term-id&gt; [--title=&lt;title&gt;] [--link=&lt;link&gt;] [--description=&lt;description&gt;] [--attr-title=&lt;attr-title&gt;] [--target=&lt;target&gt;] [--classes=&lt;classes&gt;] [--position=&lt;position&gt;] [--parent-id=&lt;parent-id&gt;] [--porcelain]<br/><br/>Adds a taxonomy term as a menu item.<br/>## OPTIONS<br><br>&lt;menu&gt;<br>: The name, slug, or term ID for the menu.<br><br>&lt;taxonomy&gt;<br>: Taxonomy of the term to be added.<br><br>&lt;term-id&gt;<br>: Term ID of the term to be added.<br><br>[--title=&lt;title&gt;]<br>: Set a custom title for the menu item.<br><br>[--link=&lt;link&gt;]<br>: Set a custom url for the menu item.<br><br>[--description=&lt;description&gt;]<br>: Set a custom description for the menu item.<br><br>[--attr-title=&lt;attr-title&gt;]<br>: Set a custom title attribute for the menu item.<br><br>[--target=&lt;target&gt;]<br>: Set a custom link target for the menu item.<br><br>[--classes=&lt;classes&gt;]<br>: Set a custom link classes for the menu item.<br><br>[--position=&lt;position&gt;]<br>: Specify the position of this menu item.<br><br>[--parent-id=&lt;parent-id&gt;]<br>: Make this menu item a child of another menu item.<br><br>[--porcelain]<br>: Output just the new menu item id.<br><br>## EXAMPLES<br><br> $ wp menu item add-term sidebar-menu post_tag 24<br> Success: Menu item added.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>menu taxonomy term-id</params>
  </command>
  <command>
    <name>menu item delete</name>
    <help><![CDATA[<strong>menu item delete</strong> &lt;db-id&gt;...<br/><br/>Deletes one or more items from a menu.<br/>## OPTIONS<br><br>&lt;db-id&gt;...<br>: Database ID for the menu item(s).<br><br>## EXAMPLES<br><br> $ wp menu item delete 45<br> Success: 1 menu item deleted.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>db-id ...</params>
  </command>
  <command>
    <name>menu item list</name>
    <help><![CDATA[<strong>menu item list</strong> &lt;menu&gt; [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Gets a list of items associated with a menu.<br/>## OPTIONS<br><br>&lt;menu&gt;<br>: The name, slug, or term ID for the menu.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - count<br> - ids<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each menu item:<br><br>* db_id<br>* type<br>* title<br>* link<br>* position<br><br>These fields are optionally available:<br><br>* menu_item_parent<br>* object_id<br>* object<br>* type<br>* type_label<br>* target<br>* attr_title<br>* description<br>* classes<br>* xfn<br><br>## EXAMPLES<br><br> $ wp menu item list main-menu<br> +-------+-----------+-------------+---------------------------------+----------+<br> | db_id | type | title | link | position |<br> +-------+-----------+-------------+---------------------------------+----------+<br> | 5 | custom | Home | http://example.com | 1 |<br> | 6 | post_type | Sample Page | http://example.com/sample-page/ | 2 |<br> +-------+-----------+-------------+---------------------------------+----------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>menu</params>
  </command>
  <command>
    <name>menu item update</name>
    <help><![CDATA[<strong>menu item update</strong> &lt;db-id&gt; [--title=&lt;title&gt;] [--link=&lt;link&gt;] [--description=&lt;description&gt;] [--attr-title=&lt;attr-title&gt;] [--target=&lt;target&gt;] [--classes=&lt;classes&gt;] [--position=&lt;position&gt;] [--parent-id=&lt;parent-id&gt;]<br/><br/>Updates a menu item.<br/>## OPTIONS<br><br>&lt;db-id&gt;<br>: Database ID for the menu item.<br><br>[--title=&lt;title&gt;]<br>: Set a custom title for the menu item.<br><br>[--link=&lt;link&gt;]<br>: Set a custom url for the menu item.<br><br>[--description=&lt;description&gt;]<br>: Set a custom description for the menu item.<br><br>[--attr-title=&lt;attr-title&gt;]<br>: Set a custom title attribute for the menu item.<br><br>[--target=&lt;target&gt;]<br>: Set a custom link target for the menu item.<br><br>[--classes=&lt;classes&gt;]<br>: Set a custom link classes for the menu item.<br><br>[--position=&lt;position&gt;]<br>: Specify the position of this menu item.<br><br>[--parent-id=&lt;parent-id&gt;]<br>: Make this menu item a child of another menu item.<br><br>## EXAMPLES<br><br> $ wp menu item update 45 --title=WordPress --link='http://wordpress.org' --target=_blank --position=2<br> Success: Menu item updated.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>db-id</params>
  </command>
  <command>
    <name>menu list</name>
    <help><![CDATA[<strong>menu list</strong> [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Gets a list of menus.<br/>## OPTIONS<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - count<br> - ids<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each menu:<br><br>* term_id<br>* name<br>* slug<br>* count<br><br>These fields are optionally available:<br><br>* term_group<br>* term_taxonomy_id<br>* taxonomy<br>* description<br>* parent<br>* locations<br><br>## EXAMPLES<br><br> $ wp menu list<br> +---------+----------+----------+-----------+-------+<br> | term_id | name | slug | locations | count |<br> +---------+----------+----------+-----------+-------+<br> | 200 | My Menu | my-menu | | 0 |<br> | 177 | Top Menu | top-menu | primary | 7 |<br> +---------+----------+----------+-----------+-------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>menu location assign</name>
    <help><![CDATA[<strong>menu location assign</strong> &lt;menu&gt; &lt;location&gt;<br/><br/>Assigns a location to a menu.<br/>## OPTIONS<br><br>&lt;menu&gt;<br>: The name, slug, or term ID for the menu.<br><br>&lt;location&gt;<br>: Location's slug.<br><br>## EXAMPLES<br><br> $ wp menu location assign primary-menu primary<br> Success: Assigned location primary to menu primary-menu.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>menu location</params>
  </command>
  <command>
    <name>menu location list</name>
    <help><![CDATA[<strong>menu location list</strong> [--format=&lt;format&gt;]<br/><br/>Lists locations for the current theme.<br/>## OPTIONS<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - count<br> - yaml<br> - ids<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each location:<br><br>* name<br>* description<br><br>## EXAMPLES<br><br> $ wp menu location list<br> +----------+-------------------+<br> | location | description |<br> +----------+-------------------+<br> | primary | Primary Menu |<br> | social | Social Links Menu |<br> +----------+-------------------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>menu location remove</name>
    <help><![CDATA[<strong>menu location remove</strong> &lt;menu&gt; &lt;location&gt;<br/><br/>Removes a location from a menu.<br/>## OPTIONS<br><br>&lt;menu&gt;<br>: The name, slug, or term ID for the menu.<br><br>&lt;location&gt;<br>: Location's slug.<br><br>## EXAMPLES<br><br> $ wp menu location remove primary-menu primary<br> Success: Removed location from menu.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>menu location</params>
  </command>
  <command>
    <name>network meta add</name>
    <help><![CDATA[<strong>network meta add</strong> &lt;id&gt; &lt;key&gt; [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Add a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to create.<br><br>[&lt;value&gt;]<br>: The value of the meta field. If omitted, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key value[=null]</params>
  </command>
  <command>
    <name>network meta delete</name>
    <help><![CDATA[<strong>network meta delete</strong> &lt;id&gt; [&lt;key&gt;] [&lt;value&gt;] [--all]<br/><br/>Delete a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>[&lt;key&gt;]<br>: The name of the meta field to delete.<br><br>[&lt;value&gt;]<br>: The value to delete. If omitted, all rows with key will deleted.<br><br>[--all]<br>: Delete all meta for the object.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key[=null] value[=null]</params>
  </command>
  <command>
    <name>network meta get</name>
    <help><![CDATA[<strong>network meta get</strong> &lt;id&gt; &lt;key&gt; [--format=&lt;format&gt;]<br/><br/>Get meta field value.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to get.<br><br>[--format=&lt;format&gt;]<br>: Get value in a particular format.<br>---<br>default: var_export<br>options:<br> - var_export<br> - json<br> - yaml<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key</params>
  </command>
  <command>
    <name>network meta list</name>
    <help><![CDATA[<strong>network meta list</strong> &lt;id&gt; [--keys=&lt;keys&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;] [--orderby=&lt;fields&gt;] [--order=&lt;order&gt;] [--unserialize]<br/><br/>List all metadata associated with an object.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: ID for the object.<br><br>[--keys=&lt;keys&gt;]<br>: Limit output to metadata of specific keys.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific row fields. Defaults to id,meta_key,meta_value.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br> - count<br>---<br><br>[--orderby=&lt;fields&gt;]<br>: Set orderby which field.<br>---<br>default: id<br>options:<br> - id<br> - meta_key<br> - meta_value<br>---<br><br>[--order=&lt;order&gt;]<br>: Set ascending or descending order.<br>---<br>default: asc<br>options:<br> - asc<br> - desc<br>---<br><br>[--unserialize]<br>: Unserialize meta_value output.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id</params>
  </command>
  <command>
    <name>network meta patch</name>
    <help><![CDATA[<strong>network meta patch</strong> &lt;action&gt; &lt;id&gt; &lt;key&gt; &lt;key-path&gt;... [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Update a nested value for a meta field.<br/>## OPTIONS<br><br>&lt;action&gt;<br>: Patch action to perform.<br>---<br>options:<br> - insert<br> - update<br> - delete<br>---<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to update.<br><br>&lt;key-path&gt;...<br>: The name(s) of the keys within the value to locate the value to patch.<br><br>[&lt;value&gt;]<br>: The new value. If omitted, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>action id key &lt;key-path&gt;... value[=null]</params>
  </command>
  <command>
    <name>network meta pluck</name>
    <help><![CDATA[<strong>network meta pluck</strong> &lt;id&gt; &lt;key&gt; &lt;key-path&gt;... [--format=&lt;format&gt;]<br/><br/>Get a nested value from a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to get.<br><br>&lt;key-path&gt;...<br>: The name(s) of the keys within the value to locate the value to pluck.<br><br>[--format=&lt;format&gt;]<br>: The output format of the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br> - yaml<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key &lt;key-path&gt;...</params>
  </command>
  <command>
    <name>network meta update</name>
    <help><![CDATA[<strong>network meta update</strong> &lt;id&gt; &lt;key&gt; [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Update a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to update.<br><br>[&lt;value&gt;]<br>: The new value. If omitted, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key value[=null]</params>
  </command>
  <command>
    <name>option add</name>
    <help><![CDATA[<strong>option add</strong> &lt;key&gt; [&lt;value&gt;] [--format=&lt;format&gt;] [--autoload=&lt;autoload&gt;]<br/><br/>Adds a new option value.<br/>Errors if the option already exists.<br><br>## OPTIONS<br><br>&lt;key&gt;<br>: The name of the option to add.<br><br>[&lt;value&gt;]<br>: The value of the option to add. If ommited, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>[--autoload=&lt;autoload&gt;]<br>: Should this option be automatically loaded.<br>---<br>options:<br> - 'yes'<br> - 'no'<br>---<br><br>## EXAMPLES<br><br> # Create an option by reading a JSON file.<br> $ wp option add my_option --format=json &lt; config.json<br> Success: Added 'my_option' option.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key value[=null]</params>
  </command>
  <command>
    <name>option delete</name>
    <help><![CDATA[<strong>option delete</strong> &lt;key&gt;...<br/><br/>Deletes an option.<br/>## OPTIONS<br><br>&lt;key&gt;...<br>: Key for the option.<br><br>## EXAMPLES<br><br> # Delete an option.<br> $ wp option delete my_option<br> Success: Deleted 'my_option' option.<br><br> # Delete multiple options.<br> $ wp option delete option_one option_two option_three<br> Success: Deleted 'option_one' option.<br> Success: Deleted 'option_two' option.<br> Warning: Could not delete 'option_three' option. Does it exist?<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key ...</params>
  </command>
  <command>
    <name>option get</name>
    <help><![CDATA[<strong>option get</strong> &lt;key&gt; [--format=&lt;format&gt;]<br/><br/>Gets the value for an option.<br/>## OPTIONS<br><br>&lt;key&gt;<br>: Key for the option.<br><br>[--format=&lt;format&gt;]<br>: Get value in a particular format.<br>---<br>default: var_export<br>options:<br> - var_export<br> - json<br> - yaml<br>---<br><br>## EXAMPLES<br><br> # Get option.<br> $ wp option get home<br> http://example.com<br><br> # Get blog description.<br> $ wp option get blogdescription<br> A random blog description<br><br> # Get blog name<br> $ wp option get blogname<br> A random blog name<br><br> # Get admin email.<br> $ wp option get admin_email<br> someone@example.com<br><br> # Get option in JSON format.<br> $ wp option get active_plugins --format=json<br> {"0":"dynamically-dynamic-sidebar\/dynamically-dynamic-sidebar.php","1":"monster-widget\/monster-widget.php","2":"show-current-template\/show-current-template.php","3":"theme-check\/theme-check.php","5":"wordpress-importer\/wordpress-importer.php"}<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key</params>
  </command>
  <command>
    <name>option list</name>
    <help><![CDATA[<strong>option list</strong> [--search=&lt;pattern&gt;] [--exclude=&lt;pattern&gt;] [--autoload=&lt;value&gt;] [--transients] [--unserialize] [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;] [--orderby=&lt;fields&gt;] [--order=&lt;order&gt;]<br/><br/>Lists options and their values.<br/>## OPTIONS<br><br>[--search=&lt;pattern&gt;]<br>: Use wildcards ( * and ? ) to match option name.<br><br>[--exclude=&lt;pattern&gt;]<br>: Pattern to exclude. Use wildcards ( * and ? ) to match option name.<br><br>[--autoload=&lt;value&gt;]<br>: Match only autoload options when value is on, and only not-autoload option when off.<br><br>[--transients]<br>: List only transients. Use `--no-transients` to ignore all transients.<br><br>[--unserialize]<br>: Unserialize option values in output.<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value. total_bytes displays the total size of matching options in bytes.<br>---<br>default: table<br>options:<br> - table<br> - json<br> - csv<br> - count<br> - yaml<br> - total_bytes<br>---<br><br>[--orderby=&lt;fields&gt;]<br>: Set orderby which field.<br>---<br>default: option_id<br>options:<br> - option_id<br> - option_name<br> - option_value<br>---<br><br>[--order=&lt;order&gt;]<br>: Set ascending or descending order.<br>---<br>default: asc<br>options:<br> - asc<br> - desc<br>---<br><br>## AVAILABLE FIELDS<br><br>This field will be displayed by default for each matching option:<br><br>* option_name<br>* option_value<br><br>These fields are optionally available:<br><br>* autoload<br>* size_bytes<br><br>## EXAMPLES<br><br> # Get the total size of all autoload options.<br> $ wp option list --autoload=on --format=total_bytes<br> 33198<br><br> # Find biggest transients.<br> $ wp option list --search="*_transient_*" --fields=option_name,size_bytes | sort -n -k 2 | tail<br> option_name size_bytes<br> _site_transient_timeout_theme_roots 10<br> _site_transient_theme_roots 76<br> _site_transient_update_themes 181<br> _site_transient_update_core 808<br> _site_transient_update_plugins 6645<br><br> # List all options beginning with "i2f_".<br> $ wp option list --search="i2f_*"<br> +-------------+--------------+<br> | option_name | option_value |<br> +-------------+--------------+<br> | i2f_version | 0.1.0 |<br> +-------------+--------------+<br><br> # Delete all options beginning with "theme_mods_".<br> $ wp option list --search="theme_mods_*" --field=option_name | xargs -I % wp option delete %<br> Success: Deleted 'theme_mods_twentysixteen' option.<br> Success: Deleted 'theme_mods_twentyfifteen' option.<br> Success: Deleted 'theme_mods_twentyfourteen' option.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>option patch</name>
    <help><![CDATA[<strong>option patch</strong> &lt;action&gt; &lt;key&gt; &lt;key-path&gt;... [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Updates a nested value in an option.<br/>## OPTIONS<br><br>&lt;action&gt;<br>: Patch action to perform.<br>---<br>options:<br> - insert<br> - update<br> - delete<br>---<br><br>&lt;key&gt;<br>: The option name.<br><br>&lt;key-path&gt;...<br>: The name(s) of the keys within the value to locate the value to patch.<br><br>[&lt;value&gt;]<br>: The new value. If omitted, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>action key &lt;key-path&gt;... value[=null]</params>
  </command>
  <command>
    <name>option pluck</name>
    <help><![CDATA[<strong>option pluck</strong> &lt;key&gt; &lt;key-path&gt;... [--format=&lt;format&gt;]<br/><br/>Gets a nested value from an option.<br/>## OPTIONS<br><br>&lt;key&gt;<br>: The option name.<br><br>&lt;key-path&gt;...<br>: The name(s) of the keys within the value to locate the value to pluck.<br><br>[--format=&lt;format&gt;]<br>: The output format of the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br> - yaml<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key &lt;key-path&gt;...</params>
  </command>
  <command>
    <name>option update</name>
    <help><![CDATA[<strong>option update</strong> &lt;key&gt; [&lt;value&gt;] [--autoload=&lt;autoload&gt;] [--format=&lt;format&gt;]<br/><br/>Updates an option value.<br/>## OPTIONS<br><br>&lt;key&gt;<br>: The name of the option to update.<br><br>[&lt;value&gt;]<br>: The new value. If ommited, the value is read from STDIN.<br><br>[--autoload=&lt;autoload&gt;]<br>: Requires WP 4.2. Should this option be automatically loaded.<br>---<br>options:<br> - 'yes'<br> - 'no'<br>---<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## EXAMPLES<br><br> # Update an option by reading from a file.<br> $ wp option update my_option &lt; value.txt<br> Success: Updated 'my_option' option.<br><br> # Update one option on multiple sites using xargs.<br> $ wp site list --field=url | xargs -n1 -I {} sh -c 'wp --url={} option update my_option my_value'<br> Success: Updated 'my_option' option.<br> Success: Updated 'my_option' option.<br><br> # Update site blog name.<br> $ wp option update blogname "Random blog name"<br> Success: Updated 'blogname' option.<br><br> # Update site blog description.<br> $ wp option update blogdescription "Some random blog description"<br> Success: Updated 'blogdescription' option.<br><br> # Update admin email address.<br> $ wp option update admin_email someone@example.com<br> Success: Updated 'admin_email' option.<br><br> # Set the default role.<br> $ wp option update default_role author<br> Success: Updated 'default_role' option.<br><br> # Set the timezone string.<br> $ wp option update timezone_string "America/New_York"<br> Success: Updated 'timezone_string' option.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key value[=null]</params>
  </command>
  <command>
    <name>package browse</name>
    <help><![CDATA[<strong>package browse</strong> [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Browses WP-CLI packages available for installation.<br/>Lists packages available for installation from the [Package Index](http://wp-cli.org/package-index/).<br>Although the package index will remain in place for backward compatibility reasons, it has been<br>deprecated and will not be updated further. Please refer to https://github.com/wp-cli/ideas/issues/51<br>to read about its potential replacement.<br><br>## OPTIONS<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific fields. Defaults to all fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - ids<br> - json<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each package:<br><br>* name<br>* description<br>* authors<br>* version<br><br>There are no optionally available fields.<br><br>## EXAMPLES<br><br> $ wp package browse --format=yaml<br> ---<br> 10up/mu-migration:<br> name: 10up/mu-migration<br> description: A set of WP-CLI commands to support the migration of single WordPress instances to multisite<br> authors: Nícholas André<br> version: dev-master, dev-develop<br> aaemnnosttv/wp-cli-dotenv-command:<br> name: aaemnnosttv/wp-cli-dotenv-command<br> description: Dotenv commands for WP-CLI<br> authors: Evan Mattson<br> version: v0.1, v0.1-beta.1, v0.2, dev-master, dev-dev, dev-develop, dev-tests/behat<br> aaemnnosttv/wp-cli-http-command:<br> name: aaemnnosttv/wp-cli-http-command<br> description: WP-CLI command for using the WordPress HTTP API<br> authors: Evan Mattson<br> version: dev-master<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>package install</name>
    <help><![CDATA[<strong>package install</strong> &lt;name|git|path|zip&gt;<br/><br/>Installs a WP-CLI package.<br/>Packages are required to be a valid Composer package, and can be<br>specified as:<br><br>* Package name from WP-CLI's package index.<br>* Git URL accessible by the current shell user.<br>* Path to a directory on the local machine.<br>* Local or remote .zip file.<br><br>Packages are installed to `~/.wp-cli/packages/` by default. Use the<br>`WP_CLI_PACKAGES_DIR` environment variable to provide a custom path.<br><br>When installing a local directory, WP-CLI simply registers a<br>reference to the directory. If you move or delete the directory, WP-CLI's<br>reference breaks.<br><br>When installing a .zip file, WP-CLI extracts the package to<br>`~/.wp-cli/packages/local/&lt;package-name&gt;`.<br><br>## OPTIONS<br><br>&lt;name|git|path|zip&gt;<br>: Name, git URL, directory path, or .zip file for the package to install.<br>Names can optionally include a version constraint<br>(e.g. wp-cli/server-command:@stable).<br><br>## EXAMPLES<br><br> # Install the latest development version from the package index.<br> $ wp package install wp-cli/server-command<br> Installing package wp-cli/server-command (dev-master)<br> Updating /home/person/.wp-cli/packages/composer.json to require the package...<br> Using Composer to install the package...<br> ---<br> Loading composer repositories with package information<br> Updating dependencies<br> Resolving dependencies through SAT<br> Dependency resolution completed in 0.005 seconds<br> Analyzed 732 packages to resolve dependencies<br> Analyzed 1034 rules to resolve dependencies<br> - Installing package<br> Writing lock file<br> Generating autoload files<br> ---<br> Success: Package installed.<br><br> # Install the latest stable version.<br> $ wp package install wp-cli/server-command:@stable<br><br> # Install a package hosted at a git URL.<br> $ wp package install git@github.com:runcommand/hook.git<br><br> # Install a package in a .zip file.<br> $ wp package install google-sitemap-generator-cli.zip<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>name|git|path|zip</params>
  </command>
  <command>
    <name>package list</name>
    <help><![CDATA[<strong>package list</strong> [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Lists installed WP-CLI packages.<br/>## OPTIONS<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific fields. Defaults to all fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - ids<br> - json<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each package:<br><br>* name<br>* authors<br>* version<br>* update<br>* update_version<br><br>These fields are optionally available:<br><br>* description<br><br>## EXAMPLES<br><br> $ wp package list<br> +-----------------------+------------------------------------------+---------+------------+<br> | name | description | authors | version |<br> +-----------------------+------------------------------------------+---------+------------+<br> | wp-cli/server-command | Start a development server for WordPress | | dev-master |<br> +-----------------------+------------------------------------------+---------+------------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>package path</name>
    <help><![CDATA[<strong>package path</strong> [&lt;name&gt;]<br/><br/>Gets the path to an installed WP-CLI package, or the package directory.<br/>If you want to contribute to a package, this is a great way to jump to it.<br><br>## OPTIONS<br><br>[&lt;name&gt;]<br>: Name of the package to get the directory for.<br><br>## EXAMPLES<br><br> # Get package path<br> $ wp package path<br> /home/person/.wp-cli/packages/<br><br> # Change directory to package path<br> $ cd $(wp package path) && pwd<br> /home/vagrant/.wp-cli/packages<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>name[=null]</params>
  </command>
  <command>
    <name>package uninstall</name>
    <help><![CDATA[<strong>package uninstall</strong> &lt;name&gt;<br/><br/>Uninstalls a WP-CLI package.<br/>## OPTIONS<br><br>&lt;name&gt;<br>: Name of the package to uninstall.<br><br>## EXAMPLES<br><br> $ wp package uninstall wp-cli/server-command<br> Removing require statement from /home/person/.wp-cli/packages/composer.json<br> Deleting package directory /home/person/.wp-cli/packages/vendor/wp-cli/server-command<br> Regenerating Composer autoload.<br> Success: Uninstalled package.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>name</params>
  </command>
  <command>
    <name>package update</name>
    <help><![CDATA[<strong>package update</strong> <br/><br/>Updates all installed WP-CLI packages to their latest version.<br/>## EXAMPLES<br><br> $ wp package update<br> Using Composer to update packages...<br> ---<br> Loading composer repositories with package information<br> Updating dependencies<br> Resolving dependencies through SAT<br> Dependency resolution completed in 0.074 seconds<br> Analyzed 1062 packages to resolve dependencies<br> Analyzed 22383 rules to resolve dependencies<br> Writing lock file<br> Generating autoload files<br> ---<br> Success: Packages updated.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>plugin activate</name>
    <help><![CDATA[<strong>plugin activate</strong> [&lt;plugin&gt;...] [--all] [--network]<br/><br/>Activates one or more plugins.<br/>## OPTIONS<br><br>[&lt;plugin&gt;...]<br>: One or more plugins to activate.<br><br>[--all]<br>: If set, all plugins will be activated.<br><br>[--network]<br>: If set, the plugin will be activated for the entire multisite network.<br><br>## EXAMPLES<br><br> # Activate plugin<br> $ wp plugin activate hello<br> Plugin 'hello' activated.<br> Success: Activated 1 of 1 plugins.<br><br> # Activate plugin in entire multisite network<br> $ wp plugin activate hello --network<br> Plugin 'hello' network activated.<br> Success: Network activated 1 of 1 plugins.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;plugin&gt;...[=null]</params>
  </command>
  <command>
    <name>plugin deactivate</name>
    <help><![CDATA[<strong>plugin deactivate</strong> [&lt;plugin&gt;...] [--uninstall] [--all] [--network]<br/><br/>Deactivates one or more plugins.<br/>## OPTIONS<br><br>[&lt;plugin&gt;...]<br>: One or more plugins to deactivate.<br><br>[--uninstall]<br>: Uninstall the plugin after deactivation.<br><br>[--all]<br>: If set, all plugins will be deactivated.<br><br>[--network]<br>: If set, the plugin will be deactivated for the entire multisite network.<br><br>## EXAMPLES<br><br> # Deactivate plugin<br> $ wp plugin deactivate hello<br> Plugin 'hello' deactivated.<br> Success: Deactivated 1 of 1 plugins.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;plugin&gt;...[=null]</params>
  </command>
  <command>
    <name>plugin delete</name>
    <help><![CDATA[<strong>plugin delete</strong> [&lt;plugin&gt;...] [--all]<br/><br/>Deletes plugin files without deactivating or uninstalling.<br/>## OPTIONS<br><br>[&lt;plugin&gt;...]<br>: One or more plugins to delete.<br><br>[--all]<br>: If set, all plugins will be deleted.<br><br>## EXAMPLES<br><br> # Delete plugin<br> $ wp plugin delete hello<br> Deleted 'hello' plugin.<br> Success: Deleted 1 of 1 plugins.<br><br> # Delete inactive plugins<br> $ wp plugin delete $(wp plugin list --status=inactive --field=name)<br> Deleted 'tinymce-templates' plugin.<br> Success: Deleted 1 of 1 plugins.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;plugin&gt;...[=null]</params>
  </command>
  <command>
    <name>plugin get</name>
    <help><![CDATA[<strong>plugin get</strong> &lt;plugin&gt; [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Gets details about an installed plugin.<br/>## OPTIONS<br><br>&lt;plugin&gt;<br>: The plugin to get.<br><br>[--field=&lt;field&gt;]<br>: Instead of returning the whole plugin, returns the value of a single field.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific fields. Defaults to all fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br>---<br><br>## EXAMPLES<br><br> $ wp plugin get bbpress --format=json<br> {"name":"bbpress","title":"bbPress","author":"The bbPress Contributors","version":"2.6-alpha","description":"bbPress is forum software with a twist from the creators of WordPress.","status":"active"}<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>plugin</params>
  </command>
  <command>
    <name>plugin install</name>
    <help><![CDATA[<strong>plugin install</strong> &lt;plugin|zip|url&gt;... [--version=&lt;version&gt;] [--force] [--activate] [--activate-network]<br/><br/>Installs one or more plugins.<br/>## OPTIONS<br><br>&lt;plugin|zip|url&gt;...<br>: One or more plugins to install. Accepts a plugin slug, the path to a local zip file, or a URL to a remote zip file.<br><br>[--version=&lt;version&gt;]<br>: If set, get that particular version from wordpress.org, instead of the<br>stable version.<br><br>[--force]<br>: If set, the command will overwrite any installed version of the plugin, without prompting<br>for confirmation.<br><br>[--activate]<br>: If set, the plugin will be activated immediately after install.<br><br>[--activate-network]<br>: If set, the plugin will be network activated immediately after install<br><br>## EXAMPLES<br><br> # Install the latest version from wordpress.org and activate<br> $ wp plugin install bbpress --activate<br> Installing bbPress (2.5.9)<br> Downloading install package from https://downloads.wordpress.org/plugin/bbpress.2.5.9.zip...<br> Using cached file '/home/vagrant/.wp-cli/cache/plugin/bbpress-2.5.9.zip'...<br> Unpacking the package...<br> Installing the plugin...<br> Plugin installed successfully.<br> Activating 'bbpress'...<br> Plugin 'bbpress' activated.<br> Success: Installed 1 of 1 plugins.<br><br> # Install the development version from wordpress.org<br> $ wp plugin install bbpress --version=dev<br> Installing bbPress (Development Version)<br> Downloading install package from https://downloads.wordpress.org/plugin/bbpress.zip...<br> Unpacking the package...<br> Installing the plugin...<br> Plugin installed successfully.<br> Success: Installed 1 of 1 plugins.<br><br> # Install from a local zip file<br> $ wp plugin install ../my-plugin.zip<br> Unpacking the package...<br> Installing the plugin...<br> Plugin installed successfully.<br> Success: Installed 1 of 1 plugins.<br><br> # Install from a remote zip file<br> $ wp plugin install http://s3.amazonaws.com/bucketname/my-plugin.zip?AWSAccessKeyId=123&Expires=456&Signature=abcdef<br> Downloading install package from http://s3.amazonaws.com/bucketname/my-plugin.zip?AWSAccessKeyId=123&Expires=456&Signature=abcdef<br> Unpacking the package...<br> Installing the plugin...<br> Plugin installed successfully.<br> Success: Installed 1 of 1 plugins.<br><br> # Update from a remote zip file<br> $ wp plugin install https://github.com/envato/wp-envato-market/archive/master.zip --force<br> Downloading install package from https://github.com/envato/wp-envato-market/archive/master.zip<br> Unpacking the package...<br> Installing the plugin...<br> Renamed Github-based project from 'wp-envato-market-master' to 'wp-envato-market'.<br> Plugin updated successfully<br> Success: Installed 1 of 1 plugins.<br><br> # Forcefully re-install all installed plugins<br> $ wp plugin install $(wp plugin list --field=name) --force<br> Installing Akismet (3.1.11)<br> Downloading install package from https://downloads.wordpress.org/plugin/akismet.3.1.11.zip...<br> Unpacking the package...<br> Installing the plugin...<br> Removing the old version of the plugin...<br> Plugin updated successfully<br> Success: Installed 1 of 1 plugins.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;plugin|zip|url&gt;...</params>
  </command>
  <command>
    <name>plugin is-active</name>
    <help><![CDATA[<strong>plugin is-active</strong> &lt;plugin&gt;<br/><br/>Checks if a given plugin is active.<br/>Returns exit code 0 when active, 1 when not active.<br><br>## OPTIONS<br><br>&lt;plugin&gt;<br>: The plugin to check.<br><br>## EXAMPLES<br><br> # Check whether plugin is Active; exit status 0 if active, otherwise 1<br> $ wp plugin is-active hello<br> $ echo $?<br> 1<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>plugin</params>
  </command>
  <command>
    <name>plugin is-installed</name>
    <help><![CDATA[<strong>plugin is-installed</strong> &lt;plugin&gt;<br/><br/>Checks if a given plugin is installed.<br/>Returns exit code 0 when installed, 1 when uninstalled.<br><br>## OPTIONS<br><br>&lt;plugin&gt;<br>: The plugin to check.<br><br>## EXAMPLES<br><br> # Check whether plugin is installed; exit status 0 if installed, otherwise 1<br> $ wp plugin is-installed hello<br> $ echo $?<br> 1<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>plugin</params>
  </command>
  <command>
    <name>plugin list</name>
    <help><![CDATA[<strong>plugin list</strong> [--&lt;field&gt;=&lt;value&gt;] [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Gets a list of plugins.<br/>Displays a list of the plugins installed on the site with activation<br>status, whether or not there's an update available, etc.<br><br>Use `--status=dropin` to list installed dropins (e.g. `object-cache.php`).<br><br>## OPTIONS<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Filter results based on the value of a field.<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field for each plugin.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - count<br> - json<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each plugin:<br><br>* name<br>* status<br>* update<br>* version<br><br>These fields are optionally available:<br><br>* update_version<br>* update_package<br>* update_id<br>* title<br>* description<br><br>## EXAMPLES<br><br> # List active plugins on the site.<br> $ wp plugin list --status=active --format=json<br> [{"name":"dynamic-hostname","status":"active","update":"none","version":"0.4.2"},{"name":"tinymce-templates","status":"active","update":"none","version":"4.4.3"},{"name":"wp-multibyte-patch","status":"active","update":"none","version":"2.4"},{"name":"wp-total-hacks","status":"active","update":"none","version":"2.0.1"}]<br><br> # List plugins on each site in a network.<br> $ wp site list --field=url | xargs -I % wp plugin list --url=%<br> +---------+----------------+--------+---------+<br> | name | status | update | version |<br> +---------+----------------+--------+---------+<br> | akismet | active-network | none | 3.1.11 |<br> | hello | inactive | none | 1.6 |<br> +---------+----------------+--------+---------+<br> +---------+----------------+--------+---------+<br> | name | status | update | version |<br> +---------+----------------+--------+---------+<br> | akismet | active-network | none | 3.1.11 |<br> | hello | inactive | none | 1.6 |<br> +---------+----------------+--------+---------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>plugin path</name>
    <help><![CDATA[<strong>plugin path</strong> [&lt;plugin&gt;] [--dir]<br/><br/>Gets the path to a plugin or to the plugin directory.<br/>## OPTIONS<br><br>[&lt;plugin&gt;]<br>: The plugin to get the path to. If not set, will return the path to the<br>plugins directory.<br><br>[--dir]<br>: If set, get the path to the closest parent directory, instead of the<br>plugin file.<br><br>## EXAMPLES<br><br> $ cd $(wp plugin path) && pwd<br> /var/www/wordpress/wp-content/plugins<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>plugin[=null]</params>
  </command>
  <command>
    <name>plugin search</name>
    <help><![CDATA[<strong>plugin search</strong> &lt;search&gt; [--page=&lt;page&gt;] [--per-page=&lt;per-page&gt;] [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Searches the WordPress.org plugin directory.<br/>Displays plugins in the WordPress.org plugin directory matching a given<br>search query.<br><br>## OPTIONS<br><br>&lt;search&gt;<br>: The string to search for.<br><br>[--page=&lt;page&gt;]<br>: Optional page to display.<br>---<br>default: 1<br>---<br><br>[--per-page=&lt;per-page&gt;]<br>: Optional number of results to display.<br>---<br>default: 10<br>---<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field for each plugin.<br><br>[--fields=&lt;fields&gt;]<br>: Ask for specific fields from the API. Defaults to name,slug,author_profile,rating. Acceptable values:<br><br> **name**: Plugin Name<br> **slug**: Plugin Slug<br> **version**: Current Version Number<br> **author**: Plugin Author<br> **author_profile**: Plugin Author Profile<br> **contributors**: Plugin Contributors<br> **requires**: Plugin Minimum Requirements<br> **tested**: Plugin Tested Up To<br> **compatibility**: Plugin Compatible With<br> **rating**: Plugin Rating in Percent and Total Number<br> **ratings**: Plugin Ratings for each star (1-5)<br> **num_ratings**: Number of Plugin Ratings<br> **homepage**: Plugin Author's Homepage<br> **description**: Plugin's Description<br> **short_description**: Plugin's Short Description<br> **sections**: Plugin Readme Sections: description, installation, FAQ, screenshots, other notes, and changelog<br> **downloaded**: Plugin Download Count<br> **last_updated**: Plugin's Last Update<br> **added**: Plugin's Date Added to wordpress.org Repository<br> **tags**: Plugin's Tags<br> **versions**: Plugin's Available Versions with D/L Link<br> **donate_link**: Plugin's Donation Link<br> **banners**: Plugin's Banner Image Link<br> **icons**: Plugin's Icon Image Link<br> **active_installs**: Plugin's Number of Active Installs<br> **contributors**: Plugin's List of Contributors<br> **url**: Plugin's URL on wordpress.org<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - count<br> - json<br> - yaml<br>---<br><br>## EXAMPLES<br><br> $ wp plugin search dsgnwrks --per-page=20 --format=json<br> Success: Showing 3 of 3 plugins.<br> [{"name":"DsgnWrks Instagram Importer Debug","slug":"dsgnwrks-instagram-importer-debug","rating":0},{"name":"DsgnWrks Instagram Importer","slug":"dsgnwrks-instagram-importer","rating":84},{"name":"DsgnWrks Twitter Importer","slug":"dsgnwrks-twitter-importer","rating":80}]<br><br> $ wp plugin search dsgnwrks --fields=name,version,slug,rating,num_ratings<br> Success: Showing 3 of 3 plugins.<br> +-----------------------------------+---------+-----------------------------------+--------+-------------+<br> | name | version | slug | rating | num_ratings |<br> +-----------------------------------+---------+-----------------------------------+--------+-------------+<br> | DsgnWrks Instagram Importer Debug | 0.1.6 | dsgnwrks-instagram-importer-debug | 0 | 0 |<br> | DsgnWrks Instagram Importer | 1.3.7 | dsgnwrks-instagram-importer | 84 | 23 |<br> | DsgnWrks Twitter Importer | 1.1.1 | dsgnwrks-twitter-importer | 80 | 1 |<br> +-----------------------------------+---------+-----------------------------------+--------+-------------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>search</params>
  </command>
  <command>
    <name>plugin status</name>
    <help><![CDATA[<strong>plugin status</strong> [&lt;plugin&gt;]<br/><br/>Reveals the status of one or all plugins.<br/>## OPTIONS<br><br>[&lt;plugin&gt;]<br>: A particular plugin to show the status for.<br><br>## EXAMPLES<br><br> # Displays status of all plugins<br> $ wp plugin status<br> 5 installed plugins:<br> I akismet 3.1.11<br> I easy-digital-downloads 2.5.16<br> A theme-check 20160523.1<br> I wen-logo-slider 2.0.3<br> M ns-pack 1.0.0<br> Legend: I = Inactive, A = Active, M = Must Use<br><br> # Displays status of a plugin<br> $ wp plugin status theme-check<br> Plugin theme-check details:<br> Name: Theme Check<br> Status: Active<br> Version: 20160523.1<br> Author: Otto42, pross<br> Description: A simple and easy way to test your theme for all the latest WordPress standards and practices. A great theme development tool!<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>plugin[=null]</params>
  </command>
  <command>
    <name>plugin toggle</name>
    <help><![CDATA[<strong>plugin toggle</strong> &lt;plugin&gt;... [--network]<br/><br/>Toggles a plugin's activation state.<br/>If the plugin is active, then it will be deactivated. If the plugin is<br>inactive, then it will be activated.<br><br>## OPTIONS<br><br>&lt;plugin&gt;...<br>: One or more plugins to toggle.<br><br>[--network]<br>: If set, the plugin will be toggled for the entire multisite network.<br><br>## EXAMPLES<br><br> # Akismet is currently activated<br> $ wp plugin toggle akismet<br> Plugin 'akismet' deactivated.<br> Success: Toggled 1 of 1 plugins.<br><br> # Akismet is currently deactivated<br> $ wp plugin toggle akismet<br> Plugin 'akismet' activated.<br> Success: Toggled 1 of 1 plugins.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;plugin&gt;...</params>
  </command>
  <command>
    <name>plugin uninstall</name>
    <help><![CDATA[<strong>plugin uninstall</strong> [&lt;plugin&gt;...] [--deactivate] [--skip-delete] [--all]<br/><br/>Uninstalls one or more plugins.<br/>## OPTIONS<br><br>[&lt;plugin&gt;...]<br>: One or more plugins to uninstall.<br><br>[--deactivate]<br>: Deactivate the plugin before uninstalling. Default behavior is to warn and skip if the plugin is active.<br><br>[--skip-delete]<br>: If set, the plugin files will not be deleted. Only the uninstall procedure<br>will be run.<br><br>[--all]<br>: If set, all plugins will be uninstalled.<br><br>## EXAMPLES<br><br> $ wp plugin uninstall hello<br> Uninstalled and deleted 'hello' plugin.<br> Success: Uninstalled 1 of 1 plugins.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;plugin&gt;...[=null]</params>
  </command>
  <command>
    <name>plugin update</name>
    <help><![CDATA[<strong>plugin update</strong> [&lt;plugin&gt;...] [--all] [--exclude=&lt;name&gt;] [--minor] [--patch] [--format=&lt;format&gt;] [--version=&lt;version&gt;] [--dry-run]<br/><br/>Updates one or more plugins.<br/>## OPTIONS<br><br>[&lt;plugin&gt;...]<br>: One or more plugins to update.<br><br>[--all]<br>: If set, all plugins that have updates will be updated.<br><br>[--exclude=&lt;name&gt;]<br>: Comma separated list of plugin names that should be excluded from updating.<br><br>[--minor]<br>: Only perform updates for minor releases (e.g. from 1.3 to 1.4 instead of 2.0)<br><br>[--patch]<br>: Only perform updates for patch releases (e.g. from 1.3 to 1.3.3 instead of 1.4)<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - summary<br>---<br><br>[--version=&lt;version&gt;]<br>: If set, the plugin will be updated to the specified version.<br><br>[--dry-run]<br>: Preview which plugins would be updated.<br><br>## EXAMPLES<br><br> $ wp plugin update bbpress --version=dev<br> Installing bbPress (Development Version)<br> Downloading install package from https://downloads.wordpress.org/plugin/bbpress.zip...<br> Unpacking the package...<br> Installing the plugin...<br> Removing the old version of the plugin...<br> Plugin updated successfully.<br> Success: Updated 1 of 2 plugins.<br><br> $ wp plugin update --all<br> Enabling Maintenance mode...<br> Downloading update from https://downloads.wordpress.org/plugin/akismet.3.1.11.zip...<br> Unpacking the update...<br> Installing the latest version...<br> Removing the old version of the plugin...<br> Plugin updated successfully.<br> Downloading update from https://downloads.wordpress.org/plugin/nginx-champuru.3.2.0.zip...<br> Unpacking the update...<br> Installing the latest version...<br> Removing the old version of the plugin...<br> Plugin updated successfully.<br> Disabling Maintenance mode...<br> +------------------------+-------------+-------------+---------+<br> | name | old_version | new_version | status |<br> +------------------------+-------------+-------------+---------+<br> | akismet | 3.1.3 | 3.1.11 | Updated |<br> | nginx-cache-controller | 3.1.1 | 3.2.0 | Updated |<br> +------------------------+-------------+-------------+---------+<br> Success: Updated 2 of 2 plugins.<br><br> $ wp plugin update --all --exclude=akismet<br> Enabling Maintenance mode...<br> Downloading update from https://downloads.wordpress.org/plugin/nginx-champuru.3.2.0.zip...<br> Unpacking the update...<br> Installing the latest version...<br> Removing the old version of the plugin...<br> Plugin updated successfully.<br> Disabling Maintenance mode...<br> +------------------------+-------------+-------------+---------+<br> | name | old_version | new_version | status |<br> +------------------------+-------------+-------------+---------+<br> | nginx-cache-controller | 3.1.1 | 3.2.0 | Updated |<br> +------------------------+-------------+-------------+---------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;plugin&gt;...[=null]</params>
  </command>
  <command>
    <name>plugin verify-checksums</name>
    <help><![CDATA[<strong>plugin verify-checksums</strong> [&lt;plugin&gt;...] [--all] [--strict] [--format=&lt;format&gt;]<br/><br/>Verifies plugin files against WordPress.org's checksums.<br/>## OPTIONS<br><br>[&lt;plugin&gt;...]<br>: One or more plugins to verify.<br><br>[--all]<br>: If set, all plugins will be verified.<br><br>[--strict]<br>: If set, even "soft changes" like readme.txt changes will trigger<br>checksum errors.<br><br>[--format=&lt;format&gt;]<br>: Render output in a specific format.<br>---<br>default: table<br>options:<br> - table<br> - json<br> - csv<br> - yaml<br> - count<br>---<br><br>## EXAMPLES<br><br> # Verify the checksums of all installed plugins<br> $ wp plugin verify-checksums --all<br> Success: Verified 8 of 8 plugins.<br><br> # Verify the checksums of a single plugin, Akismet in this case<br> $ wp plugin verify-checksums akismet<br> Success: Verified 1 of 1 plugins.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;plugin&gt;...[=null]</params>
  </command>
  <command>
    <name>post create</name>
    <help><![CDATA[<strong>post create</strong> [--post_author=&lt;post_author&gt;] [--post_date=&lt;post_date&gt;] [--post_date_gmt=&lt;post_date_gmt&gt;] [--post_content=&lt;post_content&gt;] [--post_content_filtered=&lt;post_content_filtered&gt;] [--post_title=&lt;post_title&gt;] [--post_excerpt=&lt;post_excerpt&gt;] [--post_status=&lt;post_status&gt;] [--post_type=&lt;post_type&gt;] [--comment_status=&lt;comment_status&gt;] [--ping_status=&lt;ping_status&gt;] [--post_password=&lt;post_password&gt;] [--post_name=&lt;post_name&gt;] [--from-post=&lt;post_id&gt;] [--to_ping=&lt;to_ping&gt;] [--pinged=&lt;pinged&gt;] [--post_modified=&lt;post_modified&gt;] [--post_modified_gmt=&lt;post_modified_gmt&gt;] [--post_parent=&lt;post_parent&gt;] [--menu_order=&lt;menu_order&gt;] [--post_mime_type=&lt;post_mime_type&gt;] [--guid=&lt;guid&gt;] [--post_category=&lt;post_category&gt;] [--tags_input=&lt;tags_input&gt;] [--tax_input=&lt;tax_input&gt;] [--meta_input=&lt;meta_input&gt;] [&lt;file&gt;] [--&lt;field&gt;=&lt;value&gt;] [--edit] [--porcelain]<br/><br/>Creates a new post.<br/>## OPTIONS<br><br>[--post_author=&lt;post_author&gt;]<br>: The ID of the user who added the post. Default is the current user ID.<br><br>[--post_date=&lt;post_date&gt;]<br>: The date of the post. Default is the current time.<br><br>[--post_date_gmt=&lt;post_date_gmt&gt;]<br>: The date of the post in the GMT timezone. Default is the value of $post_date.<br><br>[--post_content=&lt;post_content&gt;]<br>: The post content. Default empty.<br><br>[--post_content_filtered=&lt;post_content_filtered&gt;]<br>: The filtered post content. Default empty.<br><br>[--post_title=&lt;post_title&gt;]<br>: The post title. Default empty.<br><br>[--post_excerpt=&lt;post_excerpt&gt;]<br>: The post excerpt. Default empty.<br><br>[--post_status=&lt;post_status&gt;]<br>: The post status. Default 'draft'.<br><br>[--post_type=&lt;post_type&gt;]<br>: The post type. Default 'post'.<br><br>[--comment_status=&lt;comment_status&gt;]<br>: Whether the post can accept comments. Accepts 'open' or 'closed'. Default is the value of 'default_comment_status' option.<br><br>[--ping_status=&lt;ping_status&gt;]<br>: Whether the post can accept pings. Accepts 'open' or 'closed'. Default is the value of 'default_ping_status' option.<br><br>[--post_password=&lt;post_password&gt;]<br>: The password to access the post. Default empty.<br><br>[--post_name=&lt;post_name&gt;]<br>: The post name. Default is the sanitized post title when creating a new post.<br><br>[--from-post=&lt;post_id&gt;]<br>: Post id of a post to be duplicated.<br><br>[--to_ping=&lt;to_ping&gt;]<br>: Space or carriage return-separated list of URLs to ping. Default empty.<br><br>[--pinged=&lt;pinged&gt;]<br>: Space or carriage return-separated list of URLs that have been pinged. Default empty.<br><br>[--post_modified=&lt;post_modified&gt;]<br>: The date when the post was last modified. Default is the current time.<br><br>[--post_modified_gmt=&lt;post_modified_gmt&gt;]<br>: The date when the post was last modified in the GMT timezone. Default is the current time.<br><br>[--post_parent=&lt;post_parent&gt;]<br>: Set this for the post it belongs to, if any. Default 0.<br><br>[--menu_order=&lt;menu_order&gt;]<br>: The order the post should be displayed in. Default 0.<br><br>[--post_mime_type=&lt;post_mime_type&gt;]<br>: The mime type of the post. Default empty.<br><br>[--guid=&lt;guid&gt;]<br>: Global Unique ID for referencing the post. Default empty.<br><br>[--post_category=&lt;post_category&gt;]<br>: Array of category names, slugs, or IDs. Defaults to value of the 'default_category' option.<br><br>[--tags_input=&lt;tags_input&gt;]<br>: Array of tag names, slugs, or IDs. Default empty.<br><br>[--tax_input=&lt;tax_input&gt;]<br>: Array of taxonomy terms keyed by their taxonomy name. Default empty.<br><br>[--meta_input=&lt;meta_input&gt;]<br>: Array in JSON format of post meta values keyed by their post meta key. Default empty.<br><br>[&lt;file&gt;]<br>: Read post content from &lt;file&gt;. If this value is present, the<br> `--post_content` argument will be ignored.<br><br> Passing `-` as the filename will cause post content to<br> be read from STDIN.<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Associative args for the new post. See wp_insert_post().<br><br>[--edit]<br>: Immediately open system's editor to write or edit post content.<br><br> If content is read from a file, from STDIN, or from the `--post_content`<br> argument, that text will be loaded into the editor.<br><br>[--porcelain]<br>: Output just the new post id.<br><br><br>## EXAMPLES<br><br> # Create post and schedule for future<br> $ wp post create --post_type=page --post_title='A future post' --post_status=future --post_date='2020-12-01 07:00:00'<br> Success: Created post 1921.<br><br> # Create post with content from given file<br> $ wp post create ./post-content.txt --post_category=201,345 --post_title='Post from file'<br> Success: Created post 1922.<br><br> # Create a post with multiple meta values.<br> $ wp post create --post_title='A post' --post_content='Just a small post.' --meta_input='{"key1":"value1","key2":"value2"}'<br> Success: Created post 1923.<br><br> # Create a duplicate post from existing posts.<br> $ wp post create --from-post=123 --post_title='Different Title'<br> Success: Created post 2350.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>file[=null]</params>
  </command>
  <command>
    <name>post delete</name>
    <help><![CDATA[<strong>post delete</strong> &lt;id&gt;... [--force] [--defer-term-counting]<br/><br/>Deletes an existing post.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: One or more IDs of posts to delete.<br><br>[--force]<br>: Skip the trash bin.<br><br>[--defer-term-counting]<br>: Recalculate term count in batch, for a performance boost.<br><br>## EXAMPLES<br><br> # Delete post skipping trash<br> $ wp post delete 123 --force<br> Success: Deleted post 123.<br><br> # Delete all pages<br> $ wp post delete $(wp post list --post_type='page' --format=ids)<br> Success: Trashed post 1164.<br> Success: Trashed post 1186.<br><br> # Delete all posts in the trash<br> $ wp post delete $(wp post list --post_status=trash --format=ids)<br> Success: Deleted post 1268.<br> Success: Deleted post 1294.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;id&gt;...</params>
  </command>
  <command>
    <name>post edit</name>
    <help><![CDATA[<strong>post edit</strong> &lt;id&gt;<br/><br/>Launches system editor to edit post content.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the post to edit.<br><br>## EXAMPLES<br><br> # Launch system editor to edit post<br> $ wp post edit 123<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id</params>
  </command>
  <command>
    <name>post exists</name>
    <help><![CDATA[<strong>post exists</strong> &lt;id&gt;<br/><br/>Verifies whether a post exists.<br/>Displays a success message if the post does exist.<br><br>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the post to check.<br><br>## EXAMPLES<br><br> # The post exists.<br> $ wp post exists 1<br> Success: Post with ID 1337 exists.<br> $ echo $?<br> 0<br><br> # The post does not exist.<br> $ wp post exists 10000<br> $ echo $?<br> 1<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id</params>
  </command>
  <command>
    <name>post generate</name>
    <help><![CDATA[<strong>post generate</strong> [--count=&lt;number&gt;] [--post_type=&lt;type&gt;] [--post_status=&lt;status&gt;] [--post_title=&lt;post_title&gt;] [--post_author=&lt;login&gt;] [--post_date=&lt;yyyy-mm-dd-hh-ii-ss&gt;] [--post_date_gmt=&lt;yyyy-mm-dd-hh-ii-ss&gt;] [--post_content] [--max_depth=&lt;number&gt;] [--format=&lt;format&gt;]<br/><br/>Generates some posts.<br/>Creates a specified number of new posts with dummy data.<br><br>## OPTIONS<br><br>[--count=&lt;number&gt;]<br>: How many posts to generate?<br>---<br>default: 100<br>---<br><br>[--post_type=&lt;type&gt;]<br>: The type of the generated posts.<br>---<br>default: post<br>---<br><br>[--post_status=&lt;status&gt;]<br>: The status of the generated posts.<br>---<br>default: publish<br>---<br><br>[--post_title=&lt;post_title&gt;]<br>: The post title.<br>---<br>default:<br>---<br><br>[--post_author=&lt;login&gt;]<br>: The author of the generated posts.<br>---<br>default:<br>---<br><br>[--post_date=&lt;yyyy-mm-dd-hh-ii-ss&gt;]<br>: The date of the generated posts. Default: current date<br><br>[--post_date_gmt=&lt;yyyy-mm-dd-hh-ii-ss&gt;]<br>: The GMT date of the generated posts. Default: value of post_date (or current date if it's not set)<br><br>[--post_content]<br>: If set, the command reads the post_content from STDIN.<br><br>[--max_depth=&lt;number&gt;]<br>: For hierarchical post types, generate child posts down to a certain depth.<br>---<br>default: 1<br>---<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: progress<br>options:<br> - progress<br> - ids<br>---<br><br>## EXAMPLES<br><br> # Generate posts.<br> $ wp post generate --count=10 --post_type=page --post_date=1999-01-04<br> Generating posts 100% [================================================] 0:01 / 0:04<br><br> # Generate posts with fetched content.<br> $ curl http://loripsum.net/api/5 | wp post generate --post_content --count=10<br> % Total % Received % Xferd Average Speed Time Time Time Current<br> Dload Upload Total Spent Left Speed<br> 100 2509 100 2509 0 0 616 0 0:00:04 0:00:04 --:--:-- 616<br> Generating posts 100% [================================================] 0:01 / 0:04<br><br> # Add meta to every generated posts.<br> $ wp post generate --format=ids | xargs -d ' ' -I % wp post meta add % foo bar<br> Success: Added custom field.<br> Success: Added custom field.<br> Success: Added custom field.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>post get</name>
    <help><![CDATA[<strong>post get</strong> &lt;id&gt; [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Gets details about a post.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the post to get.<br><br>[--field=&lt;field&gt;]<br>: Instead of returning the whole post, returns the value of a single field.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific fields. Defaults to all fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br>---<br><br>## EXAMPLES<br><br> # Save the post content to a file<br> $ wp post get 123 --field=content &gt; file.txt<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id</params>
  </command>
  <command>
    <name>post list</name>
    <help><![CDATA[<strong>post list</strong> [--&lt;field&gt;=&lt;value&gt;] [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Gets a list of posts.<br/>Display posts based on all arguments supported by<br>[WP_Query()](https://developer.wordpress.org/reference/classes/wp_query/).<br><br>## OPTIONS<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: One or more args to pass to WP_Query.<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field for each post.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - ids<br> - json<br> - count<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each post:<br><br>* ID<br>* post_title<br>* post_name<br>* post_date<br>* post_status<br><br>These fields are optionally available:<br><br>* post_author<br>* post_date_gmt<br>* post_content<br>* post_excerpt<br>* comment_status<br>* ping_status<br>* post_password<br>* to_ping<br>* pinged<br>* post_modified<br>* post_modified_gmt<br>* post_content_filtered<br>* post_parent<br>* guid<br>* menu_order<br>* post_type<br>* post_mime_type<br>* comment_count<br>* filter<br>* url<br><br>## EXAMPLES<br><br> # List post<br> $ wp post list --field=ID<br> 568<br> 829<br> 1329<br> 1695<br><br> # List posts in JSON<br> $ wp post list --post_type=post --posts_per_page=5 --format=json<br> [{"ID":1,"post_title":"Hello world!","post_name":"hello-world","post_date":"2015-06-20 09:00:10","post_status":"publish"},{"ID":1178,"post_title":"Markup: HTML Tags and Formatting","post_name":"markup-html-tags-and-formatting","post_date":"2013-01-11 20:22:19","post_status":"draft"}]<br><br> # List all pages<br> $ wp post list --post_type=page --fields=post_title,post_status<br> +-------------+-------------+<br> | post_title | post_status |<br> +-------------+-------------+<br> | Sample Page | publish |<br> +-------------+-------------+<br><br> # List ids of all pages and posts<br> $ wp post list --post_type=page,post --format=ids<br> 15 25 34 37 198<br><br> # List given posts<br> $ wp post list --post__in=1,3<br> +----+--------------+-------------+---------------------+-------------+<br> | ID | post_title | post_name | post_date | post_status |<br> +----+--------------+-------------+---------------------+-------------+<br> | 3 | Lorem Ipsum | lorem-ipsum | 2016-06-01 14:34:36 | publish |<br> | 1 | Hello world! | hello-world | 2016-06-01 14:31:12 | publish |<br> +----+--------------+-------------+---------------------+-------------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>post meta add</name>
    <help><![CDATA[<strong>post meta add</strong> &lt;id&gt; &lt;key&gt; [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Add a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to create.<br><br>[&lt;value&gt;]<br>: The value of the meta field. If omitted, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key value[=null]</params>
  </command>
  <command>
    <name>post meta delete</name>
    <help><![CDATA[<strong>post meta delete</strong> &lt;id&gt; [&lt;key&gt;] [&lt;value&gt;] [--all]<br/><br/>Delete a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>[&lt;key&gt;]<br>: The name of the meta field to delete.<br><br>[&lt;value&gt;]<br>: The value to delete. If omitted, all rows with key will deleted.<br><br>[--all]<br>: Delete all meta for the object.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key[=null] value[=null]</params>
  </command>
  <command>
    <name>post meta get</name>
    <help><![CDATA[<strong>post meta get</strong> &lt;id&gt; &lt;key&gt; [--format=&lt;format&gt;]<br/><br/>Get meta field value.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to get.<br><br>[--format=&lt;format&gt;]<br>: Get value in a particular format.<br>---<br>default: var_export<br>options:<br> - var_export<br> - json<br> - yaml<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key</params>
  </command>
  <command>
    <name>post meta list</name>
    <help><![CDATA[<strong>post meta list</strong> &lt;id&gt; [--keys=&lt;keys&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;] [--orderby=&lt;fields&gt;] [--order=&lt;order&gt;] [--unserialize]<br/><br/>List all metadata associated with an object.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: ID for the object.<br><br>[--keys=&lt;keys&gt;]<br>: Limit output to metadata of specific keys.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific row fields. Defaults to id,meta_key,meta_value.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br> - count<br>---<br><br>[--orderby=&lt;fields&gt;]<br>: Set orderby which field.<br>---<br>default: id<br>options:<br> - id<br> - meta_key<br> - meta_value<br>---<br><br>[--order=&lt;order&gt;]<br>: Set ascending or descending order.<br>---<br>default: asc<br>options:<br> - asc<br> - desc<br>---<br><br>[--unserialize]<br>: Unserialize meta_value output.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id</params>
  </command>
  <command>
    <name>post meta patch</name>
    <help><![CDATA[<strong>post meta patch</strong> &lt;action&gt; &lt;id&gt; &lt;key&gt; &lt;key-path&gt;... [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Update a nested value for a meta field.<br/>## OPTIONS<br><br>&lt;action&gt;<br>: Patch action to perform.<br>---<br>options:<br> - insert<br> - update<br> - delete<br>---<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to update.<br><br>&lt;key-path&gt;...<br>: The name(s) of the keys within the value to locate the value to patch.<br><br>[&lt;value&gt;]<br>: The new value. If omitted, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>action id key &lt;key-path&gt;... value[=null]</params>
  </command>
  <command>
    <name>post meta pluck</name>
    <help><![CDATA[<strong>post meta pluck</strong> &lt;id&gt; &lt;key&gt; &lt;key-path&gt;... [--format=&lt;format&gt;]<br/><br/>Get a nested value from a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to get.<br><br>&lt;key-path&gt;...<br>: The name(s) of the keys within the value to locate the value to pluck.<br><br>[--format=&lt;format&gt;]<br>: The output format of the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br> - yaml<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key &lt;key-path&gt;...</params>
  </command>
  <command>
    <name>post meta update</name>
    <help><![CDATA[<strong>post meta update</strong> &lt;id&gt; &lt;key&gt; [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Update a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to update.<br><br>[&lt;value&gt;]<br>: The new value. If omitted, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key value[=null]</params>
  </command>
  <command>
    <name>post term add</name>
    <help><![CDATA[<strong>post term add</strong> &lt;id&gt; &lt;taxonomy&gt; &lt;term&gt;... [--by=&lt;field&gt;]<br/><br/>Add a term to an object.<br/>Append the term to the existing set of terms on the object.<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;taxonomy&gt;<br>: The name of the taxonomy type to be added.<br><br>&lt;term&gt;...<br>: The slug of the term or terms to be added.<br><br>[--by=&lt;field&gt;]<br>: Explicitly handle the term value as a slug or id.<br>---<br>options:<br> - slug<br> - id<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id taxonomy &lt;term&gt;...</params>
  </command>
  <command>
    <name>post term list</name>
    <help><![CDATA[<strong>post term list</strong> &lt;id&gt; &lt;taxonomy&gt;... [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>List all terms associated with an object.<br/>&lt;id&gt;<br>: ID for the object.<br><br>&lt;taxonomy&gt;...<br>: One or more taxonomies to list.<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field for each term.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific row fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br> - count<br> - ids<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each term:<br><br>* term_id<br>* name<br>* slug<br>* taxonomy<br><br>These fields are optionally available:<br><br>* term_taxonomy_id<br>* description<br>* term_group<br>* parent<br>* count<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id &lt;taxonomy&gt;...</params>
  </command>
  <command>
    <name>post term remove</name>
    <help><![CDATA[<strong>post term remove</strong> &lt;id&gt; &lt;taxonomy&gt; [&lt;term&gt;...] [--by=&lt;field&gt;] [--all]<br/><br/>Remove a term from an object.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;taxonomy&gt;<br>: The name of the term's taxonomy.<br><br>[&lt;term&gt;...]<br>: The name of the term or terms to be removed from the object.<br><br>[--by=&lt;field&gt;]<br>: Explicitly handle the term value as a slug or id.<br>---<br>options:<br> - slug<br> - id<br>---<br><br>[--all]<br>: Remove all terms from the object.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id taxonomy &lt;term&gt;...[=null]</params>
  </command>
  <command>
    <name>post term set</name>
    <help><![CDATA[<strong>post term set</strong> &lt;id&gt; &lt;taxonomy&gt; &lt;term&gt;... [--by=&lt;field&gt;]<br/><br/>Set object terms.<br/>Replaces existing terms on the object.<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;taxonomy&gt;<br>: The name of the taxonomy type to be updated.<br><br>&lt;term&gt;...<br>: The slug of the term or terms to be updated.<br><br>[--by=&lt;field&gt;]<br>: Explicitly handle the term value as a slug or id.<br>---<br>options:<br> - slug<br> - id<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id taxonomy &lt;term&gt;...</params>
  </command>
  <command>
    <name>post update</name>
    <help><![CDATA[<strong>post update</strong> &lt;id&gt;... [--post_author=&lt;post_author&gt;] [--post_date=&lt;post_date&gt;] [--post_date_gmt=&lt;post_date_gmt&gt;] [--post_content=&lt;post_content&gt;] [--post_content_filtered=&lt;post_content_filtered&gt;] [--post_title=&lt;post_title&gt;] [--post_excerpt=&lt;post_excerpt&gt;] [--post_status=&lt;post_status&gt;] [--post_type=&lt;post_type&gt;] [--comment_status=&lt;comment_status&gt;] [--ping_status=&lt;ping_status&gt;] [--post_password=&lt;post_password&gt;] [--post_name=&lt;post_name&gt;] [--to_ping=&lt;to_ping&gt;] [--pinged=&lt;pinged&gt;] [--post_modified=&lt;post_modified&gt;] [--post_modified_gmt=&lt;post_modified_gmt&gt;] [--post_parent=&lt;post_parent&gt;] [--menu_order=&lt;menu_order&gt;] [--post_mime_type=&lt;post_mime_type&gt;] [--guid=&lt;guid&gt;] [--post_category=&lt;post_category&gt;] [--tags_input=&lt;tags_input&gt;] [--tax_input=&lt;tax_input&gt;] [--meta_input=&lt;meta_input&gt;] [&lt;file&gt;] --&lt;field&gt;=&lt;value&gt; [--defer-term-counting]<br/><br/>Updates one or more existing posts.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: One or more IDs of posts to update.<br><br>[--post_author=&lt;post_author&gt;]<br>: The ID of the user who added the post. Default is the current user ID.<br><br>[--post_date=&lt;post_date&gt;]<br>: The date of the post. Default is the current time.<br><br>[--post_date_gmt=&lt;post_date_gmt&gt;]<br>: The date of the post in the GMT timezone. Default is the value of $post_date.<br><br>[--post_content=&lt;post_content&gt;]<br>: The post content. Default empty.<br><br>[--post_content_filtered=&lt;post_content_filtered&gt;]<br>: The filtered post content. Default empty.<br><br>[--post_title=&lt;post_title&gt;]<br>: The post title. Default empty.<br><br>[--post_excerpt=&lt;post_excerpt&gt;]<br>: The post excerpt. Default empty.<br><br>[--post_status=&lt;post_status&gt;]<br>: The post status. Default 'draft'.<br><br>[--post_type=&lt;post_type&gt;]<br>: The post type. Default 'post'.<br><br>[--comment_status=&lt;comment_status&gt;]<br>: Whether the post can accept comments. Accepts 'open' or 'closed'. Default is the value of 'default_comment_status' option.<br><br>[--ping_status=&lt;ping_status&gt;]<br>: Whether the post can accept pings. Accepts 'open' or 'closed'. Default is the value of 'default_ping_status' option.<br><br>[--post_password=&lt;post_password&gt;]<br>: The password to access the post. Default empty.<br><br>[--post_name=&lt;post_name&gt;]<br>: The post name. Default is the sanitized post title when creating a new post.<br><br>[--to_ping=&lt;to_ping&gt;]<br>: Space or carriage return-separated list of URLs to ping. Default empty.<br><br>[--pinged=&lt;pinged&gt;]<br>: Space or carriage return-separated list of URLs that have been pinged. Default empty.<br><br>[--post_modified=&lt;post_modified&gt;]<br>: The date when the post was last modified. Default is the current time.<br><br>[--post_modified_gmt=&lt;post_modified_gmt&gt;]<br>: The date when the post was last modified in the GMT timezone. Default is the current time.<br><br>[--post_parent=&lt;post_parent&gt;]<br>: Set this for the post it belongs to, if any. Default 0.<br><br>[--menu_order=&lt;menu_order&gt;]<br>: The order the post should be displayed in. Default 0.<br><br>[--post_mime_type=&lt;post_mime_type&gt;]<br>: The mime type of the post. Default empty.<br><br>[--guid=&lt;guid&gt;]<br>: Global Unique ID for referencing the post. Default empty.<br><br>[--post_category=&lt;post_category&gt;]<br>: Array of category names, slugs, or IDs. Defaults to value of the 'default_category' option.<br><br>[--tags_input=&lt;tags_input&gt;]<br>: Array of tag names, slugs, or IDs. Default empty.<br><br>[--tax_input=&lt;tax_input&gt;]<br>: Array of taxonomy terms keyed by their taxonomy name. Default empty.<br><br>[--meta_input=&lt;meta_input&gt;]<br>: Array in JSON format of post meta values keyed by their post meta key. Default empty.<br><br>[&lt;file&gt;]<br>: Read post content from &lt;file&gt;. If this value is present, the<br> `--post_content` argument will be ignored.<br><br> Passing `-` as the filename will cause post content to<br> be read from STDIN.<br><br>--&lt;field&gt;=&lt;value&gt;<br>: One or more fields to update. See wp_insert_post().<br><br>[--defer-term-counting]<br>: Recalculate term count in batch, for a performance boost.<br><br>## EXAMPLES<br><br> $ wp post update 123 --post_name=something --post_status=draft<br> Success: Updated post 123.<br><br> # Update a post with multiple meta values.<br> $ wp post update 123 --meta_input='{"key1":"value1","key2":"value2"}'<br> Success: Updated post 123.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;id&gt;... file[=null]</params>
  </command>
  <command>
    <name>post-type get</name>
    <help><![CDATA[<strong>post-type get</strong> &lt;post-type&gt; [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Gets details about a registered post type.<br/>## OPTIONS<br><br>&lt;post-type&gt;<br>: Post type slug<br><br>[--field=&lt;field&gt;]<br>: Instead of returning the whole taxonomy, returns the value of a single field.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific fields. Defaults to all fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for the specified post type:<br><br>* name<br>* label<br>* description<br>* hierarchical<br>* public<br>* capability_type<br>* labels<br>* cap<br>* supports<br><br>These fields are optionally available:<br><br>* count<br><br>## EXAMPLES<br><br> # Get details about the 'page' post type.<br> $ wp post-type get page --fields=name,label,hierarchical --format=json<br> {"name":"page","label":"Pages","hierarchical":true}<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>post-type</params>
  </command>
  <command>
    <name>post-type list</name>
    <help><![CDATA[<strong>post-type list</strong> [--&lt;field&gt;=&lt;value&gt;] [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Lists registered post types.<br/>## OPTIONS<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Filter by one or more fields (see get_post_types() first parameter for a list of available fields).<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field for each post type.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific post type fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - count<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each post type:<br><br>* name<br>* label<br>* description<br>* hierarchical<br>* public<br>* capability_type<br><br>These fields are optionally available:<br><br>* count<br><br>## EXAMPLES<br><br> # List registered post types<br> $ wp post-type list --format=csv<br> name,label,description,hierarchical,public,capability_type<br> post,Posts,,,1,post<br> page,Pages,,1,1,page<br> attachment,Media,,,1,post<br> revision,Revisions,,,,post<br> nav_menu_item,"Navigation Menu Items",,,,post<br><br> # List post types with 'post' capability type<br> $ wp post-type list --capability_type=post --fields=name,public<br> +---------------+--------+<br> | name | public |<br> +---------------+--------+<br> | post | 1 |<br> | attachment | 1 |<br> | revision | |<br> | nav_menu_item | |<br> +---------------+--------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>rewrite flush</name>
    <help><![CDATA[<strong>rewrite flush</strong> [--hard]<br/><br/>Flushes rewrite rules.<br/>Resets WordPress' rewrite rules based on registered post types, etc.<br><br>To regenerate a .htaccess file with WP-CLI, you'll need to add the mod_rewrite module<br>to your wp-cli.yml or config.yml. For example:<br><br>```<br>apache_modules:<br> - mod_rewrite<br>```<br><br>## OPTIONS<br><br>[--hard]<br>: Perform a hard flush - update `.htaccess` rules as well as rewrite rules in database. Works only on single site installs.<br><br>## EXAMPLES<br><br> $ wp rewrite flush<br> Success: Rewrite rules flushed.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>rewrite list</name>
    <help><![CDATA[<strong>rewrite list</strong> [--match=&lt;url&gt;] [--source=&lt;source&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Gets a list of the current rewrite rules.<br/>## OPTIONS<br><br>[--match=&lt;url&gt;]<br>: Show rewrite rules matching a particular URL.<br><br>[--source=&lt;source&gt;]<br>: Show rewrite rules from a particular source.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific fields. Defaults to match,query,source.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - count<br> - yaml<br>---<br><br>## EXAMPLES<br><br> $ wp rewrite list --format=csv<br> match,query,source<br> ^wp-json/?$,index.php?rest_route=/,other<br> ^wp-json/(.*)?,index.php?rest_route=/$matches[1],other<br> category/(.+?)/feed/(feed|rdf|rss|rss2|atom)/?$,index.php?category_name=$matches[1]&feed=$matches[2],category<br> category/(.+?)/(feed|rdf|rss|rss2|atom)/?$,index.php?category_name=$matches[1]&feed=$matches[2],category<br> category/(.+?)/embed/?$,index.php?category_name=$matches[1]&embed=true,category<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>rewrite structure</name>
    <help><![CDATA[<strong>rewrite structure</strong> &lt;permastruct&gt; [--category-base=&lt;base&gt;] [--tag-base=&lt;base&gt;] [--hard]<br/><br/>Updates the permalink structure.<br/>Sets the post permalink structure to the specified pattern.<br><br>To regenerate a .htaccess file with WP-CLI, you'll need to add<br>the mod_rewrite module to your [WP-CLI config](https://make.wordpress.org/cli/handbook/config/#config-files).<br>For example:<br><br>```<br>apache_modules:<br> - mod_rewrite<br>```<br><br>## OPTIONS<br><br>&lt;permastruct&gt;<br>: The new permalink structure to apply.<br><br>[--category-base=&lt;base&gt;]<br>: Set the base for category permalinks, i.e. '/category/'.<br><br>[--tag-base=&lt;base&gt;]<br>: Set the base for tag permalinks, i.e. '/tag/'.<br><br>[--hard]<br>: Perform a hard flush - update `.htaccess` rules as well as rewrite rules in database.<br><br>## EXAMPLES<br><br> $ wp rewrite structure '/%year%/%monthnum%/%postname%/'<br> Success: Rewrite structure set.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>permastruct</params>
  </command>
  <command>
    <name>role create</name>
    <help><![CDATA[<strong>role create</strong> &lt;role-key&gt; &lt;role-name&gt; [--clone=&lt;role&gt;]<br/><br/>Creates a new role.<br/>## OPTIONS<br><br>&lt;role-key&gt;<br>: The internal name of the role.<br><br>&lt;role-name&gt;<br>: The publicly visible name of the role.<br><br>[--clone=&lt;role&gt;]<br>: Clone capabilities from an existing role.<br><br>## EXAMPLES<br><br> # Create role for Approver.<br> $ wp role create approver Approver<br> Success: Role with key 'approver' created.<br><br> # Create role for Product Administrator.<br> $ wp role create productadmin "Product Administrator"<br> Success: Role with key 'productadmin' created.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>role-key role-name</params>
  </command>
  <command>
    <name>role delete</name>
    <help><![CDATA[<strong>role delete</strong> &lt;role-key&gt;<br/><br/>Deletes an existing role.<br/>## OPTIONS<br><br>&lt;role-key&gt;<br>: The internal name of the role.<br><br>## EXAMPLES<br><br> # Delete approver role.<br> $ wp role delete approver<br> Success: Role with key 'approver' deleted.<br><br> # Delete productadmin role.<br> wp role delete productadmin<br> Success: Role with key 'productadmin' deleted.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>role-key</params>
  </command>
  <command>
    <name>role exists</name>
    <help><![CDATA[<strong>role exists</strong> &lt;role-key&gt;<br/><br/>Checks if a role exists.<br/>Exits with return code 0 if the role exists, 1 if it does not.<br><br>## OPTIONS<br><br>&lt;role-key&gt;<br>: The internal name of the role.<br><br>## EXAMPLES<br><br> # Check if a role exists.<br> $ wp role exists editor<br> Success: Role with ID 'editor' exists.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>role-key</params>
  </command>
  <command>
    <name>role list</name>
    <help><![CDATA[<strong>role list</strong> [--fields=&lt;fields&gt;] [--field=&lt;field&gt;] [--format=&lt;format&gt;]<br/><br/>Lists all roles.<br/>## OPTIONS<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields.<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - count<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each role:<br><br>* name<br>* role<br><br>There are no optional fields.<br><br>## EXAMPLES<br><br> # List roles.<br> $ wp role list --fields=role --format=csv<br> role<br> administrator<br> editor<br> author<br> contributor<br> subscriber<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>role reset</name>
    <help><![CDATA[<strong>role reset</strong> [&lt;role-key&gt;...] [--all]<br/><br/>Resets any default role to default capabilities.<br/>## OPTIONS<br><br>[&lt;role-key&gt;...]<br>: The internal name of one or more roles to reset.<br><br>[--all]<br>: If set, all default roles will be reset.<br><br>## EXAMPLES<br><br> # Reset role.<br> $ wp role reset administrator author contributor<br> Success: Reset 1/3 roles.<br><br> # Reset all default roles.<br> $ wp role reset --all<br> Success: All default roles reset.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;role-key&gt;...[=null]</params>
  </command>
  <command>
    <name>scaffold block</name>
    <help><![CDATA[<strong>scaffold block</strong> &lt;slug&gt; [--title=&lt;title&gt;] [--dashicon=&lt;dashicon&gt;] [--category=&lt;category&gt;] [--theme] [--plugin=&lt;plugin&gt;] [--force]<br/><br/>Generates PHP, JS and CSS code for registering a Gutenberg block for a plugin or theme.<br/>Blocks are the fundamental element of the Gutenberg editor. They are the primary way in which plugins and themes can register their own functionality and extend the capabilities of the editor.<br><br>Visit the [Gutenberg handbook](https://wordpress.org/gutenberg/handbook/block-api/) to learn more about Block API.<br><br>When you scaffold a block you must use either the theme or plugin option. The latter is recommended.<br><br>## OPTIONS<br><br>&lt;slug&gt;<br>: The internal name of the block.<br><br>[--title=&lt;title&gt;]<br>: The display title for your block.<br><br>[--dashicon=&lt;dashicon&gt;]<br>: The dashicon to make it easier to identify your block.<br><br>[--category=&lt;category&gt;]<br>: The category name to help users browse and discover your block.<br>---<br>default: widgets<br>options:<br> - common<br> - embed<br> - formatting<br> - layout<br> - widgets<br>---<br><br>[--theme]<br>: Create files in the active theme directory. Specify a theme with `--theme=&lt;theme&gt;` to have the file placed in that theme.<br><br>[--plugin=&lt;plugin&gt;]<br>: Create files in the given plugin's directory.<br><br>[--force]<br>: Overwrite files that already exist.<br><br>## EXAMPLES<br><br> # Generate a 'movie' block for the 'movies' plugin<br> $ wp scaffold block movie --title="Movie block" --plugin=movies<br> Success: Created block 'Movie block'.<br><br> # Generate a 'movie' block for the 'simple-life' theme<br> $ wp scaffold block movie --title="Movie block" --theme=simple-life<br> Success: Created block 'Movie block'.<br><br> # Create a new plugin and add two blocks<br> # Create plugin called books<br> $ wp scaffold plugin books<br> # Add a block called book to plugin books<br> $ wp scaffold block book --title="Book" --plugin=books<br> # Add a second block to plugin called books.<br> $ wp scaffold block books --title="Book List" --plugin=books<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>slug</params>
  </command>
  <command>
    <name>scaffold child-theme</name>
    <help><![CDATA[<strong>scaffold child-theme</strong> &lt;slug&gt; --parent_theme=&lt;slug&gt; [--theme_name=&lt;title&gt;] [--author=&lt;full-name&gt;] [--author_uri=&lt;uri&gt;] [--theme_uri=&lt;uri&gt;] [--activate] [--enable-network] [--force]<br/><br/>Generates child theme based on an existing theme.<br/>Creates a child theme folder with `functions.php` and `style.css` files.<br><br>## OPTIONS<br><br>&lt;slug&gt;<br>: The slug for the new child theme.<br><br>--parent_theme=&lt;slug&gt;<br>: What to put in the 'Template:' header in 'style.css'.<br><br>[--theme_name=&lt;title&gt;]<br>: What to put in the 'Theme Name:' header in 'style.css'.<br><br>[--author=&lt;full-name&gt;]<br>: What to put in the 'Author:' header in 'style.css'.<br><br>[--author_uri=&lt;uri&gt;]<br>: What to put in the 'Author URI:' header in 'style.css'.<br><br>[--theme_uri=&lt;uri&gt;]<br>: What to put in the 'Theme URI:' header in 'style.css'.<br><br>[--activate]<br>: Activate the newly created child theme.<br><br>[--enable-network]<br>: Enable the newly created child theme for the entire network.<br><br>[--force]<br>: Overwrite files that already exist.<br><br>## EXAMPLES<br><br> # Generate a 'sample-theme' child theme based on TwentySixteen<br> $ wp scaffold child-theme sample-theme --parent_theme=twentysixteen<br> Success: Created '/var/www/example.com/public_html/wp-content/themes/sample-theme'.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>slug</params>
  </command>
  <command>
    <name>scaffold plugin</name>
    <help><![CDATA[<strong>scaffold plugin</strong> &lt;slug&gt; [--dir=&lt;dirname&gt;] [--plugin_name=&lt;title&gt;] [--plugin_description=&lt;description&gt;] [--plugin_author=&lt;author&gt;] [--plugin_author_uri=&lt;url&gt;] [--plugin_uri=&lt;url&gt;] [--skip-tests] [--ci=&lt;provider&gt;] [--activate] [--activate-network] [--force]<br/><br/>Generates starter code for a plugin.<br/>The following files are always generated:<br><br>* `plugin-slug.php` is the main PHP plugin file.<br>* `readme.txt` is the readme file for the plugin.<br>* `package.json` needed by NPM holds various metadata relevant to the project. Packages: `grunt`, `grunt-wp-i18n` and `grunt-wp-readme-to-markdown`.<br>* `Gruntfile.js` is the JS file containing Grunt tasks. Tasks: `i18n` containing `addtextdomain` and `makepot`, `readme` containing `wp_readme_to_markdown`.<br>* `.editorconfig` is the configuration file for Editor.<br>* `.gitignore` tells which files (or patterns) git should ignore.<br>* `.distignore` tells which files and folders should be ignored in distribution.<br><br>The following files are also included unless the `--skip-tests` is used:<br><br>* `phpunit.xml.dist` is the configuration file for PHPUnit.<br>* `.travis.yml` is the configuration file for Travis CI. Use `--ci=&lt;provider&gt;` to select a different service.<br>* `bin/install-wp-tests.sh` configures the WordPress test suite and a test database.<br>* `tests/bootstrap.php` is the file that makes the current plugin active when running the test suite.<br>* `tests/test-sample.php` is a sample file containing test cases.<br>* `.phpcs.xml.dist` is a collection of PHP_CodeSniffer rules.<br><br>## OPTIONS<br><br>&lt;slug&gt;<br>: The internal name of the plugin.<br><br>[--dir=&lt;dirname&gt;]<br>: Put the new plugin in some arbitrary directory path. Plugin directory will be path plus supplied slug.<br><br>[--plugin_name=&lt;title&gt;]<br>: What to put in the 'Plugin Name:' header.<br><br>[--plugin_description=&lt;description&gt;]<br>: What to put in the 'Description:' header.<br><br>[--plugin_author=&lt;author&gt;]<br>: What to put in the 'Author:' header.<br><br>[--plugin_author_uri=&lt;url&gt;]<br>: What to put in the 'Author URI:' header.<br><br>[--plugin_uri=&lt;url&gt;]<br>: What to put in the 'Plugin URI:' header.<br><br>[--skip-tests]<br>: Don't generate files for unit testing.<br><br>[--ci=&lt;provider&gt;]<br>: Choose a configuration file for a continuous integration provider.<br>---<br>default: travis<br>options:<br> - travis<br> - circle<br> - gitlab<br>---<br><br>[--activate]<br>: Activate the newly generated plugin.<br><br>[--activate-network]<br>: Network activate the newly generated plugin.<br><br>[--force]<br>: Overwrite files that already exist.<br><br>## EXAMPLES<br><br> $ wp scaffold plugin sample-plugin<br> Success: Created plugin files.<br> Success: Created test files.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>slug</params>
  </command>
  <command>
    <name>scaffold plugin-tests</name>
    <help><![CDATA[<strong>scaffold plugin-tests</strong> [&lt;plugin&gt;] [--dir=&lt;dirname&gt;] [--ci=&lt;provider&gt;] [--force]<br/><br/>Generates files needed for running PHPUnit tests in a plugin.<br/>The following files are generated by default:<br><br>* `phpunit.xml.dist` is the configuration file for PHPUnit.<br>* `.travis.yml` is the configuration file for Travis CI. Use `--ci=&lt;provider&gt;` to select a different service.<br>* `bin/install-wp-tests.sh` configures the WordPress test suite and a test database.<br>* `tests/bootstrap.php` is the file that makes the current plugin active when running the test suite.<br>* `tests/test-sample.php` is a sample file containing the actual tests.<br>* `.phpcs.xml.dist` is a collection of PHP_CodeSniffer rules.<br><br>Learn more from the [plugin unit tests documentation](https://make.wordpress.org/cli/handbook/plugin-unit-tests/).<br><br>## ENVIRONMENT<br><br>The `tests/bootstrap.php` file looks for the WP_TESTS_DIR environment<br>variable.<br><br>## OPTIONS<br><br>[&lt;plugin&gt;]<br>: The name of the plugin to generate test files for.<br><br>[--dir=&lt;dirname&gt;]<br>: Generate test files for a non-standard plugin path. If no plugin slug is specified, the directory name is used.<br><br>[--ci=&lt;provider&gt;]<br>: Choose a configuration file for a continuous integration provider.<br>---<br>default: travis<br>options:<br> - travis<br> - circle<br> - gitlab<br> - bitbucket<br>---<br><br>[--force]<br>: Overwrite files that already exist.<br><br>## EXAMPLES<br><br> # Generate unit test files for plugin 'sample-plugin'.<br> $ wp scaffold plugin-tests sample-plugin<br> Success: Created test files.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>plugin[=null]</params>
  </command>
  <command>
    <name>scaffold post-type</name>
    <help><![CDATA[<strong>scaffold post-type</strong> &lt;slug&gt; [--label=&lt;label&gt;] [--textdomain=&lt;textdomain&gt;] [--dashicon=&lt;dashicon&gt;] [--theme] [--plugin=&lt;plugin&gt;] [--raw] [--force]<br/><br/>Generates PHP code for registering a custom post type.<br/>## OPTIONS<br><br>&lt;slug&gt;<br>: The internal name of the post type.<br><br>[--label=&lt;label&gt;]<br>: The text used to translate the update messages.<br><br>[--textdomain=&lt;textdomain&gt;]<br>: The textdomain to use for the labels.<br><br>[--dashicon=&lt;dashicon&gt;]<br>: The dashicon to use in the menu.<br><br>[--theme]<br>: Create a file in the active theme directory, instead of sending to<br>STDOUT. Specify a theme with `--theme=&lt;theme&gt;` to have the file placed in that theme.<br><br>[--plugin=&lt;plugin&gt;]<br>: Create a file in the given plugin's directory, instead of sending to STDOUT.<br><br>[--raw]<br>: Just generate the `register_post_type()` call and nothing else.<br><br>[--force]<br>: Overwrite files that already exist.<br><br>## EXAMPLES<br><br> # Generate a 'movie' post type for the 'simple-life' theme<br> $ wp scaffold post-type movie --label=Movie --theme=simple-life<br> Success: Created '/var/www/example.com/public_html/wp-content/themes/simple-life/post-types/movie.php'.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>slug</params>
  </command>
  <command>
    <name>scaffold taxonomy</name>
    <help><![CDATA[<strong>scaffold taxonomy</strong> &lt;slug&gt; [--post_types=&lt;post-types&gt;] [--label=&lt;label&gt;] [--textdomain=&lt;textdomain&gt;] [--theme] [--plugin=&lt;plugin&gt;] [--raw] [--force]<br/><br/>Generates PHP code for registering a custom taxonomy.<br/>## OPTIONS<br><br>&lt;slug&gt;<br>: The internal name of the taxonomy.<br><br>[--post_types=&lt;post-types&gt;]<br>: Post types to register for use with the taxonomy.<br><br>[--label=&lt;label&gt;]<br>: The text used to translate the update messages.<br><br>[--textdomain=&lt;textdomain&gt;]<br>: The textdomain to use for the labels.<br><br>[--theme]<br>: Create a file in the active theme directory, instead of sending to<br>STDOUT. Specify a theme with `--theme=&lt;theme&gt;` to have the file placed in that theme.<br><br>[--plugin=&lt;plugin&gt;]<br>: Create a file in the given plugin's directory, instead of sending to STDOUT.<br><br>[--raw]<br>: Just generate the `register_taxonomy()` call and nothing else.<br><br>[--force]<br>: Overwrite files that already exist.<br><br>## EXAMPLES<br><br> # Generate PHP code for registering a custom taxonomy and save in a file<br> $ wp scaffold taxonomy venue --post_types=event,presentation &gt; taxonomy.php<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>slug</params>
  </command>
  <command>
    <name>scaffold theme-tests</name>
    <help><![CDATA[<strong>scaffold theme-tests</strong> [&lt;theme&gt;] [--dir=&lt;dirname&gt;] [--ci=&lt;provider&gt;] [--force]<br/><br/>Generates files needed for running PHPUnit tests in a theme.<br/>The following files are generated by default:<br><br>* `phpunit.xml.dist` is the configuration file for PHPUnit.<br>* `.travis.yml` is the configuration file for Travis CI. Use `--ci=&lt;provider&gt;` to select a different service.<br>* `bin/install-wp-tests.sh` configures the WordPress test suite and a test database.<br>* `tests/bootstrap.php` is the file that makes the current theme active when running the test suite.<br>* `tests/test-sample.php` is a sample file containing the actual tests.<br>* `.phpcs.xml.dist` is a collection of PHP_CodeSniffer rules.<br><br>Learn more from the [plugin unit tests documentation](https://make.wordpress.org/cli/handbook/plugin-unit-tests/).<br><br>## ENVIRONMENT<br><br>The `tests/bootstrap.php` file looks for the WP_TESTS_DIR environment<br>variable.<br><br>## OPTIONS<br><br>[&lt;theme&gt;]<br>: The name of the theme to generate test files for.<br><br>[--dir=&lt;dirname&gt;]<br>: Generate test files for a non-standard theme path. If no theme slug is specified, the directory name is used.<br><br>[--ci=&lt;provider&gt;]<br>: Choose a configuration file for a continuous integration provider.<br>---<br>default: travis<br>options:<br> - travis<br> - circle<br> - gitlab<br> - bitbucket<br>---<br><br>[--force]<br>: Overwrite files that already exist.<br><br>## EXAMPLES<br><br> # Generate unit test files for theme 'twentysixteenchild'.<br> $ wp scaffold theme-tests twentysixteenchild<br> Success: Created test files.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>theme[=null]</params>
  </command>
  <command>
    <name>scaffold underscores</name>
    <help><![CDATA[<strong>scaffold underscores</strong> &lt;slug&gt; [--activate] [--enable-network] [--theme_name=&lt;title&gt;] [--author=&lt;full-name&gt;] [--author_uri=&lt;uri&gt;] [--sassify] [--woocommerce] [--force]<br/><br/>Generates starter code for a theme based on _s.<br/>See the [Underscores website](https://underscores.me/) for more details.<br><br>## OPTIONS<br><br>&lt;slug&gt;<br>: The slug for the new theme, used for prefixing functions.<br><br>[--activate]<br>: Activate the newly downloaded theme.<br><br>[--enable-network]<br>: Enable the newly downloaded theme for the entire network.<br><br>[--theme_name=&lt;title&gt;]<br>: What to put in the 'Theme Name:' header in 'style.css'.<br><br>[--author=&lt;full-name&gt;]<br>: What to put in the 'Author:' header in 'style.css'.<br><br>[--author_uri=&lt;uri&gt;]<br>: What to put in the 'Author URI:' header in 'style.css'.<br><br>[--sassify]<br>: Include stylesheets as SASS.<br><br>[--woocommerce]<br>: Include WooCommerce boilerplate files.<br><br>[--force]<br>: Overwrite files that already exist.<br><br>## EXAMPLES<br><br> # Generate a theme with name "Sample Theme" and author "John Doe"<br> $ wp scaffold _s sample-theme --theme_name="Sample Theme" --author="John Doe"<br> Success: Created theme 'Sample Theme'.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>slug</params>
  </command>
  <command>
    <name>search-replace</name>
    <help><![CDATA[<strong>search-replace</strong> &lt;old&gt; &lt;new&gt; [&lt;table&gt;...] [--dry-run] [--network] [--all-tables-with-prefix] [--all-tables] [--export[=&lt;file&gt;]] [--export_insert_size=&lt;rows&gt;] [--skip-tables=&lt;tables&gt;] [--skip-columns=&lt;columns&gt;] [--include-columns=&lt;columns&gt;] [--precise] [--recurse-objects] [--verbose] [--regex] [--regex-flags=&lt;regex-flags&gt;] [--regex-delimiter=&lt;regex-delimiter&gt;] [--regex-limit=&lt;regex-limit&gt;] [--format=&lt;format&gt;] [--report] [--report-changed-only] [--log[=&lt;file&gt;]] [--before_context=&lt;num&gt;] [--after_context=&lt;num&gt;]<br/><br/>Searches/replaces strings in the database.<br/>Searches through all rows in a selection of tables and replaces<br>appearances of the first string with the second string.<br><br>By default, the command uses tables registered to the `$wpdb` object. On<br>multisite, this will just be the tables for the current site unless<br>`--network` is specified.<br><br>Search/replace intelligently handles PHP serialized data, and does not<br>change primary key values.<br><br>## OPTIONS<br><br>&lt;old&gt;<br>: A string to search for within the database.<br><br>&lt;new&gt;<br>: Replace instances of the first string with this new string.<br><br>[&lt;table&gt;...]<br>: List of database tables to restrict the replacement to. Wildcards are<br>supported, e.g. `'wp_*options'` or `'wp_post*'`.<br><br>[--dry-run]<br>: Run the entire search/replace operation and show report, but don't save<br>changes to the database.<br><br>[--network]<br>: Search/replace through all the tables registered to $wpdb in a<br>multisite install.<br><br>[--all-tables-with-prefix]<br>: Enable replacement on any tables that match the table prefix even if<br>not registered on $wpdb.<br><br>[--all-tables]<br>: Enable replacement on ALL tables in the database, regardless of the<br>prefix, and even if not registered on $wpdb. Overrides --network<br>and --all-tables-with-prefix.<br><br>[--export[=&lt;file&gt;]]<br>: Write transformed data as SQL file instead of saving replacements to<br>the database. If &lt;file&gt; is not supplied, will output to STDOUT.<br><br>[--export_insert_size=&lt;rows&gt;]<br>: Define number of rows in single INSERT statement when doing SQL export.<br>You might want to change this depending on your database configuration<br>(e.g. if you need to do fewer queries). Default: 50<br><br>[--skip-tables=&lt;tables&gt;]<br>: Do not perform the replacement on specific tables. Use commas to<br>specify multiple tables. Wildcards are supported, e.g. `'wp_*options'` or `'wp_post*'`.<br><br>[--skip-columns=&lt;columns&gt;]<br>: Do not perform the replacement on specific columns. Use commas to<br>specify multiple columns.<br><br>[--include-columns=&lt;columns&gt;]<br>: Perform the replacement on specific columns. Use commas to<br>specify multiple columns.<br><br>[--precise]<br>: Force the use of PHP (instead of SQL) which is more thorough,<br>but slower.<br><br>[--recurse-objects]<br>: Enable recursing into objects to replace strings. Defaults to true;<br>pass --no-recurse-objects to disable.<br><br>[--verbose]<br>: Prints rows to the console as they're updated.<br><br>[--regex]<br>: Runs the search using a regular expression (without delimiters).<br>Warning: search-replace will take about 15-20x longer when using --regex.<br><br>[--regex-flags=&lt;regex-flags&gt;]<br>: Pass PCRE modifiers to regex search-replace (e.g. 'i' for case-insensitivity).<br><br>[--regex-delimiter=&lt;regex-delimiter&gt;]<br>: The delimiter to use for the regex. It must be escaped if it appears in the search string. The default value is the result of `chr(1)`.<br><br>[--regex-limit=&lt;regex-limit&gt;]<br>: The maximum possible replacements for the regex per row (or per unserialized data bit per row). Defaults to -1 (no limit).<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - count<br>---<br><br>[--report]<br>: Produce report. Defaults to true.<br><br>[--report-changed-only]<br>: Report changed fields only. Defaults to false, unless logging, when it defaults to true.<br><br>[--log[=&lt;file&gt;]]<br>: Log the items changed. If &lt;file&gt; is not supplied or is "-", will output to STDOUT.<br>Warning: causes a significant slow down, similar or worse to enabling --precise or --regex.<br><br>[--before_context=&lt;num&gt;]<br>: For logging, number of characters to display before the old match and the new replacement. Default 40. Ignored if not logging.<br><br>[--after_context=&lt;num&gt;]<br>: For logging, number of characters to display after the old match and the new replacement. Default 40. Ignored if not logging.<br><br>## EXAMPLES<br><br> # Search and replace but skip one column<br> $ wp search-replace 'http://example.test' 'http://example.com' --skip-columns=guid<br><br> # Run search/replace operation but dont save in database<br> $ wp search-replace 'foo' 'bar' wp_posts wp_postmeta wp_terms --dry-run<br><br> # Run case-insensitive regex search/replace operation (slow)<br> $ wp search-replace '\[foo id="([0-9]+)"' '[bar id="\1"' --regex --regex-flags='i'<br><br> # Turn your production multisite database into a local dev database<br> $ wp search-replace --url=example.com example.com example.test 'wp_*options' wp_blogs<br><br> # Search/replace to a SQL file without transforming the database<br> $ wp search-replace foo bar --export=database.sql<br><br> # Bash script: Search/replace production to development url (multisite compatible)<br> #!/bin/bash<br> if $(wp --url=http://example.com core is-installed --network); then<br> wp search-replace --url=http://example.com 'http://example.com' 'http://example.test' --recurse-objects --network --skip-columns=guid --skip-tables=wp_users<br> else<br> wp search-replace 'http://example.com' 'http://example.test' --recurse-objects --skip-columns=guid --skip-tables=wp_users<br> fi<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>old new &lt;table&gt;...[=null]</params>
  </command>
  <command>
    <name>server</name>
    <help><![CDATA[<strong>server</strong> [--host=&lt;host&gt;] [--port=&lt;port&gt;] [--docroot=&lt;path&gt;] [--config=&lt;file&gt;]<br/><br/>Launches PHP's built-in web server for a specific WordPress installation.<br/>Uses `php -S` to launch a web server serving the WordPress webroot.<br>&lt;http://php.net/manual/en/features.commandline.webserver.php&gt;<br><br>Importantly, PHP's built-in web server doesn't support `.htaccess` files.<br>If this is a requirement, please use a more advanced web server.<br><br>## OPTIONS<br><br>[--host=&lt;host&gt;]<br>: The hostname to bind the server to.<br>---<br>default: localhost<br>---<br><br>[--port=&lt;port&gt;]<br>: The port number to bind the server to.<br>---<br>default: 8080<br>---<br><br>[--docroot=&lt;path&gt;]<br>: The path to use as the document root. If the path global parameter is<br>set, the default value is it.<br><br>[--config=&lt;file&gt;]<br>: Configure the server with a specific .ini file.<br><br>## EXAMPLES<br><br> # Make the instance available on any address (with port 8080)<br> $ wp server --host=0.0.0.0<br> PHP 5.6.9 Development Server started at Tue May 24 01:27:11 2016<br> Listening on http://0.0.0.0:8080<br> Document root is /<br> Press Ctrl-C to quit.<br><br> # Run on port 80 (for multisite)<br> $ wp server --host=localhost.localdomain --port=80<br> PHP 5.6.9 Development Server started at Tue May 24 01:30:06 2016<br> Listening on http://localhost1.localdomain1:80<br> Document root is /<br> Press Ctrl-C to quit.<br><br> # Configure the server with a specific .ini file<br> $ wp server --config=development.ini<br> PHP 7.0.9 Development Server started at Mon Aug 22 12:09:04 2016<br> Listening on http://localhost:8080<br> Document root is /<br> Press Ctrl-C to quit.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>shell</name>
    <help><![CDATA[<strong>shell</strong> [--basic]<br/><br/>Opens an interactive PHP console for running and testing PHP code.<br/>`wp shell` allows you to evaluate PHP statements and expressions<br>interactively, from within a WordPress environment. Type a bit of code,<br>hit enter, and see the code execute right before you. Because WordPress<br>is loaded, you have access to all the functions, classes and globals<br>that you can use within a WordPress plugin, for example.<br><br>## OPTIONS<br><br>[--basic]<br>: Force the use of WP-CLI's built-in PHP REPL, even if the Boris or<br>PsySH PHP REPLs are available.<br><br>## EXAMPLES<br><br> # Call get_bloginfo() to get the name of the site.<br> $ wp shell<br> wp&gt; get_bloginfo( 'name' );<br> =&gt; string(6) "WP-CLI"<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>sidebar list</name>
    <help><![CDATA[<strong>sidebar list</strong> [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Lists registered sidebars.<br/>## OPTIONS<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - ids<br> - count<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each sidebar:<br><br>* name<br>* id<br>* description<br><br>These fields are optionally available:<br><br>* class<br>* before_widget<br>* after_widget<br>* before_title<br>* after_title<br><br>## EXAMPLES<br><br> $ wp sidebar list --fields=name,id --format=csv<br> name,id<br> "Widget Area",sidebar-1<br> "Inactive Widgets",wp_inactive_widgets<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>site activate</name>
    <help><![CDATA[<strong>site activate</strong> &lt;id&gt;...<br/><br/>Activates one or more sites.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: One or more IDs of sites to activate.<br><br>## EXAMPLES<br><br> $ wp site activate 123<br> Success: Site 123 activated.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>site archive</name>
    <help><![CDATA[<strong>site archive</strong> &lt;id&gt;...<br/><br/>Archives one or more sites.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: One or more IDs of sites to archive.<br><br>## EXAMPLES<br><br> $ wp site archive 123<br> Success: Site 123 archived.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>site create</name>
    <help><![CDATA[<strong>site create</strong> --slug=&lt;slug&gt; [--title=&lt;title&gt;] [--email=&lt;email&gt;] [--network_id=&lt;network-id&gt;] [--private] [--porcelain]<br/><br/>Creates a site in a multisite installation.<br/>## OPTIONS<br><br>--slug=&lt;slug&gt;<br>: Path for the new site. Subdomain on subdomain installs, directory on subdirectory installs.<br><br>[--title=&lt;title&gt;]<br>: Title of the new site. Default: prettified slug.<br><br>[--email=&lt;email&gt;]<br>: Email for Admin user. User will be created if none exists. Assignement to Super Admin if not included.<br><br>[--network_id=&lt;network-id&gt;]<br>: Network to associate new site with. Defaults to current network (typically 1).<br><br>[--private]<br>: If set, the new site will be non-public (not indexed)<br><br>[--porcelain]<br>: If set, only the site id will be output on success.<br><br>## EXAMPLES<br><br> $ wp site create --slug=example<br> Success: Site 3 created: http://www.example.com/example/<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>site deactivate</name>
    <help><![CDATA[<strong>site deactivate</strong> &lt;id&gt;...<br/><br/>Deactivates one or more sites.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: One or more IDs of sites to deactivate.<br><br>## EXAMPLES<br><br> $ wp site deactivate 123<br> Success: Site 123 deactivated.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>site delete</name>
    <help><![CDATA[<strong>site delete</strong> [&lt;site-id&gt;] [--slug=&lt;slug&gt;] [--yes] [--keep-tables]<br/><br/>Deletes a site in a multisite installation.<br/>## OPTIONS<br><br>[&lt;site-id&gt;]<br>: The id of the site to delete. If not provided, you must set the --slug parameter.<br><br>[--slug=&lt;slug&gt;]<br>: Path of the blog to be deleted. Subdomain on subdomain installs, directory on subdirectory installs.<br><br>[--yes]<br>: Answer yes to the confirmation message.<br><br>[--keep-tables]<br>: Delete the blog from the list, but don't drop it's tables.<br><br>## EXAMPLES<br><br> $ wp site delete 123<br> Are you sure you want to delete the http://www.example.com/example site? [y/n] y<br> Success: The site at 'http://www.example.com/example' was deleted.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>site-id[=null]</params>
  </command>
  <command>
    <name>site empty</name>
    <help><![CDATA[<strong>site empty</strong> [--uploads] [--yes]<br/><br/>Empties a site of its content (posts, comments, terms, and meta).<br/>Truncates posts, comments, and terms tables to empty a site of its<br>content. Doesn't affect site configuration (options) or users.<br><br>If running a persistent object cache, make sure to flush the cache<br>after emptying the site, as the cache values will be invalid otherwise.<br><br>To also empty custom database tables, you'll need to hook into command<br>execution:<br><br>```<br>WP_CLI::add_hook( 'after_invoke:site empty', function(){<br> global $wpdb;<br> foreach( array( 'p2p', 'p2pmeta' ) as $table ) {<br> $table = $wpdb-&gt;$table;<br> $wpdb-&gt;query( "TRUNCATE $table" );<br> }<br>});<br>```<br><br>## OPTIONS<br><br>[--uploads]<br>: Also delete *all* files in the site's uploads directory.<br><br>[--yes]<br>: Proceed to empty the site without a confirmation prompt.<br><br>## EXAMPLES<br><br> $ wp site empty<br> Are you sure you want to empty the site at http://www.example.com of all posts, comments, and terms? [y/n] y<br> Success: The site at 'http://www.example.com' was emptied.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>site list</name>
    <help><![CDATA[<strong>site list</strong> [--network=&lt;id&gt;] [--&lt;field&gt;=&lt;value&gt;] [--site__in=&lt;value&gt;] [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Lists all sites in a multisite installation.<br/>## OPTIONS<br><br>[--network=&lt;id&gt;]<br>: The network to which the sites belong.<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Filter by one or more fields (see "Available Fields" section). However,<br>'url' isn't an available filter, because it's created from domain + path.<br><br>[--site__in=&lt;value&gt;]<br>: Only list the sites with these blog_id values (comma-separated).<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field for each site.<br><br>[--fields=&lt;fields&gt;]<br>: Comma-separated list of fields to show.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - count<br> - ids<br> - json<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each site:<br><br>* blog_id<br>* url<br>* last_updated<br>* registered<br><br>These fields are optionally available:<br><br>* site_id<br>* domain<br>* path<br>* public<br>* archived<br>* mature<br>* spam<br>* deleted<br>* lang_id<br><br>## EXAMPLES<br><br> # Output a simple list of site URLs<br> $ wp site list --field=url<br> http://www.example.com/<br> http://www.example.com/subdir/<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>site mature</name>
    <help><![CDATA[<strong>site mature</strong> &lt;id&gt;...<br/><br/>Sets one or more sites as mature.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: One or more IDs of sites to set as mature.<br><br>## EXAMPLES<br><br> $ wp site mature 123<br> Success: Site 123 marked as mature.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>site meta add</name>
    <help><![CDATA[<strong>site meta add</strong> &lt;id&gt; &lt;key&gt; [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Add a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to create.<br><br>[&lt;value&gt;]<br>: The value of the meta field. If omitted, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key value[=null]</params>
  </command>
  <command>
    <name>site meta delete</name>
    <help><![CDATA[<strong>site meta delete</strong> &lt;id&gt; [&lt;key&gt;] [&lt;value&gt;] [--all]<br/><br/>Delete a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>[&lt;key&gt;]<br>: The name of the meta field to delete.<br><br>[&lt;value&gt;]<br>: The value to delete. If omitted, all rows with key will deleted.<br><br>[--all]<br>: Delete all meta for the object.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key[=null] value[=null]</params>
  </command>
  <command>
    <name>site meta get</name>
    <help><![CDATA[<strong>site meta get</strong> &lt;id&gt; &lt;key&gt; [--format=&lt;format&gt;]<br/><br/>Get meta field value.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to get.<br><br>[--format=&lt;format&gt;]<br>: Get value in a particular format.<br>---<br>default: var_export<br>options:<br> - var_export<br> - json<br> - yaml<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key</params>
  </command>
  <command>
    <name>site meta list</name>
    <help><![CDATA[<strong>site meta list</strong> &lt;id&gt; [--keys=&lt;keys&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;] [--orderby=&lt;fields&gt;] [--order=&lt;order&gt;] [--unserialize]<br/><br/>List all metadata associated with an object.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: ID for the object.<br><br>[--keys=&lt;keys&gt;]<br>: Limit output to metadata of specific keys.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific row fields. Defaults to id,meta_key,meta_value.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br> - count<br>---<br><br>[--orderby=&lt;fields&gt;]<br>: Set orderby which field.<br>---<br>default: id<br>options:<br> - id<br> - meta_key<br> - meta_value<br>---<br><br>[--order=&lt;order&gt;]<br>: Set ascending or descending order.<br>---<br>default: asc<br>options:<br> - asc<br> - desc<br>---<br><br>[--unserialize]<br>: Unserialize meta_value output.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id</params>
  </command>
  <command>
    <name>site meta patch</name>
    <help><![CDATA[<strong>site meta patch</strong> &lt;action&gt; &lt;id&gt; &lt;key&gt; &lt;key-path&gt;... [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Update a nested value for a meta field.<br/>## OPTIONS<br><br>&lt;action&gt;<br>: Patch action to perform.<br>---<br>options:<br> - insert<br> - update<br> - delete<br>---<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to update.<br><br>&lt;key-path&gt;...<br>: The name(s) of the keys within the value to locate the value to patch.<br><br>[&lt;value&gt;]<br>: The new value. If omitted, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>action id key &lt;key-path&gt;... value[=null]</params>
  </command>
  <command>
    <name>site meta pluck</name>
    <help><![CDATA[<strong>site meta pluck</strong> &lt;id&gt; &lt;key&gt; &lt;key-path&gt;... [--format=&lt;format&gt;]<br/><br/>Get a nested value from a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to get.<br><br>&lt;key-path&gt;...<br>: The name(s) of the keys within the value to locate the value to pluck.<br><br>[--format=&lt;format&gt;]<br>: The output format of the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br> - yaml<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key &lt;key-path&gt;...</params>
  </command>
  <command>
    <name>site meta update</name>
    <help><![CDATA[<strong>site meta update</strong> &lt;id&gt; &lt;key&gt; [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Update a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to update.<br><br>[&lt;value&gt;]<br>: The new value. If omitted, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key value[=null]</params>
  </command>
  <command>
    <name>site option add</name>
    <help><![CDATA[<strong>site option add</strong> &lt;key&gt; [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Adds a site option.<br/>## OPTIONS<br><br>&lt;key&gt;<br>: The name of the site option to add.<br><br>[&lt;value&gt;]<br>: The value of the site option to add. If ommited, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## EXAMPLES<br><br> # Create a site option by reading a JSON file<br> $ wp site option add my_option --format=json &lt; config.json<br> Success: Added 'my_option' site option.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key value[=null]</params>
  </command>
  <command>
    <name>site option delete</name>
    <help><![CDATA[<strong>site option delete</strong> &lt;key&gt;<br/><br/>Deletes a site option.<br/>## OPTIONS<br><br>&lt;key&gt;<br>: Key for the site option.<br><br>## EXAMPLES<br><br> $ wp site option delete my_option<br> Success: Deleted 'my_option' site option.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key</params>
  </command>
  <command>
    <name>site option get</name>
    <help><![CDATA[<strong>site option get</strong> &lt;key&gt; [--format=&lt;format&gt;]<br/><br/>Gets a site option.<br/>## OPTIONS<br><br>&lt;key&gt;<br>: Key for the site option.<br><br>[--format=&lt;format&gt;]<br>: Get value in a particular format.<br>---<br>default: var_export<br>options:<br> - var_export<br> - json<br> - yaml<br>---<br><br>## EXAMPLES<br><br> # Get site upload filetypes<br> $ wp site option get upload_filetypes<br> jpg jpeg png gif mov avi mpg<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key</params>
  </command>
  <command>
    <name>site option list</name>
    <help><![CDATA[<strong>site option list</strong> [--search=&lt;pattern&gt;] [--site_id=&lt;id&gt;] [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Lists site options.<br/>## OPTIONS<br><br>[--search=&lt;pattern&gt;]<br>: Use wildcards ( * and ? ) to match option name.<br><br>[--site_id=&lt;id&gt;]<br>: Limit options to those of a particular site id.<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value. total_bytes displays the total size of matching options in bytes.<br>---<br>default: table<br>options:<br> - table<br> - json<br> - csv<br> - count<br> - yaml<br> - total_bytes<br>---<br><br>## AVAILABLE FIELDS<br><br>This field will be displayed by default for each matching option:<br><br>* meta_key<br>* meta_value<br><br>These fields are optionally available:<br><br>* meta_id<br>* site_id<br>* size_bytes<br><br>## EXAMPLES<br><br> # List all site options begining with "i2f_"<br> $ wp site option list --search="i2f_*"<br> +-------------+--------------+<br> | meta_key | meta_value |<br> +-------------+--------------+<br> | i2f_version | 0.1.0 |<br> +-------------+--------------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>site option patch</name>
    <help><![CDATA[<strong>site option patch</strong> &lt;action&gt; &lt;key&gt; &lt;key-path&gt;... [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Updates a nested value in an option.<br/>## OPTIONS<br><br>&lt;action&gt;<br>: Patch action to perform.<br>---<br>options:<br> - insert<br> - update<br> - delete<br>---<br><br>&lt;key&gt;<br>: The option name.<br><br>&lt;key-path&gt;...<br>: The name(s) of the keys within the value to locate the value to patch.<br><br>[&lt;value&gt;]<br>: The new value. If omitted, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>action key &lt;key-path&gt;... value[=null]</params>
  </command>
  <command>
    <name>site option pluck</name>
    <help><![CDATA[<strong>site option pluck</strong> &lt;key&gt; &lt;key-path&gt;... [--format=&lt;format&gt;]<br/><br/>Gets a nested value from an option.<br/>## OPTIONS<br><br>&lt;key&gt;<br>: The option name.<br><br>&lt;key-path&gt;...<br>: The name(s) of the keys within the value to locate the value to pluck.<br><br>[--format=&lt;format&gt;]<br>: The output format of the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br> - yaml<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key &lt;key-path&gt;...</params>
  </command>
  <command>
    <name>site option update</name>
    <help><![CDATA[<strong>site option update</strong> &lt;key&gt; [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Updates a site option.<br/>## OPTIONS<br><br>&lt;key&gt;<br>: The name of the site option to update.<br><br>[&lt;value&gt;]<br>: The new value. If ommited, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## EXAMPLES<br><br> # Update a site option by reading from a file<br> $ wp site option update my_option &lt; value.txt<br> Success: Updated 'my_option' site option.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key value[=null]</params>
  </command>
  <command>
    <name>site private</name>
    <help><![CDATA[<strong>site private</strong> &lt;id&gt;...<br/><br/>Sets one or more sites as private.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: One or more IDs of sites to set as private.<br><br>## EXAMPLES<br><br> $ wp site private 123<br> Success: Site 123 marked as private.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>site public</name>
    <help><![CDATA[<strong>site public</strong> &lt;id&gt;...<br/><br/>Sets one or more sites as public.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: One or more IDs of sites to set as public.<br><br>## EXAMPLES<br><br> $ wp site public 123<br> Success: Site 123 marked as public.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>site spam</name>
    <help><![CDATA[<strong>site spam</strong> &lt;id&gt;...<br/><br/>Marks one or more sites as spam.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: One or more IDs of sites to be marked as spam.<br><br>## EXAMPLES<br><br> $ wp site spam 123<br> Success: Site 123 marked as spam.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>site switch-language</name>
    <help><![CDATA[<strong>site switch-language</strong> &lt;language&gt;<br/><br/>Activates a given language.<br/>## OPTIONS<br><br>&lt;language&gt;<br>: Language code to activate.<br><br>## EXAMPLES<br><br> $ wp site switch-language ja<br> Success: Language activated.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>language</params>
  </command>
  <command>
    <name>site unarchive</name>
    <help><![CDATA[<strong>site unarchive</strong> &lt;id&gt;...<br/><br/>Unarchives one or more sites.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: One or more IDs of sites to unarchive.<br><br>## EXAMPLES<br><br> $ wp site unarchive 123<br> Success: Site 123 unarchived.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>site unmature</name>
    <help><![CDATA[<strong>site unmature</strong> &lt;id&gt;...<br/><br/>Sets one or more sites as immature.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: One or more IDs of sites to set as unmature.<br><br>## EXAMPLES<br><br> $ wp site general 123<br> Success: Site 123 marked as unmature.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>site unspam</name>
    <help><![CDATA[<strong>site unspam</strong> &lt;id&gt;...<br/><br/>Removes one or more sites from spam.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: One or more IDs of sites to remove from spam.<br><br>## EXAMPLES<br><br> $ wp site unspam 123<br> Success: Site 123 removed from spam.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>super-admin add</name>
    <help><![CDATA[<strong>super-admin add</strong> &lt;user&gt;...<br/><br/>Grants super admin privileges to one or more users.<br/>## OPTIONS<br><br>&lt;user&gt;...<br>: One or more user IDs, user emails, or user logins.<br><br>## EXAMPLES<br><br> $ wp super-admin add superadmin2<br> Success: Granted super-admin capabilities.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>user ...</params>
  </command>
  <command>
    <name>super-admin list</name>
    <help><![CDATA[<strong>super-admin list</strong> [--format=&lt;format&gt;]<br/><br/>Lists users with super admin capabilities.<br/>## OPTIONS<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: list<br>options:<br> - list<br> - table<br> - csv<br> - json<br> - count<br> - yaml<br>---<br><br>## EXAMPLES<br><br> # List user with super-admin capabilities<br> $ wp super-admin list<br> supervisor<br> administrator<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>super-admin remove</name>
    <help><![CDATA[<strong>super-admin remove</strong> &lt;user&gt;...<br/><br/>Removes super admin privileges from one or more users.<br/>## OPTIONS<br><br>&lt;user&gt;...<br>: One or more user IDs, user emails, or user logins.<br><br>## EXAMPLES<br><br> $ wp super-admin remove superadmin2<br> Success: Revoked super-admin capabilities.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>user ...</params>
  </command>
  <command>
    <name>taxonomy get</name>
    <help><![CDATA[<strong>taxonomy get</strong> &lt;taxonomy&gt; [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Gets details about a registered taxonomy.<br/>## OPTIONS<br><br>&lt;taxonomy&gt;<br>: Taxonomy slug.<br><br>[--field=&lt;field&gt;]<br>: Instead of returning the whole taxonomy, returns the value of a single field.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific fields. Defaults to all fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for the specified taxonomy:<br><br>* name<br>* label<br>* description<br>* object_type<br>* show_tagcloud<br>* hierarchical<br>* public<br>* labels<br>* cap<br><br>These fields are optionally available:<br><br>* count<br><br>## EXAMPLES<br><br> # Get details of `category` taxonomy.<br> $ wp taxonomy get category --fields=name,label,object_type<br> +-------------+------------+<br> | Field | Value |<br> +-------------+------------+<br> | name | category |<br> | label | Categories |<br> | object_type | ["post"] |<br> +-------------+------------+<br><br> # Get capabilities of 'post_tag' taxonomy.<br> $ wp taxonomy get post_tag --field=cap<br> {"manage_terms":"manage_categories","edit_terms":"manage_categories","delete_terms":"manage_categories","assign_terms":"edit_posts"}<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>taxonomy</params>
  </command>
  <command>
    <name>taxonomy list</name>
    <help><![CDATA[<strong>taxonomy list</strong> [--&lt;field&gt;=&lt;value&gt;] [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Lists registered taxonomies.<br/>## OPTIONS<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Filter by one or more fields (see get_taxonomies() first parameter for a list of available fields).<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field for each taxonomy.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific taxonomy fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - count<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each term:<br><br>* name<br>* label<br>* description<br>* object_type<br>* show_tagcloud<br>* hierarchical<br>* public<br><br>These fields are optionally available:<br><br>* count<br><br>## EXAMPLES<br><br> # List all taxonomies.<br> $ wp taxonomy list --format=csv<br> name,label,description,object_type,show_tagcloud,hierarchical,public<br> category,Categories,,post,1,1,1<br> post_tag,Tags,,post,1,,1<br> nav_menu,"Navigation Menus",,nav_menu_item,,,<br> link_category,"Link Categories",,link,1,,<br> post_format,Format,,post,,,1<br><br> # List all taxonomies with 'post' object type.<br> $ wp taxonomy list --object_type=post --fields=name,public<br> +-------------+--------+<br> | name | public |<br> +-------------+--------+<br> | category | 1 |<br> | post_tag | 1 |<br> | post_format | 1 |<br> +-------------+--------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>term create</name>
    <help><![CDATA[<strong>term create</strong> &lt;taxonomy&gt; &lt;term&gt; [--slug=&lt;slug&gt;] [--description=&lt;description&gt;] [--parent=&lt;term-id&gt;] [--porcelain]<br/><br/>Creates a new term.<br/>## OPTIONS<br><br>&lt;taxonomy&gt;<br>: Taxonomy for the new term.<br><br>&lt;term&gt;<br>: A name for the new term.<br><br>[--slug=&lt;slug&gt;]<br>: A unique slug for the new term. Defaults to sanitized version of name.<br><br>[--description=&lt;description&gt;]<br>: A description for the new term.<br><br>[--parent=&lt;term-id&gt;]<br>: A parent for the new term.<br><br>[--porcelain]<br>: Output just the new term id.<br><br>## EXAMPLES<br><br> # Create a new category "Apple" with a description.<br> $ wp term create category Apple --description="A type of fruit"<br> Success: Created category 199.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>taxonomy term</params>
  </command>
  <command>
    <name>term delete</name>
    <help><![CDATA[<strong>term delete</strong> &lt;taxonomy&gt; &lt;term&gt;... [--by=&lt;field&gt;]<br/><br/>Deletes an existing term.<br/>Errors if the term doesn't exist, or there was a problem in deleting it.<br><br>## OPTIONS<br><br>&lt;taxonomy&gt;<br>: Taxonomy of the term to delete.<br><br>&lt;term&gt;...<br>: One or more IDs or slugs of terms to delete.<br><br>[--by=&lt;field&gt;]<br>: Explicitly handle the term value as a slug or id.<br>---<br>default: id<br>options:<br> - slug<br> - id<br>---<br><br>## EXAMPLES<br><br> # Delete post category by id<br> $ wp term delete category 15<br> Deleted category 15.<br> Success: Deleted 1 of 1 terms.<br><br> # Delete post category by slug<br> $ wp term delete category apple --by=slug<br> Deleted category 15.<br> Success: Deleted 1 of 1 terms.<br><br> # Delete all post tags<br> $ wp term list post_tag --field=term_id | xargs wp term delete post_tag<br> Deleted post_tag 159.<br> Deleted post_tag 160.<br> Deleted post_tag 161.<br> Success: Deleted 3 of 3 terms.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>taxonomy &lt;term&gt;...</params>
  </command>
  <command>
    <name>term generate</name>
    <help><![CDATA[<strong>term generate</strong> &lt;taxonomy&gt; [--count=&lt;number&gt;] [--max_depth=&lt;number&gt;] [--format=&lt;format&gt;]<br/><br/>Generates some terms.<br/>Creates a specified number of new terms with dummy data.<br><br>## OPTIONS<br><br>&lt;taxonomy&gt;<br>: The taxonomy for the generated terms.<br><br>[--count=&lt;number&gt;]<br>: How many terms to generate?<br>---<br>default: 100<br>---<br><br>[--max_depth=&lt;number&gt;]<br>: Generate child terms down to a certain depth.<br>---<br>default: 1<br>---<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: progress<br>options:<br> - progress<br> - ids<br>---<br><br>## EXAMPLES<br><br> # Generate post categories.<br> $ wp term generate category --count=10<br> Generating terms 100% [=========] 0:02 / 0:02<br><br> # Add meta to every generated term.<br> $ wp term generate category --format=ids --count=3 | xargs -d ' ' -I % wp term meta add % foo bar<br> Success: Added custom field.<br> Success: Added custom field.<br> Success: Added custom field.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>taxonomy</params>
  </command>
  <command>
    <name>term get</name>
    <help><![CDATA[<strong>term get</strong> &lt;taxonomy&gt; &lt;term&gt; [--by=&lt;field&gt;] [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Gets details about a term.<br/>## OPTIONS<br><br>&lt;taxonomy&gt;<br>: Taxonomy of the term to get<br><br>&lt;term&gt;<br>: ID or slug of the term to get<br><br>[--by=&lt;field&gt;]<br>: Explicitly handle the term value as a slug or id.<br>---<br>default: id<br>options:<br> - slug<br> - id<br>---<br><br>[--field=&lt;field&gt;]<br>: Instead of returning the whole term, returns the value of a single field.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific fields. Defaults to all fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br>---<br><br>## EXAMPLES<br><br> # Get details about a category with id 199.<br> $ wp term get category 199 --format=json<br> {"term_id":199,"name":"Apple","slug":"apple","term_group":0,"term_taxonomy_id":199,"taxonomy":"category","description":"A type of fruit","parent":0,"count":0,"filter":"raw"}<br><br> # Get details about a category with slug apple.<br> $ wp term get category apple --by=slug --format=json<br> {"term_id":199,"name":"Apple","slug":"apple","term_group":0,"term_taxonomy_id":199,"taxonomy":"category","description":"A type of fruit","parent":0,"count":0,"filter":"raw"}<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>taxonomy term</params>
  </command>
  <command>
    <name>term list</name>
    <help><![CDATA[<strong>term list</strong> &lt;taxonomy&gt;... [--&lt;field&gt;=&lt;value&gt;] [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Lists terms in a taxonomy.<br/>## OPTIONS<br><br>&lt;taxonomy&gt;...<br>: List terms of one or more taxonomies<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Filter by one or more fields (see get_terms() $args parameter for a list of fields).<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field for each term.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - ids<br> - json<br> - count<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each term:<br><br>* term_id<br>* term_taxonomy_id<br>* name<br>* slug<br>* description<br>* parent<br>* count<br><br>These fields are optionally available:<br><br>* url<br><br>## EXAMPLES<br><br> # List post categories<br> $ wp term list category --format=csv<br> term_id,term_taxonomy_id,name,slug,description,parent,count<br> 2,2,aciform,aciform,,0,1<br> 3,3,antiquarianism,antiquarianism,,0,1<br> 4,4,arrangement,arrangement,,0,1<br> 5,5,asmodeus,asmodeus,,0,1<br><br> # List post tags<br> $ wp term list post_tag --fields=name,slug<br> +-----------+-------------+<br> | name | slug |<br> +-----------+-------------+<br> | 8BIT | 8bit |<br> | alignment | alignment-2 |<br> | Articles | articles |<br> | aside | aside |<br> +-----------+-------------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;taxonomy&gt;...</params>
  </command>
  <command>
    <name>term meta add</name>
    <help><![CDATA[<strong>term meta add</strong> &lt;id&gt; &lt;key&gt; [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Add a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to create.<br><br>[&lt;value&gt;]<br>: The value of the meta field. If omitted, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key value[=null]</params>
  </command>
  <command>
    <name>term meta delete</name>
    <help><![CDATA[<strong>term meta delete</strong> &lt;id&gt; [&lt;key&gt;] [&lt;value&gt;] [--all]<br/><br/>Delete a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>[&lt;key&gt;]<br>: The name of the meta field to delete.<br><br>[&lt;value&gt;]<br>: The value to delete. If omitted, all rows with key will deleted.<br><br>[--all]<br>: Delete all meta for the object.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key[=null] value[=null]</params>
  </command>
  <command>
    <name>term meta get</name>
    <help><![CDATA[<strong>term meta get</strong> &lt;id&gt; &lt;key&gt; [--format=&lt;format&gt;]<br/><br/>Get meta field value.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to get.<br><br>[--format=&lt;format&gt;]<br>: Get value in a particular format.<br>---<br>default: var_export<br>options:<br> - var_export<br> - json<br> - yaml<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key</params>
  </command>
  <command>
    <name>term meta list</name>
    <help><![CDATA[<strong>term meta list</strong> &lt;id&gt; [--keys=&lt;keys&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;] [--orderby=&lt;fields&gt;] [--order=&lt;order&gt;] [--unserialize]<br/><br/>List all metadata associated with an object.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: ID for the object.<br><br>[--keys=&lt;keys&gt;]<br>: Limit output to metadata of specific keys.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific row fields. Defaults to id,meta_key,meta_value.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br> - count<br>---<br><br>[--orderby=&lt;fields&gt;]<br>: Set orderby which field.<br>---<br>default: id<br>options:<br> - id<br> - meta_key<br> - meta_value<br>---<br><br>[--order=&lt;order&gt;]<br>: Set ascending or descending order.<br>---<br>default: asc<br>options:<br> - asc<br> - desc<br>---<br><br>[--unserialize]<br>: Unserialize meta_value output.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id</params>
  </command>
  <command>
    <name>term meta patch</name>
    <help><![CDATA[<strong>term meta patch</strong> &lt;action&gt; &lt;id&gt; &lt;key&gt; &lt;key-path&gt;... [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Update a nested value for a meta field.<br/>## OPTIONS<br><br>&lt;action&gt;<br>: Patch action to perform.<br>---<br>options:<br> - insert<br> - update<br> - delete<br>---<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to update.<br><br>&lt;key-path&gt;...<br>: The name(s) of the keys within the value to locate the value to patch.<br><br>[&lt;value&gt;]<br>: The new value. If omitted, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>action id key &lt;key-path&gt;... value[=null]</params>
  </command>
  <command>
    <name>term meta pluck</name>
    <help><![CDATA[<strong>term meta pluck</strong> &lt;id&gt; &lt;key&gt; &lt;key-path&gt;... [--format=&lt;format&gt;]<br/><br/>Get a nested value from a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to get.<br><br>&lt;key-path&gt;...<br>: The name(s) of the keys within the value to locate the value to pluck.<br><br>[--format=&lt;format&gt;]<br>: The output format of the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br> - yaml<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key &lt;key-path&gt;...</params>
  </command>
  <command>
    <name>term meta update</name>
    <help><![CDATA[<strong>term meta update</strong> &lt;id&gt; &lt;key&gt; [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Update a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to update.<br><br>[&lt;value&gt;]<br>: The new value. If omitted, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key value[=null]</params>
  </command>
  <command>
    <name>term migrate</name>
    <help><![CDATA[<strong>term migrate</strong> &lt;term&gt; [--by=&lt;field&gt;] [--from=&lt;taxonomy&gt;] [--to=&lt;taxonomy&gt;]<br/><br/>Migrate a term of a taxonomy to another taxonomy.<br/>## OPTIONS<br><br>&lt;term&gt;<br>: Slug or ID of the term to migrate.<br><br>[--by=&lt;field&gt;]<br>: Explicitly handle the term value as a slug or id.<br>---<br>default: id<br>options:<br> - slug<br> - id<br>---<br><br>[--from=&lt;taxonomy&gt;]<br>: Taxonomy slug of the term to migrate.<br><br>[--to=&lt;taxonomy&gt;]<br>: Taxonomy slug to migrate to.<br><br>## EXAMPLES<br><br> # Migrate a category's term (video) to tag taxonomy.<br> $ wp term migrate 9190 --from=category --to=post_tag<br> Term '9190' migrated!<br> Old instance of term '9190' removed from its original taxonomy.<br> Success: Migrated the term '9190' from taxonomy 'category' to taxonomy 'post_tag' for 1 posts<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>term</params>
  </command>
  <command>
    <name>term recount</name>
    <help><![CDATA[<strong>term recount</strong> &lt;taxonomy&gt;...<br/><br/>Recalculates number of posts assigned to each term.<br/>In instances where manual updates are made to the terms assigned to<br>posts in the database, the number of posts associated with a term<br>can become out-of-sync with the actual number of posts.<br><br>This command runs wp_update_term_count() on the taxonomy's terms<br>to bring the count back to the correct value.<br><br>## OPTIONS<br><br>&lt;taxonomy&gt;...<br>: One or more taxonomies to recalculate.<br><br>## EXAMPLES<br><br> # Recount posts assigned to each categories and tags<br> $ wp term recount category post_tag<br> Success: Updated category term count.<br> Success: Updated post_tag term count.<br><br> # Recount all listed taxonomies<br> $ wp taxonomy list --field=name | xargs wp term recount<br> Success: Updated category term count.<br> Success: Updated post_tag term count.<br> Success: Updated nav_menu term count.<br> Success: Updated link_category term count.<br> Success: Updated post_format term count.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>taxonomy ...</params>
  </command>
  <command>
    <name>term update</name>
    <help><![CDATA[<strong>term update</strong> &lt;taxonomy&gt; &lt;term&gt; [--by=&lt;field&gt;] [--name=&lt;name&gt;] [--slug=&lt;slug&gt;] [--description=&lt;description&gt;] [--parent=&lt;term-id&gt;]<br/><br/>Updates an existing term.<br/>## OPTIONS<br><br>&lt;taxonomy&gt;<br>: Taxonomy of the term to update.<br><br>&lt;term&gt;<br>: ID or slug for the term to update.<br><br>[--by=&lt;field&gt;]<br>: Explicitly handle the term value as a slug or id.<br>---<br>default: id<br>options:<br> - slug<br> - id<br>---<br><br>[--name=&lt;name&gt;]<br>: A new name for the term.<br><br>[--slug=&lt;slug&gt;]<br>: A new slug for the term.<br><br>[--description=&lt;description&gt;]<br>: A new description for the term.<br><br>[--parent=&lt;term-id&gt;]<br>: A new parent for the term.<br><br>## EXAMPLES<br><br> # Change category with id 15 to use the name "Apple"<br> $ wp term update category 15 --name=Apple<br> Success: Term updated.<br><br> # Change category with slug apple to use the name "Apple"<br> $ wp term update category apple --by=slug --name=Apple<br> Success: Term updated.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>taxonomy term</params>
  </command>
  <command>
    <name>theme activate</name>
    <help><![CDATA[<strong>theme activate</strong> &lt;theme&gt;<br/><br/>Activates a theme.<br/>## OPTIONS<br><br>&lt;theme&gt;<br>: The theme to activate.<br><br>## EXAMPLES<br><br> $ wp theme activate twentysixteen<br> Success: Switched to 'Twenty Sixteen' theme.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>theme</params>
  </command>
  <command>
    <name>theme delete</name>
    <help><![CDATA[<strong>theme delete</strong> [&lt;theme&gt;...] [--all] [--force]<br/><br/>Deletes one or more themes.<br/>Removes the theme or themes from the filesystem.<br><br>## OPTIONS<br><br>[&lt;theme&gt;...]<br>: One or more themes to delete.<br><br>[--all]<br>: If set, all themes will be deleted except active theme.<br><br>[--force]<br>: To delete active theme use this.<br><br>## EXAMPLES<br><br> $ wp theme delete twentytwelve<br> Deleted 'twentytwelve' theme.<br> Success: Deleted 1 of 1 themes.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;theme&gt;...[=null]</params>
  </command>
  <command>
    <name>theme disable</name>
    <help><![CDATA[<strong>theme disable</strong> &lt;theme&gt; [--network]<br/><br/>Disables a theme on a WordPress multisite install.<br/>Removes ability for a theme to be activated from the dashboard of a site<br>on a WordPress multisite install.<br><br>## OPTIONS<br><br>&lt;theme&gt;<br>: The theme to disable.<br><br>[--network]<br>: If set, the theme is disabled on the network level. Note that<br>individual sites may still have this theme enabled if it was<br>enabled for them independently.<br><br>## EXAMPLES<br><br> # Disable theme<br> $ wp theme disable twentysixteen<br> Success: Disabled the 'Twenty Sixteen' theme.<br><br> # Disable theme in network level<br> $ wp theme disable twentysixteen --network<br> Success: Network disabled the 'Twenty Sixteen' theme.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>theme</params>
  </command>
  <command>
    <name>theme enable</name>
    <help><![CDATA[<strong>theme enable</strong> &lt;theme&gt; [--network] [--activate]<br/><br/>Enables a theme on a WordPress multisite install.<br/>Permits theme to be activated from the dashboard of a site on a WordPress<br>multisite install.<br><br>## OPTIONS<br><br>&lt;theme&gt;<br>: The theme to enable.<br><br>[--network]<br>: If set, the theme is enabled for the entire network<br><br>[--activate]<br>: If set, the theme is activated for the current site. Note that<br>the "network" flag has no influence on this.<br><br>## EXAMPLES<br><br> # Enable theme<br> $ wp theme enable twentysixteen<br> Success: Enabled the 'Twenty Sixteen' theme.<br><br> # Network enable theme<br> $ wp theme enable twentysixteen --network<br> Success: Network enabled the 'Twenty Sixteen' theme.<br><br> # Network enable and activate theme for current site<br> $ wp theme enable twentysixteen --activate<br> Success: Enabled the 'Twenty Sixteen' theme.<br> Success: Switched to 'Twenty Sixteen' theme.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>theme</params>
  </command>
  <command>
    <name>theme get</name>
    <help><![CDATA[<strong>theme get</strong> &lt;theme&gt; [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Gets details about a theme.<br/>## OPTIONS<br><br>&lt;theme&gt;<br>: The theme to get.<br><br>[--field=&lt;field&gt;]<br>: Instead of returning the whole theme, returns the value of a single field.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific fields. Defaults to all fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br>---<br><br>## EXAMPLES<br><br> $ wp theme get twentysixteen --fields=name,title,version<br> +---------+----------------+<br> | Field | Value |<br> +---------+----------------+<br> | name | Twenty Sixteen |<br> | title | Twenty Sixteen |<br> | version | 1.2 |<br> +---------+----------------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>theme</params>
  </command>
  <command>
    <name>theme install</name>
    <help><![CDATA[<strong>theme install</strong> &lt;theme|zip|url&gt;... [--version=&lt;version&gt;] [--force] [--activate]<br/><br/>Installs one or more themes.<br/>## OPTIONS<br><br>&lt;theme|zip|url&gt;...<br>: One or more themes to install. Accepts a theme slug, the path to a local zip file, or a URL to a remote zip file.<br><br>[--version=&lt;version&gt;]<br>: If set, get that particular version from wordpress.org, instead of the<br>stable version.<br><br>[--force]<br>: If set, the command will overwrite any installed version of the theme, without prompting<br>for confirmation.<br><br>[--activate]<br>: If set, the theme will be activated immediately after install.<br><br>## EXAMPLES<br><br> # Install the latest version from wordpress.org and activate<br> $ wp theme install twentysixteen --activate<br> Installing Twenty Sixteen (1.2)<br> Downloading install package from http://downloads.wordpress.org/theme/twentysixteen.1.2.zip...<br> Unpacking the package...<br> Installing the theme...<br> Theme installed successfully.<br> Activating 'twentysixteen'...<br> Success: Switched to 'Twenty Sixteen' theme.<br><br> # Install from a local zip file<br> $ wp theme install ../my-theme.zip<br><br> # Install from a remote zip file<br> $ wp theme install http://s3.amazonaws.com/bucketname/my-theme.zip?AWSAccessKeyId=123&Expires=456&Signature=abcdef<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;theme|zip|url&gt;...</params>
  </command>
  <command>
    <name>theme is-active</name>
    <help><![CDATA[<strong>theme is-active</strong> &lt;theme&gt;<br/><br/>Checks if a given theme is active.<br/>Returns exit code 0 when active, 1 when not active.<br><br>## OPTIONS<br><br>&lt;theme&gt;<br>: The plugin to check.<br><br>## EXAMPLES<br><br> # Check whether theme is Active; exit status 0 if active, otherwise 1<br> $ wp theme is-active twentyfifteen<br> $ echo $?<br> 1<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>theme</params>
  </command>
  <command>
    <name>theme is-installed</name>
    <help><![CDATA[<strong>theme is-installed</strong> &lt;theme&gt;<br/><br/>Checks if a given theme is installed.<br/>Returns exit code 0 when installed, 1 when uninstalled.<br><br>## OPTIONS<br><br>&lt;theme&gt;<br>: The theme to check.<br><br>## EXAMPLES<br><br> # Check whether theme is installed; exit status 0 if installed, otherwise 1<br> $ wp theme is-installed hello<br> $ echo $?<br> 1<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>theme</params>
  </command>
  <command>
    <name>theme list</name>
    <help><![CDATA[<strong>theme list</strong> [--&lt;field&gt;=&lt;value&gt;] [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Gets a list of themes.<br/>## OPTIONS<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Filter results based on the value of a field.<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field for each theme.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - count<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each theme:<br><br>* name<br>* status<br>* update<br>* version<br><br>These fields are optionally available:<br><br>* update_version<br>* update_package<br>* update_id<br>* title<br>* description<br><br>## EXAMPLES<br><br> # List themes<br> $ wp theme list --status=inactive --format=csv<br> name,status,update,version<br> twentyfourteen,inactive,none,1.7<br> twentysixteen,inactive,available,1.1<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>theme mod get</name>
    <help><![CDATA[<strong>theme mod get</strong> [&lt;mod&gt;...] [--field=&lt;field&gt;] [--all] [--format=&lt;format&gt;]<br/><br/>Gets one or more theme mods.<br/>## OPTIONS<br><br>[&lt;mod&gt;...]<br>: One or more mods to get.<br><br>[--field=&lt;field&gt;]<br>: Returns the value of a single field.<br><br>[--all]<br>: List all theme mods<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - json<br> - csv<br> - yaml<br>---<br><br>## EXAMPLES<br><br> # Get all theme mods.<br> $ wp theme mod get --all<br> +------------------+---------+<br> | key | value |<br> +------------------+---------+<br> | background_color | dd3333 |<br> | link_color | #dd9933 |<br> | main_text_color | #8224e3 |<br> +------------------+---------+<br><br> # Get single theme mod in JSON format.<br> $ wp theme mod get background_color --format=json<br> [{"key":"background_color","value":"dd3333"}]<br><br> # Get value of a single theme mod.<br> $ wp theme mod get background_color --field=value<br> dd3333<br><br> # Get multiple theme mods.<br> $ wp theme mod get background_color header_textcolor<br> +------------------+--------+<br> | key | value |<br> +------------------+--------+<br> | background_color | dd3333 |<br> | header_textcolor | |<br> +------------------+--------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;mod&gt;...[=null]</params>
  </command>
  <command>
    <name>theme mod list</name>
    <help><![CDATA[<strong>theme mod list</strong> [--field=&lt;field&gt;] [--format=&lt;format&gt;]<br/><br/>Gets a list of theme mods.<br/>## OPTIONS<br><br>[--field=&lt;field&gt;]<br>: Returns the value of a single field.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - json<br> - csv<br> - yaml<br>---<br><br>## EXAMPLES<br><br> # Gets a list of theme mods.<br> $ wp theme mod list<br> +------------------+---------+<br> | key | value |<br> +------------------+---------+<br> | background_color | dd3333 |<br> | link_color | #dd9933 |<br> | main_text_color | #8224e3 |<br> +------------------+---------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>theme mod remove</name>
    <help><![CDATA[<strong>theme mod remove</strong> [&lt;mod&gt;...] [--all]<br/><br/>Removes one or more theme mods.<br/>## OPTIONS<br><br>[&lt;mod&gt;...]<br>: One or more mods to remove.<br><br>[--all]<br>: Remove all theme mods.<br><br>## EXAMPLES<br><br> # Remove all theme mods.<br> $ wp theme mod remove --all<br> Success: Theme mods removed.<br><br> # Remove single theme mod.<br> $ wp theme mod remove background_color<br> Success: 1 mod removed.<br><br> # Remove multiple theme mods.<br> $ wp theme mod remove background_color header_textcolor<br> Success: 2 mods removed.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;mod&gt;...[=null]</params>
  </command>
  <command>
    <name>theme mod set</name>
    <help><![CDATA[<strong>theme mod set</strong> &lt;mod&gt; &lt;value&gt;<br/><br/>Sets the value of a theme mod.<br/>## OPTIONS<br><br>&lt;mod&gt;<br>: The name of the theme mod to set or update.<br><br>&lt;value&gt;<br>: The new value.<br><br>## EXAMPLES<br><br> # Set theme mod<br> $ wp theme mod set background_color 000000<br> Success: Theme mod background_color set to 000000<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>mod value</params>
  </command>
  <command>
    <name>theme path</name>
    <help><![CDATA[<strong>theme path</strong> [&lt;theme&gt;] [--dir]<br/><br/>Gets the path to a theme or to the theme directory.<br/>## OPTIONS<br><br>[&lt;theme&gt;]<br>: The theme to get the path to. Path includes "style.css" file.<br>If not set, will return the path to the themes directory.<br><br>[--dir]<br>: If set, get the path to the closest parent directory, instead of the<br>theme's "style.css" file.<br><br>## EXAMPLES<br><br> # Get theme path<br> $ wp theme path<br> /var/www/example.com/public_html/wp-content/themes<br><br> # Change directory to theme path<br> $ cd $(wp theme path)<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>theme[=null]</params>
  </command>
  <command>
    <name>theme search</name>
    <help><![CDATA[<strong>theme search</strong> &lt;search&gt; [--page=&lt;page&gt;] [--per-page=&lt;per-page&gt;] [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Searches the WordPress.org theme directory.<br/>Displays themes in the WordPress.org theme directory matching a given<br>search query.<br><br>## OPTIONS<br><br>&lt;search&gt;<br>: The string to search for.<br><br>[--page=&lt;page&gt;]<br>: Optional page to display.<br>---<br>default: 1<br>---<br><br>[--per-page=&lt;per-page&gt;]<br>: Optional number of results to display. Defaults to 10.<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field for each theme.<br><br>[--fields=&lt;fields&gt;]<br>: Ask for specific fields from the API. Defaults to name,slug,author,rating. Acceptable values:<br><br> **name**: Theme Name<br> **slug**: Theme Slug<br> **version**: Current Version Number<br> **author**: Theme Author<br> **preview_url**: Theme Preview URL<br> **screenshot_url**: Theme Screenshot URL<br> **rating**: Theme Rating<br> **num_ratings**: Number of Theme Ratings<br> **homepage**: Theme Author's Homepage<br> **description**: Theme Description<br> **url**: Theme's URL on wordpress.org<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - count<br> - yaml<br>---<br><br>## EXAMPLES<br><br> $ wp theme search photo --per-page=6<br> Success: Showing 6 of 203 themes.<br> +----------------------+----------------------+--------+<br> | name | slug | rating |<br> +----------------------+----------------------+--------+<br> | Photos | photos | 100 |<br> | Infinite Photography | infinite-photography | 100 |<br> | PhotoBook | photobook | 100 |<br> | BG Photo Frame | bg-photo-frame | 0 |<br> | fPhotography | fphotography | 0 |<br> | Photo Perfect | photo-perfect | 98 |<br> +----------------------+----------------------+--------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>search</params>
  </command>
  <command>
    <name>theme status</name>
    <help><![CDATA[<strong>theme status</strong> [&lt;theme&gt;]<br/><br/>Reveals the status of one or all themes.<br/>## OPTIONS<br><br>[&lt;theme&gt;]<br>: A particular theme to show the status for.<br><br>## EXAMPLES<br><br> $ wp theme status twentysixteen<br> Theme twentysixteen details:<br> Name: Twenty Sixteen<br> Status: Inactive<br> Version: 1.2<br> Author: the WordPress team<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>theme[=null]</params>
  </command>
  <command>
    <name>theme update</name>
    <help><![CDATA[<strong>theme update</strong> [&lt;theme&gt;...] [--all] [--exclude=&lt;theme-names&gt;] [--format=&lt;format&gt;] [--version=&lt;version&gt;] [--dry-run]<br/><br/>Updates one or more themes.<br/>## OPTIONS<br><br>[&lt;theme&gt;...]<br>: One or more themes to update.<br><br>[--all]<br>: If set, all themes that have updates will be updated.<br><br>[--exclude=&lt;theme-names&gt;]<br>: Comma separated list of theme names that should be excluded from updating.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - summary<br>---<br><br>[--version=&lt;version&gt;]<br>: If set, the theme will be updated to the specified version.<br><br>[--dry-run]<br>: Preview which themes would be updated.<br><br>## EXAMPLES<br><br> # Update multiple themes<br> $ wp theme update twentyfifteen twentysixteen<br> Downloading update from https://downloads.wordpress.org/theme/twentyfifteen.1.5.zip...<br> Unpacking the update...<br> Installing the latest version...<br> Removing the old version of the theme...<br> Theme updated successfully.<br> Downloading update from https://downloads.wordpress.org/theme/twentysixteen.1.2.zip...<br> Unpacking the update...<br> Installing the latest version...<br> Removing the old version of the theme...<br> Theme updated successfully.<br> +---------------+-------------+-------------+---------+<br> | name | old_version | new_version | status |<br> +---------------+-------------+-------------+---------+<br> | twentyfifteen | 1.4 | 1.5 | Updated |<br> | twentysixteen | 1.1 | 1.2 | Updated |<br> +---------------+-------------+-------------+---------+<br> Success: Updated 2 of 2 themes.<br><br> # Exclude themes updates when bulk updating the themes<br> $ wp theme update --all --exclude=twentyfifteen<br> Downloading update from https://downloads.wordpress.org/theme/astra.1.0.5.1.zip...<br> Unpacking the update...<br> Installing the latest version...<br> Removing the old version of the theme...<br> Theme updated successfully.<br> Downloading update from https://downloads.wordpress.org/theme/twentyseventeen.1.2.zip...<br> Unpacking the update...<br> Installing the latest version...<br> Removing the old version of the theme...<br> Theme updated successfully.<br> +-----------------+----------+---------+----------------+<br> | name | status | version | update_version |<br> +-----------------+----------+---------+----------------+<br> | astra | inactive | 1.0.1 | 1.0.5.1 |<br> | twentyseventeen | inactive | 1.1 | 1.2 |<br> +-----------------+----------+---------+----------------+<br> Success: Updated 2 of 2 themes.<br><br> # Update all themes<br> $ wp theme update --all<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;theme&gt;...[=null]</params>
  </command>
  <command>
    <name>transient delete</name>
    <help><![CDATA[<strong>transient delete</strong> [&lt;key&gt;] [--network] [--all] [--expired]<br/><br/>Deletes a transient value.<br/>For a more complete explanation of the transient cache, including the<br>network|site cache, please see docs for `wp transient`.<br><br>## OPTIONS<br><br>[&lt;key&gt;]<br>: Key for the transient.<br><br>[--network]<br>: Delete the value of a network|site transient. On single site, this is<br>is a specially-named cache key. On multisite, this is a global cache<br>(instead of local to the site).<br><br>[--all]<br>: Delete all transients.<br><br>[--expired]<br>: Delete all expired transients.<br><br>## EXAMPLES<br><br> # Delete transient.<br> $ wp transient delete sample_key<br> Success: Transient deleted.<br><br> # Delete expired transients.<br> $ wp transient delete --expired<br> Success: 12 expired transients deleted from the database.<br><br> # Delete expired site transients.<br> $ wp transient delete --expired --network<br> Success: 1 expired transient deleted from the database.<br><br> # Delete all transients.<br> $ wp transient delete --all<br> Success: 14 transients deleted from the database.<br><br> # Delete all site transients.<br> $ wp transient delete --all --network<br> Success: 2 transients deleted from the database.<br><br> # Delete all transients in a multsite.<br> $ wp transient delete --all --network && wp site list --field=url | xargs -n1 -I % wp --url=% transient delete --all<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key[=null]</params>
  </command>
  <command>
    <name>transient get</name>
    <help><![CDATA[<strong>transient get</strong> &lt;key&gt; [--format=&lt;format&gt;] [--network]<br/><br/>Gets a transient value.<br/>For a more complete explanation of the transient cache, including the<br>network|site cache, please see docs for `wp transient`.<br><br>## OPTIONS<br><br>&lt;key&gt;<br>: Key for the transient.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br>---<br><br>[--network]<br>: Get the value of a network|site transient. On single site, this is<br>is a specially-named cache key. On multisite, this is a global cache<br>(instead of local to the site).<br><br>## EXAMPLES<br><br> $ wp transient get sample_key<br> test data<br><br> $ wp transient get random_key<br> Warning: Transient with key "random_key" is not set.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key</params>
  </command>
  <command>
    <name>transient list</name>
    <help><![CDATA[<strong>transient list</strong> [--search=&lt;pattern&gt;] [--exclude=&lt;pattern&gt;] [--network] [--unserialize] [--human-readable] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Lists transients and their values.<br/>## OPTIONS<br><br>[--search=&lt;pattern&gt;]<br>: Use wildcards ( * and ? ) to match transient name.<br><br>[--exclude=&lt;pattern&gt;]<br>: Pattern to exclude. Use wildcards ( * and ? ) to match transient name.<br><br>[--network]<br>: Get the values of network|site transients. On single site, this is<br>a specially-named cache key. On multisite, this is a global cache<br>(instead of local to the site).<br><br>[--unserialize]<br>: Unserialize transient values in output.<br><br>[--human-readable]<br>: Human-readable output for expirations.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: table<br>options:<br> - table<br> - json<br> - csv<br> - count<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>This field will be displayed by default for each matching option:<br><br>* name<br>* value<br>* expiration<br><br>## EXAMPLES<br><br> # List all transients<br> $ wp transient list<br> +------+-------+---------------+<br> | name | value | expiration |<br> +------+-------+---------------+<br> | foo | bar | 39 mins |<br> | foo2 | bar2 | no expiration |<br> | foo3 | bar2 | expired |<br> | foo4 | bar4 | 4 hours |<br> +------+-------+---------------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>transient set</name>
    <help><![CDATA[<strong>transient set</strong> &lt;key&gt; &lt;value&gt; [&lt;expiration&gt;] [--network]<br/><br/>Sets a transient value.<br/>`&lt;expiration&gt;` is the time until expiration, in seconds.<br><br>For a more complete explanation of the transient cache, including the<br>network|site cache, please see docs for `wp transient`.<br><br>## OPTIONS<br><br>&lt;key&gt;<br>: Key for the transient.<br><br>&lt;value&gt;<br>: Value to be set for the transient.<br><br>[&lt;expiration&gt;]<br>: Time until expiration, in seconds.<br><br>[--network]<br>: Set the value of a network|site transient. On single site, this is<br>is a specially-named cache key. On multisite, this is a global cache<br>(instead of local to the site).<br><br>## EXAMPLES<br><br> $ wp transient set sample_key "test data" 3600<br> Success: Transient added.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>key value expiration[=null]</params>
  </command>
  <command>
    <name>transient type</name>
    <help><![CDATA[<strong>transient type</strong> <br/><br/>Determines the type of transients implementation.<br/>Indicates whether the transients API is using an object cache or the<br>database.<br><br>For a more complete explanation of the transient cache, including the<br>network|site cache, please see docs for `wp transient`.<br><br>## EXAMPLES<br><br> $ wp transient type<br> Transients are saved to the database.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>user add-cap</name>
    <help><![CDATA[<strong>user add-cap</strong> &lt;user&gt; &lt;cap&gt;<br/><br/>Adds a capability to a user.<br/>## OPTIONS<br><br>&lt;user&gt;<br>: User ID, user email, or user login.<br><br>&lt;cap&gt;<br>: The capability to add.<br><br>## EXAMPLES<br><br> # Add a capability for a user<br> $ wp user add-cap john create_premium_item<br> Success: Added 'create_premium_item' capability for john (16).<br><br> # Add a capability for a user<br> $ wp user add-cap 15 edit_product<br> Success: Added 'edit_product' capability for johndoe (15).<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>user cap</params>
  </command>
  <command>
    <name>user add-role</name>
    <help><![CDATA[<strong>user add-role</strong> &lt;user&gt; &lt;role&gt;<br/><br/>Adds a role for a user.<br/>## OPTIONS<br><br>&lt;user&gt;<br>: User ID, user email, or user login.<br><br>&lt;role&gt;<br>: Add the specified role to the user.<br><br>## EXAMPLES<br><br> $ wp user add-role 12 author<br> Success: Added 'author' role for johndoe (12).<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>user role</params>
  </command>
  <command>
    <name>user check-password</name>
    <help><![CDATA[<strong>user check-password</strong> &lt;user&gt; &lt;user_pass&gt;<br/><br/>Checks if a user's password is valid or not.<br/>## OPTIONS<br><br>&lt;user&gt;<br>: The user login, user email or user ID of the user to check credentials for.<br><br>&lt;user_pass&gt;<br>: A string that contains the plain text password for the user.<br><br>## EXAMPLES<br><br> # Check whether given credentials are valid; exit status 0 if valid, otherwise 1<br> $ wp user check-password admin adminpass<br> $ echo $?<br> 1<br><br> # Bash script for checking whether given credentials are valid or not<br> if ! $(wp user check-password admin adminpass); then<br> notify-send "Invalid Credentials";<br> fi<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>user user_pass</params>
  </command>
  <command>
    <name>user create</name>
    <help><![CDATA[<strong>user create</strong> &lt;user-login&gt; &lt;user-email&gt; [--role=&lt;role&gt;] [--user_pass=&lt;password&gt;] [--user_registered=&lt;yyyy-mm-dd-hh-ii-ss&gt;] [--display_name=&lt;name&gt;] [--user_nicename=&lt;nice_name&gt;] [--user_url=&lt;url&gt;] [--nickname=&lt;nickname&gt;] [--first_name=&lt;first_name&gt;] [--last_name=&lt;last_name&gt;] [--description=&lt;description&gt;] [--rich_editing=&lt;rich_editing&gt;] [--send-email] [--porcelain]<br/><br/>Creates a new user.<br/>## OPTIONS<br><br>&lt;user-login&gt;<br>: The login of the user to create.<br><br>&lt;user-email&gt;<br>: The email address of the user to create.<br><br>[--role=&lt;role&gt;]<br>: The role of the user to create. Default: default role. Possible values<br>include 'administrator', 'editor', 'author', 'contributor', 'subscriber'.<br><br>[--user_pass=&lt;password&gt;]<br>: The user password. Default: randomly generated.<br><br>[--user_registered=&lt;yyyy-mm-dd-hh-ii-ss&gt;]<br>: The date the user registered. Default: current date.<br><br>[--display_name=&lt;name&gt;]<br>: The display name.<br><br>[--user_nicename=&lt;nice_name&gt;]<br>: A string that contains a URL-friendly name for the user. The default is the user's username.<br><br>[--user_url=&lt;url&gt;]<br>: A string containing the user's URL for the user's web site.<br><br>[--nickname=&lt;nickname&gt;]<br>: The user's nickname, defaults to the user's username.<br><br>[--first_name=&lt;first_name&gt;]<br>: The user's first name.<br><br>[--last_name=&lt;last_name&gt;]<br>: The user's last name.<br><br>[--description=&lt;description&gt;]<br>: A string containing content about the user.<br><br>[--rich_editing=&lt;rich_editing&gt;]<br>: A string for whether to enable the rich editor or not. False if not empty.<br><br>[--send-email]<br>: Send an email to the user with their new account details.<br><br>[--porcelain]<br>: Output just the new user id.<br><br>## EXAMPLES<br><br> # Create user<br> $ wp user create bob bob@example.com --role=author<br> Success: Created user 3.<br> Password: k9**&I4vNH(&<br><br> # Create user without showing password upon success<br> $ wp user create ann ann@example.com --porcelain<br> 4<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>user-login user-email</params>
  </command>
  <command>
    <name>user delete</name>
    <help><![CDATA[<strong>user delete</strong> &lt;user&gt;... [--network] [--reassign=&lt;user-id&gt;] [--yes]<br/><br/>Deletes one or more users from the current site.<br/>On multisite, `wp user delete` only removes the user from the current<br>site. Include `--network` to also remove the user from the database, but<br>make sure to reassign their posts prior to deleting the user.<br><br>## OPTIONS<br><br>&lt;user&gt;...<br>: The user login, user email, or user ID of the user(s) to delete.<br><br>[--network]<br>: On multisite, delete the user from the entire network.<br><br>[--reassign=&lt;user-id&gt;]<br>: User ID to reassign the posts to.<br><br>[--yes]<br>: Answer yes to any confirmation prompts.<br><br>## EXAMPLES<br><br> # Delete user 123 and reassign posts to user 567<br> $ wp user delete 123 --reassign=567<br> Success: Removed user 123 from http://example.com<br><br> # Delete all contributors and reassign their posts to user 2<br> $ wp user delete $(wp user list --role=contributor --field=ID) --reassign=2<br> Success: Removed user 813 from http://example.com<br> Success: Removed user 578 from http://example.com<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;user&gt;...</params>
  </command>
  <command>
    <name>user generate</name>
    <help><![CDATA[<strong>user generate</strong> [--count=&lt;number&gt;] [--role=&lt;role&gt;] [--format=&lt;format&gt;]<br/><br/>Generates some users.<br/>Creates a specified number of new users with dummy data.<br><br>## OPTIONS<br><br>[--count=&lt;number&gt;]<br>: How many users to generate?<br>---<br>default: 100<br>---<br><br>[--role=&lt;role&gt;]<br>: The role of the generated users. Default: default role from WP<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: progress<br>options:<br> - progress<br> - ids<br>---<br><br>## EXAMPLES<br><br> # Add meta to every generated users.<br> $ wp user generate --format=ids --count=3 | xargs -d ' ' -I % wp user meta add % foo bar<br> Success: Added custom field.<br> Success: Added custom field.<br> Success: Added custom field.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>user get</name>
    <help><![CDATA[<strong>user get</strong> &lt;user&gt; [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Gets details about a user.<br/>## OPTIONS<br><br>&lt;user&gt;<br>: User ID, user email, or user login.<br><br>[--field=&lt;field&gt;]<br>: Instead of returning the whole user, returns the value of a single field.<br><br>[--fields=&lt;fields&gt;]<br>: Get a specific subset of the user's fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br>---<br><br>## EXAMPLES<br><br> # Get user<br> $ wp user get 12 --field=login<br> supervisor<br><br> # Get user and export to JSON file<br> $ wp user get bob --format=json &gt; bob.json<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>user</params>
  </command>
  <command>
    <name>user import-csv</name>
    <help><![CDATA[<strong>user import-csv</strong> &lt;file&gt; [--send-email] [--skip-update]<br/><br/>Imports users from a CSV file.<br/>If the user already exists (matching the email address or login), then<br>the user is updated unless the `--skip-update` flag is used.<br><br>## OPTIONS<br><br>&lt;file&gt;<br>: The local or remote CSV file of users to import. If '-', then reads from STDIN.<br><br>[--send-email]<br>: Send an email to new users with their account details.<br><br>[--skip-update]<br>: Don't update users that already exist.<br><br>## EXAMPLES<br><br> # Import users from local CSV file<br> $ wp user import-csv /path/to/users.csv<br> Success: bobjones created<br> Success: newuser1 created<br> Success: existinguser created<br><br> # Import users from remote CSV file<br> $ wp user import-csv http://example.com/users.csv<br><br> Sample users.csv file:<br><br> user_login,user_email,display_name,role<br> bobjones,bobjones@example.com,Bob Jones,contributor<br> newuser1,newuser1@example.com,New User,author<br> existinguser,existinguser@example.com,Existing User,administrator<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>file</params>
  </command>
  <command>
    <name>user list</name>
    <help><![CDATA[<strong>user list</strong> [--role=&lt;role&gt;] [--&lt;field&gt;=&lt;value&gt;] [--network] [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Lists users.<br/>Display WordPress users based on all arguments supported by<br>[WP_User_Query()](https://developer.wordpress.org/reference/classes/wp_user_query/prepare_query/).<br><br>## OPTIONS<br><br>[--role=&lt;role&gt;]<br>: Only display users with a certain role.<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Control output by one or more arguments of WP_User_Query().<br><br>[--network]<br>: List all users in the network for multisite.<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field for each user.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - ids<br> - json<br> - count<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each user:<br><br>* ID<br>* user_login<br>* display_name<br>* user_email<br>* user_registered<br>* roles<br><br>These fields are optionally available:<br><br>* user_pass<br>* user_nicename<br>* user_url<br>* user_activation_key<br>* user_status<br>* spam<br>* deleted<br>* caps<br>* cap_key<br>* allcaps<br>* filter<br>* url<br><br>## EXAMPLES<br><br> # List user IDs<br> $ wp user list --field=ID<br> 1<br><br> # List users with administrator role<br> $ wp user list --role=administrator --format=csv<br> ID,user_login,display_name,user_email,user_registered,roles<br> 1,supervisor,supervisor,supervisor@gmail.com,"2016-06-03 04:37:00",administrator<br><br> # List users with only given fields<br> $ wp user list --fields=display_name,user_email --format=json<br> [{"display_name":"supervisor","user_email":"supervisor@gmail.com"}]<br><br> # List users ordered by the 'last_activity' meta value.<br> $ wp user list --meta_key=last_activity --orderby=meta_value_num<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
  </command>
  <command>
    <name>user list-caps</name>
    <help><![CDATA[<strong>user list-caps</strong> &lt;user&gt; [--format=&lt;format&gt;]<br/><br/>Lists all capabilities for a user.<br/>## OPTIONS<br><br>&lt;user&gt;<br>: User ID, user email, or login.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: list<br>options:<br> - list<br> - table<br> - csv<br> - json<br> - count<br> - yaml<br>---<br><br>## EXAMPLES<br><br> $ wp user list-caps 21<br> edit_product<br> create_premium_item<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>user</params>
  </command>
  <command>
    <name>user meta add</name>
    <help><![CDATA[<strong>user meta add</strong> &lt;user&gt; &lt;key&gt; &lt;value&gt; [--format=&lt;format&gt;]<br/><br/>Adds a meta field.<br/>## OPTIONS<br><br>&lt;user&gt;<br>: The user login, user email, or user ID of the user to add metadata for.<br><br>&lt;key&gt;<br>: The metadata key.<br><br>&lt;value&gt;<br>: The new metadata value.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## EXAMPLES<br><br> # Add user meta<br> $ wp user meta add 123 bio "Mary is an WordPress developer."<br> Success: Added custom field.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>user key value</params>
  </command>
  <command>
    <name>user meta delete</name>
    <help><![CDATA[<strong>user meta delete</strong> &lt;user&gt; &lt;key&gt; [&lt;value&gt;]<br/><br/>Deletes a meta field.<br/>## OPTIONS<br><br>&lt;user&gt;<br>: The user login, user email, or user ID of the user to delete metadata from.<br><br>&lt;key&gt;<br>: The metadata key.<br><br>[&lt;value&gt;]<br>: The value to delete. If omitted, all rows with key will deleted.<br><br>## EXAMPLES<br><br> # Delete user meta<br> $ wp user meta delete 123 bio<br> Success: Deleted custom field.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>user key value[=null]</params>
  </command>
  <command>
    <name>user meta get</name>
    <help><![CDATA[<strong>user meta get</strong> &lt;user&gt; &lt;key&gt; [--format=&lt;format&gt;]<br/><br/>Gets meta field value.<br/>## OPTIONS<br><br>&lt;user&gt;<br>: The user login, user email, or user ID of the user to get metadata for.<br><br>&lt;key&gt;<br>: The metadata key.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br>---<br><br>## EXAMPLES<br><br> # Get user meta<br> $ wp user meta get 123 bio<br> Mary is an WordPress developer.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>user key</params>
  </command>
  <command>
    <name>user meta list</name>
    <help><![CDATA[<strong>user meta list</strong> &lt;user&gt; [--keys=&lt;keys&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;] [--orderby=&lt;fields&gt;] [--order=&lt;order&gt;] [--unserialize]<br/><br/>Lists all metadata associated with a user.<br/>## OPTIONS<br><br>&lt;user&gt;<br>: The user login, user email, or user ID of the user to get metadata for.<br><br>[--keys=&lt;keys&gt;]<br>: Limit output to metadata of specific keys.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific row fields. Defaults to id,meta_key,meta_value.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - count<br> - yaml<br>---<br><br>[--orderby=&lt;fields&gt;]<br>: Set orderby which field.<br>---<br>default: id<br>options:<br> - id<br> - meta_key<br> - meta_value<br>---<br><br>[--order=&lt;order&gt;]<br>: Set ascending or descending order.<br>---<br>default: asc<br>options:<br> - asc<br> - desc<br>---<br><br>[--unserialize]<br>: Unserialize meta_value output.<br><br>## EXAMPLES<br><br> # List user meta<br> $ wp user meta list 123 --keys=nickname,description,wp_capabilities<br> +---------+-----------------+--------------------------------+<br> | user_id | meta_key | meta_value |<br> +---------+-----------------+--------------------------------+<br> | 123 | nickname | supervisor |<br> | 123 | description | Mary is a WordPress developer. |<br> | 123 | wp_capabilities | {"administrator":true} |<br> +---------+-----------------+--------------------------------+<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>user</params>
  </command>
  <command>
    <name>user meta patch</name>
    <help><![CDATA[<strong>user meta patch</strong> &lt;action&gt; &lt;id&gt; &lt;key&gt; &lt;key-path&gt;... [&lt;value&gt;] [--format=&lt;format&gt;]<br/><br/>Update a nested value for a meta field.<br/>## OPTIONS<br><br>&lt;action&gt;<br>: Patch action to perform.<br>---<br>options:<br> - insert<br> - update<br> - delete<br>---<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to update.<br><br>&lt;key-path&gt;...<br>: The name(s) of the keys within the value to locate the value to patch.<br><br>[&lt;value&gt;]<br>: The new value. If omitted, the value is read from STDIN.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>action id key &lt;key-path&gt;... value[=null]</params>
  </command>
  <command>
    <name>user meta pluck</name>
    <help><![CDATA[<strong>user meta pluck</strong> &lt;id&gt; &lt;key&gt; &lt;key-path&gt;... [--format=&lt;format&gt;]<br/><br/>Get a nested value from a meta field.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;key&gt;<br>: The name of the meta field to get.<br><br>&lt;key-path&gt;...<br>: The name(s) of the keys within the value to locate the value to pluck.<br><br>[--format=&lt;format&gt;]<br>: The output format of the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br> - yaml<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id key &lt;key-path&gt;...</params>
  </command>
  <command>
    <name>user meta update</name>
    <help><![CDATA[<strong>user meta update</strong> &lt;user&gt; &lt;key&gt; &lt;value&gt; [--format=&lt;format&gt;]<br/><br/>Updates a meta field.<br/>## OPTIONS<br><br>&lt;user&gt;<br>: The user login, user email, or user ID of the user to update metadata for.<br><br>&lt;key&gt;<br>: The metadata key.<br><br>&lt;value&gt;<br>: The new metadata value.<br><br>[--format=&lt;format&gt;]<br>: The serialization format for the value.<br>---<br>default: plaintext<br>options:<br> - plaintext<br> - json<br>---<br><br>## EXAMPLES<br><br> # Update user meta<br> $ wp user meta update 123 bio "Mary is an awesome WordPress developer."<br> Success: Updated custom field 'bio'.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>user key value</params>
  </command>
  <command>
    <name>user remove-cap</name>
    <help><![CDATA[<strong>user remove-cap</strong> &lt;user&gt; &lt;cap&gt;<br/><br/>Removes a user's capability.<br/>## OPTIONS<br><br>&lt;user&gt;<br>: User ID, user email, or user login.<br><br>&lt;cap&gt;<br>: The capability to be removed.<br><br>## EXAMPLES<br><br> $ wp user remove-cap 11 publish_newsletters<br> Success: Removed 'publish_newsletters' cap for supervisor (11).<br><br> $ wp user remove-cap 11 publish_posts<br> Error: The 'publish_posts' cap for supervisor (11) is inherited from a role.<br><br> $ wp user remove-cap 11 nonexistent_cap<br> Error: No such 'nonexistent_cap' cap for supervisor (11).<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>user cap</params>
  </command>
  <command>
    <name>user remove-role</name>
    <help><![CDATA[<strong>user remove-role</strong> &lt;user&gt; [&lt;role&gt;]<br/><br/>Removes a user's role.<br/>## OPTIONS<br><br>&lt;user&gt;<br>: User ID, user email, or user login.<br><br>[&lt;role&gt;]<br>: A specific role to remove.<br><br>## EXAMPLES<br><br> $ wp user remove-role 12 author<br> Success: Removed 'author' role for johndoe (12).<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>user role[=null]</params>
  </command>
  <command>
    <name>user reset-password</name>
    <help><![CDATA[<strong>user reset-password</strong> &lt;user&gt;... [--skip-email]<br/><br/>Resets the password for one or more users.<br/>## OPTIONS<br><br>&lt;user&gt;...<br>: one or more user logins or IDs.<br><br>[--skip-email]<br>: Don't send an email notification to the affected user(s).<br><br>## EXAMPLES<br><br> # Reset the password for two users and send them the change email.<br> $ wp user reset-password admin editor<br> Reset password for admin.<br> Reset password for editor.<br> Success: Passwords reset.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;user&gt;...</params>
  </command>
  <command>
    <name>user session destroy</name>
    <help><![CDATA[<strong>user session destroy</strong> &lt;user&gt; [&lt;token&gt;] [--all]<br/><br/>Destroy a session for the given user.<br/>## OPTIONS<br><br>&lt;user&gt;<br>: User ID, user email, or user login.<br><br>[&lt;token&gt;]<br>: The token of the session to destroy. Defaults to the most recently created session.<br><br>[--all]<br>: Destroy all of the user's sessions.<br><br>## EXAMPLES<br><br> # Destroy the most recent session of the given user.<br> $ wp user session destroy admin<br> Success: Destroyed session. 3 sessions remaining.<br><br> # Destroy a specific session of the given user.<br> $ wp user session destroy admin e073ad8540a9c2...<br> Success: Destroyed session. 2 sessions remaining.<br><br> # Destroy all the sessions of the given user.<br> $ wp user session destroy admin --all<br> Success: Destroyed all sessions.<br><br> # Destroy all sessions for all users.<br> $ wp user list --field=ID | xargs -n 1 wp user session destroy --all<br> Success: Destroyed all sessions.<br> Success: Destroyed all sessions.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>user token[=null]</params>
  </command>
  <command>
    <name>user session list</name>
    <help><![CDATA[<strong>user session list</strong> &lt;user&gt; [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>List sessions for the given user.<br/>Note: The `token` field does not return the actual token, but a hash of<br>it. The real token is not persisted and can only be found in the<br>corresponding cookies on the client side.<br><br>## OPTIONS<br><br>&lt;user&gt;<br>: User ID, user email, or user login.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br> - count<br> - ids<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each session:<br><br>* token<br>* login_time<br>* expiration_time<br>* ip<br>* ua<br><br>These fields are optionally available:<br><br>* expiration<br>* login<br><br>## EXAMPLES<br><br> # List a user's sessions.<br> $ wp user session list admin@example.com --format=csv<br> login_time,expiration_time,ip,ua<br> "2016-01-01 12:34:56","2016-02-01 12:34:56",127.0.0.1,"Mozilla/5.0..."<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>user</params>
  </command>
  <command>
    <name>user set-role</name>
    <help><![CDATA[<strong>user set-role</strong> &lt;user&gt; [&lt;role&gt;]<br/><br/>Sets the user role.<br/>## OPTIONS<br><br>&lt;user&gt;<br>: User ID, user email, or user login.<br><br>[&lt;role&gt;]<br>: Make the user have the specified role. If not passed, the default role is<br>used.<br><br>## EXAMPLES<br><br> $ wp user set-role 12 author<br> Success: Added johndoe (12) to http://example.com as author.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>user role[=null]</params>
  </command>
  <command>
    <name>user spam</name>
    <help><![CDATA[<strong>user spam</strong> &lt;id&gt;...<br/><br/>Marks one or more users as spam.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: One or more IDs of users to mark as spam.<br><br>## EXAMPLES<br><br> $ wp user spam 123<br> User 123 marked as spam.<br> Success: Spamed 1 of 1 users.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>user term add</name>
    <help><![CDATA[<strong>user term add</strong> &lt;id&gt; &lt;taxonomy&gt; &lt;term&gt;... [--by=&lt;field&gt;]<br/><br/>Add a term to an object.<br/>Append the term to the existing set of terms on the object.<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;taxonomy&gt;<br>: The name of the taxonomy type to be added.<br><br>&lt;term&gt;...<br>: The slug of the term or terms to be added.<br><br>[--by=&lt;field&gt;]<br>: Explicitly handle the term value as a slug or id.<br>---<br>options:<br> - slug<br> - id<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id taxonomy &lt;term&gt;...</params>
  </command>
  <command>
    <name>user term list</name>
    <help><![CDATA[<strong>user term list</strong> &lt;id&gt; &lt;taxonomy&gt;... [--field=&lt;field&gt;] [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>List all terms associated with an object.<br/>&lt;id&gt;<br>: ID for the object.<br><br>&lt;taxonomy&gt;...<br>: One or more taxonomies to list.<br><br>[--field=&lt;field&gt;]<br>: Prints the value of a single field for each term.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific row fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - json<br> - yaml<br> - count<br> - ids<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each term:<br><br>* term_id<br>* name<br>* slug<br>* taxonomy<br><br>These fields are optionally available:<br><br>* term_taxonomy_id<br>* description<br>* term_group<br>* parent<br>* count<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id &lt;taxonomy&gt;...</params>
  </command>
  <command>
    <name>user term remove</name>
    <help><![CDATA[<strong>user term remove</strong> &lt;id&gt; &lt;taxonomy&gt; [&lt;term&gt;...] [--by=&lt;field&gt;] [--all]<br/><br/>Remove a term from an object.<br/>## OPTIONS<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;taxonomy&gt;<br>: The name of the term's taxonomy.<br><br>[&lt;term&gt;...]<br>: The name of the term or terms to be removed from the object.<br><br>[--by=&lt;field&gt;]<br>: Explicitly handle the term value as a slug or id.<br>---<br>options:<br> - slug<br> - id<br>---<br><br>[--all]<br>: Remove all terms from the object.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id taxonomy &lt;term&gt;...[=null]</params>
  </command>
  <command>
    <name>user term set</name>
    <help><![CDATA[<strong>user term set</strong> &lt;id&gt; &lt;taxonomy&gt; &lt;term&gt;... [--by=&lt;field&gt;]<br/><br/>Set object terms.<br/>Replaces existing terms on the object.<br><br>&lt;id&gt;<br>: The ID of the object.<br><br>&lt;taxonomy&gt;<br>: The name of the taxonomy type to be updated.<br><br>&lt;term&gt;...<br>: The slug of the term or terms to be updated.<br><br>[--by=&lt;field&gt;]<br>: Explicitly handle the term value as a slug or id.<br>---<br>options:<br> - slug<br> - id<br>---<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id taxonomy &lt;term&gt;...</params>
  </command>
  <command>
    <name>user unspam</name>
    <help><![CDATA[<strong>user unspam</strong> &lt;id&gt;...<br/><br/>Removes one or more users from spam.<br/>## OPTIONS<br><br>&lt;id&gt;...<br>: One or more IDs of users to remove from spam.<br><br>## EXAMPLES<br><br> $ wp user unspam 123<br> User 123 removed from spam.<br> Success: Unspamed 1 of 1 users.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>id ...</params>
  </command>
  <command>
    <name>user update</name>
    <help><![CDATA[<strong>user update</strong> &lt;user&gt;... [--user_pass=&lt;password&gt;] [--user_nicename=&lt;nice_name&gt;] [--user_url=&lt;url&gt;] [--user_email=&lt;email&gt;] [--display_name=&lt;display_name&gt;] [--nickname=&lt;nickname&gt;] [--first_name=&lt;first_name&gt;] [--last_name=&lt;last_name&gt;] [--description=&lt;description&gt;] [--rich_editing=&lt;rich_editing&gt;] [--user_registered=&lt;yyyy-mm-dd-hh-ii-ss&gt;] [--role=&lt;role&gt;] --&lt;field&gt;=&lt;value&gt; [--skip-email]<br/><br/>Updates an existing user.<br/>## OPTIONS<br><br>&lt;user&gt;...<br>: The user login, user email or user ID of the user(s) to update.<br><br>[--user_pass=&lt;password&gt;]<br>: A string that contains the plain text password for the user.<br><br>[--user_nicename=&lt;nice_name&gt;]<br>: A string that contains a URL-friendly name for the user. The default is the user's username.<br><br>[--user_url=&lt;url&gt;]<br>: A string containing the user's URL for the user's web site.<br><br>[--user_email=&lt;email&gt;]<br>: A string containing the user's email address.<br><br>[--display_name=&lt;display_name&gt;]<br>: A string that will be shown on the site. Defaults to user's username.<br><br>[--nickname=&lt;nickname&gt;]<br>: The user's nickname, defaults to the user's username.<br><br>[--first_name=&lt;first_name&gt;]<br>: The user's first name.<br><br>[--last_name=&lt;last_name&gt;]<br>: The user's last name.<br><br>[--description=&lt;description&gt;]<br>: A string containing content about the user.<br><br>[--rich_editing=&lt;rich_editing&gt;]<br>: A string for whether to enable the rich editor or not. False if not empty.<br><br>[--user_registered=&lt;yyyy-mm-dd-hh-ii-ss&gt;]<br>: The date the user registered.<br><br>[--role=&lt;role&gt;]<br>: A string used to set the user's role.<br><br>--&lt;field&gt;=&lt;value&gt;<br>: One or more fields to update. For accepted fields, see wp_update_user().<br><br>[--skip-email]<br>: Don't send an email notification to the user.<br><br>## EXAMPLES<br><br> # Update user<br> $ wp user update 123 --display_name=Mary --user_pass=marypass<br> Success: Updated user 123.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;user&gt;...</params>
  </command>
  <command>
    <name>widget add</name>
    <help><![CDATA[<strong>widget add</strong> &lt;name&gt; &lt;sidebar-id&gt; [&lt;position&gt;] [--&lt;field&gt;=&lt;value&gt;]<br/><br/>Adds a widget to a sidebar.<br/>Creates a new widget entry in the database, and associates it with the<br>sidebar.<br><br>## OPTIONS<br><br>&lt;name&gt;<br>: Widget name.<br><br>&lt;sidebar-id&gt;<br>: ID for the corresponding sidebar.<br><br>[&lt;position&gt;]<br>: Widget's current position within the sidebar. Defaults to last<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Widget option to add, with its new value<br><br>## EXAMPLES<br><br> # Add a new calendar widget to sidebar-1 with title "Calendar"<br> $ wp widget add calendar sidebar-1 2 --title="Calendar"<br> Success: Added widget to sidebar.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>name sidebar-id position[=null]</params>
  </command>
  <command>
    <name>widget deactivate</name>
    <help><![CDATA[<strong>widget deactivate</strong> &lt;widget-id&gt;...<br/><br/>Deactivates one or more widgets from an active sidebar.<br/>Moves widgets to Inactive Widgets.<br><br>## OPTIONS<br><br>&lt;widget-id&gt;...<br>: Unique ID for the widget(s)<br><br>## EXAMPLES<br><br> # Deactivate the recent-comments-2 widget.<br> $ wp widget deactivate recent-comments-2<br> Success: 1 widget deactivated.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>widget-id ...</params>
  </command>
  <command>
    <name>widget delete</name>
    <help><![CDATA[<strong>widget delete</strong> &lt;widget-id&gt;...<br/><br/>Deletes one or more widgets from a sidebar.<br/>## OPTIONS<br><br>&lt;widget-id&gt;...<br>: Unique ID for the widget(s)<br><br>## EXAMPLES<br><br> # Delete the recent-comments-2 widget from its sidebar.<br> $ wp widget delete recent-comments-2<br> Success: Deleted 1 of 1 widgets.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>widget-id ...</params>
  </command>
  <command>
    <name>widget list</name>
    <help><![CDATA[<strong>widget list</strong> &lt;sidebar-id&gt; [--fields=&lt;fields&gt;] [--format=&lt;format&gt;]<br/><br/>Lists widgets associated with a sidebar.<br/>## OPTIONS<br><br>&lt;sidebar-id&gt;<br>: ID for the corresponding sidebar.<br><br>[--fields=&lt;fields&gt;]<br>: Limit the output to specific object fields.<br><br>[--format=&lt;format&gt;]<br>: Render output in a particular format.<br>---<br>default: table<br>options:<br> - table<br> - csv<br> - ids<br> - json<br> - count<br> - yaml<br>---<br><br>## AVAILABLE FIELDS<br><br>These fields will be displayed by default for each widget:<br><br>* name<br>* id<br>* position<br>* options<br><br>There are no optionally available fields.<br><br>## EXAMPLES<br><br> $ wp widget list sidebar-1 --fields=name,id --format=csv<br> name,id<br> meta,meta-5<br> search,search-3<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>sidebar-id</params>
  </command>
  <command>
    <name>widget move</name>
    <help><![CDATA[<strong>widget move</strong> &lt;widget-id&gt; [--position=&lt;position&gt;] [--sidebar-id=&lt;sidebar-id&gt;]<br/><br/>Moves the position of a widget.<br/>Changes the order of a widget in its existing sidebar, or moves it to a<br>new sidebar.<br><br>## OPTIONS<br><br>&lt;widget-id&gt;<br>: Unique ID for the widget<br><br>[--position=&lt;position&gt;]<br>: Assign the widget to a new position.<br><br>[--sidebar-id=&lt;sidebar-id&gt;]<br>: Assign the widget to a new sidebar<br><br>## EXAMPLES<br><br> # Change position of widget<br> $ wp widget move recent-comments-2 --position=2<br> Success: Widget moved.<br><br> # Move widget to Inactive Widgets<br> $ wp widget move recent-comments-2 --sidebar-id=wp_inactive_widgets<br> Success: Widget moved.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>widget-id</params>
  </command>
  <command>
    <name>widget reset</name>
    <help><![CDATA[<strong>widget reset</strong> [&lt;sidebar-id&gt;...] [--all]<br/><br/>Resets sidebar.<br/>Removes all widgets from the sidebar and places them in Inactive Widgets.<br><br>## OPTIONS<br><br>[&lt;sidebar-id&gt;...]<br>: One or more sidebars to reset.<br><br>[--all]<br>: If set, all sidebars will be reset.<br><br>## EXAMPLES<br><br> # Reset a sidebar<br> $ wp widget reset sidebar-1<br> Success: Sidebar 'sidebar-1' reset.<br><br> # Reset multiple sidebars<br> $ wp widget reset sidebar-1 sidebar-2<br> Success: Sidebar 'sidebar-1' reset.<br> Success: Sidebar 'sidebar-2' reset.<br><br> # Reset all sidebars<br> $ wp widget reset --all<br> Success: Sidebar 'sidebar-1' reset.<br> Success: Sidebar 'sidebar-2' reset.<br> Success: Sidebar 'sidebar-3' reset.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>&lt;sidebar-id&gt;...[=null]</params>
  </command>
  <command>
    <name>widget update</name>
    <help><![CDATA[<strong>widget update</strong> &lt;widget-id&gt; [--&lt;field&gt;=&lt;value&gt;]<br/><br/>Updates options for an existing widget.<br/>## OPTIONS<br><br>&lt;widget-id&gt;<br>: Unique ID for the widget<br><br>[--&lt;field&gt;=&lt;value&gt;]<br>: Field to update, with its new value<br><br>## EXAMPLES<br><br> # Change calendar-1 widget title to "Our Calendar"<br> $ wp widget update calendar-1 --title="Our Calendar"<br> Success: Widget updated.<br><br>## GLOBAL PARAMETERS<br><br> --path=&lt;path&gt;<br> Path to the WordPress files.<br><br> --url=&lt;url&gt;<br> Pretend request came from given URL. In multisite, this argument is how the target site is specified.<br><br> --ssh=[&lt;scheme&gt;:][&lt;user&gt;@]&lt;host|container&gt;[:&lt;port&gt;][&lt;path&gt;]<br> Perform operation against a remote server over SSH (or a container using scheme of "docker", "docker-compose", "vagrant").<br><br> --http=&lt;http&gt;<br> Perform operation against a remote WordPress installation over HTTP.<br><br> --user=&lt;id|login|email&gt;<br> Set the WordPress user.<br><br> --skip-plugins[=&lt;plugins&gt;]<br> Skip loading all plugins, or a comma-separated list of plugins. Note: mu-plugins are still loaded.<br><br> --skip-themes[=&lt;themes&gt;]<br> Skip loading all themes, or a comma-separated list of themes.<br><br> --skip-packages<br> Skip loading all installed packages.<br><br> --require=&lt;path&gt;<br> Load PHP file before running the command (may be used more than once).<br><br> --[no-]color<br> Whether to colorize the output.<br><br> --debug[=&lt;group&gt;]<br> Show all PHP errors and add verbosity to WP-CLI output. Built-in groups include: bootstrap, commandfactory, and help.<br><br> --prompt[=&lt;assoc&gt;]<br> Prompt the user to enter values for all command arguments, or a subset specified as comma-separated values.<br><br> --quiet<br> Suppress informational messages.<br><br><br/>]]></help>
    <params>widget-id</params>
  </command>
</framework>

